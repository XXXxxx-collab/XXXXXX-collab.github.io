<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“flex布局”</title>
      <link href="/2021/12/22/%E7%A7%BB%E5%8A%A8%E7%AB%AFflex%E5%B8%83%E5%B1%80/"/>
      <url>/2021/12/22/%E7%A7%BB%E5%8A%A8%E7%AB%AFflex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="移动端Web开发（flex布局）"><a href="#移动端Web开发（flex布局）" class="headerlink" title="移动端Web开发（flex布局）"></a>移动端Web开发（flex布局）</h1><h4 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h4><p>　　Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p><p>✍目录总览：</p><p><img src="https://img-blog.csdnimg.cn/8e8b3eac2911466bab74be296971a145.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="思维导图"></p><span id="more"></span><p>移动端最常用的两种布局：<strong>流式布局（百分比布局)</strong>  和 ==<strong>flex布局</strong>==</p><p><strong>流式布局（百分比布局)</strong></p><ul><li>流式布局，就是百分比布局，也称非固定像素布局。</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li></ul><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="==flex布局=="></a>==<strong>flex布局</strong>==</h2><h2 id="一、Flex布局是什么？-1"><a href="#一、Flex布局是什么？-1" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为Flex布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用Flex布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webkit内核的浏览器，必须加上-webkit前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><p> <img src="https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png" alt="img"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h2 id="三、容器的属性（掌握）"><a href="#三、容器的属性（掌握）" class="headerlink" title="三、容器的属性（掌握）"></a>三、容器的属性（掌握）</h2><p>以下6个属性设置在容器上。</p><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h3 id="3-1-flex-direction属性（重点）"><a href="#3-1-flex-direction属性（重点）" class="headerlink" title="3.1 flex-direction属性（重点）"></a>3.1 flex-direction属性（重点）</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png" alt="img"></p><p>它可能有4个值。</p><p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。<br>3.2 flex-wrap属性</p><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><p> <img src="https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取三个值。</p><p>（1）nowrap（默认）：不换行。</p><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png" alt="img"></p><p>（2）wrap：换行，第一行在上方。</p><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg" alt="img"></p><p>（3）wrap-reverse：换行，第一行在下方。</p><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg" alt="img"></p><h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-justify-content属性（重点）"><a href="#3-4-justify-content属性（重点）" class="headerlink" title="3.4 justify-content属性（重点）"></a>3.4 justify-content属性（重点）</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png" alt="img"></p><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></blockquote><h3 id="3-5-align-items属性（重点）"><a href="#3-5-align-items属性（重点）" class="headerlink" title="3.5 align-items属性（重点）"></a>3.5 align-items属性（重点）</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png" alt="img"></p><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li><strong>center：交叉轴的中点对齐。</strong></li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></blockquote><h3 id="3-6-align-content属性（重点）"><a href="#3-6-align-content属性（重点）" class="headerlink" title="3.6 align-content属性（重点）"></a>3.6 align-content属性（重点）</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png" alt="img"></p><p>该属性可能取6个值。</p><blockquote><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul></blockquote><h2 id="四、项目的属性（熟悉）"><a href="#四、项目的属性（熟悉）" class="headerlink" title="四、项目的属性（熟悉）"></a>四、项目的属性（熟悉）</h2><p>以下6个属性设置在项目上。</p><blockquote><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul></blockquote><h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png" alt="img"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png" alt="img"></p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg" alt="img"></p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png" alt="img"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> css </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“CSS基础知识（一）”</title>
      <link href="/2021/08/16/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/08/16/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS基础知识（一）"><a href="#CSS基础知识（一）" class="headerlink" title="CSS基础知识（一）"></a>CSS基础知识（一）</h1><h4 id="什么是-CSS？"><a href="#什么是-CSS？" class="headerlink" title="什么是 CSS？"></a>什么是 CSS？</h4><ul><li><em>CSS</em> 指的是层叠样式表 (<em>C</em>ascading <em>S</em>tyle <em>S</em>heets)</li><li>CSS 描述了<em>如何在屏幕、纸张或其他媒体上显示 HTML 元素</em></li><li>CSS <em>节省了大量工作</em>。它可以同时控制多张网页的布局</li><li>外部样式表存储在 <em>CSS 文件</em>中</li></ul><p>✍目录总览：</p><p><img src="https://img-blog.csdnimg.cn/53e73b851fa04cf395325296fe89ea75.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><span id="more"></span><p>✍目录总览：（标签基础选择器、字体属性、文本属性、复合选择器、元素显示模式、背景）</p><h2 id="1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）"><a href="#1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）" class="headerlink" title="1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）"></a>1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）</h2><h3 id="1-1、标签选择器（重点）"><a href="#1-1、标签选择器（重点）" class="headerlink" title="1.1、标签选择器（重点）"></a>1.1、标签选择器（重点）</h3><ul><li>标签选择器的作用是<strong>为页面中某一类标签指定统一的CSS样式</strong></li><li>优点是能快速为页面中同类型的标签统一设置样式</li><li>缺点是不能设计差异化样式，只能选择全部的当前标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标签名 &#123;</span><br><span class="line">    属性1: 属性值1;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>规范：<ul><li>属性值前面，冒号后面，保留一个空格</li><li>标签名和大括号中间保留空格</li></ul></li></ul><h3 id="1-2、类选择器（重点）"><a href="#1-2、类选择器（重点）" class="headerlink" title="1.2、类选择器（重点）"></a>1.2、类选择器（重点）</h3><p>如果想要<strong>差异化选择不同的标签，单独选一个或者几个标签，可以使用****类选择器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性1: 属性值1;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">.red &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结构需要用class属性来调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&#x27;red&#x27;&gt;  变红色 &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>类选择器在 HTML 中以 class 属性表示，在CSS中，类选择器以一个点 <code>.</code> 号表示</li><li>记忆口诀：样式<strong>点</strong>定义，结构<strong>类</strong>调用</li></ol><h4 id="1-2-1、类选择器多类名"><a href="#1-2-1、类选择器多类名" class="headerlink" title="1.2.1、类选择器多类名"></a>1.2.1、类选择器多类名</h4><p>我们可以给一个标签指定多个类名，简单理解就是一个标签有多个名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;red font20&quot;&gt;林晓&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>在标签 class 属性中写多个类名</li><li>多个类名中间必须用空格分开</li><li>这个标签就可以分别具有这些类名的样</li></ul><p>多类名开发中使用场景：</p><ol><li>可以把一些标签元素相同的样式(公共的部分)放到一个类里面</li><li>这些标签都可以调用这个公共的类，然后再调用自己独有的类</li><li>从而节省CSS代码，统一修改也方便</li></ol><h3 id="1-3、id选择器"><a href="#1-3、id选择器" class="headerlink" title="1.3、id选择器"></a>1.3、id选择器</h3><ul><li><strong>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式</strong></li><li><strong>HTML 元素以 id属性 来设置 id 选择器，CSS中 id 选择器 以 “#” 来定义</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   &lt;style&gt;</span><br><span class="line">        #pink &#123;</span><br><span class="line">            color:pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;pink&quot;&gt;秦大林子&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>id 属性只能在每个 HTML 文档中出现一次。</strong></li><li><strong>记忆口诀：样式 *<em>#*</em> 定义，结构 *<em>id*</em> 调用。只能调用一次，别人切勿使用</strong></li></ul><h4 id="1-3-1、区别（id选择器与类选择器）"><a href="#1-3-1、区别（id选择器与类选择器）" class="headerlink" title="1.3.1、区别（id选择器与类选择器）"></a>1.3.1、区别（id选择器与类选择器）</h4><ul><li><strong>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</strong></li><li><strong>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</strong></li><li><strong>id 选择器和类选择器最大的不同在于使用次数上</strong></li><li><strong>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</strong></li></ul><p><strong>记忆口诀：</strong></p><ul><li>样式<strong>点</strong>定义，结构<strong>类</strong>调用</li><li>样式 **#**定义，结构 <strong>id</strong> 调用</li></ul><h3 id="1-4、通配符选择器"><a href="#1-4、通配符选择器" class="headerlink" title="1.4、通配符选择器"></a>1.4、通配符选择器</h3><ul><li>CSS 中， 通配符使用 <code>*</code> 定义，它表示选取页面中所有元素(标签)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    属性1：属性值1;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>一般是用于清楚元素标签的内外边距</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5、基础选择器总结"><a href="#1-5、基础选择器总结" class="headerlink" title="1.5、基础选择器总结"></a>1.5、基础选择器总结</h3><table><thead><tr><th align="left">基础选择器</th><th>作用</th><th align="left">特点</th><th>使用情况</th><th>语法</th><th></th></tr></thead><tbody><tr><td align="left">标签选择器</td><td>可以选出所有相同的标签</td><td align="left">不能差异化选择</td><td>较多</td><td>p {color: red}</td><td></td></tr><tr><td align="left">类选择器</td><td>可以选出1个或者多个标签</td><td align="left">可以根据需求选择</td><td>非常多</td><td>.nav {color: red}</td><td></td></tr><tr><td align="left">id 选择器</td><td>一次只能选择1个标签</td><td align="left">ID 属性只能在每个 HTML 文档中出现一次</td><td>一般和 js 搭配</td><td>#nav {color: red}</td><td></td></tr><tr><td align="left">通配符选择器</td><td>选择所有的标签</td><td align="left">选择的太多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red}</td><td></td></tr></tbody></table><h2 id="2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）"><a href="#2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）" class="headerlink" title="2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）"></a>2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）</h2><h3 id="2-1、font-family（文字字体）"><a href="#2-1、font-family（文字字体）" class="headerlink" title="2.1、font-family（文字字体）"></a>2.1、font-family（文字字体）</h3><ul><li><strong>CSS 使用</strong> <strong>font-family</strong> <strong>属性设置文本的字体系列</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div &#123; font-family:Arial,&quot;Microsoft Yahe&quot;,&quot;微软雅黑&quot;; &#125;</span><br></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>最常见的几个字体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    font-family: &quot;Microsoft Yahe&quot;,tahoma,arial,&quot;Hiragino Sans GB&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、font-size（字体大小）"><a href="#2-2、font-size（字体大小）" class="headerlink" title="2.2、font-size（字体大小）"></a>2.2、font-size（字体大小）</h3><ul><li><strong>CSS 使用 font-size 属性设置字体大小</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>px (像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为 16px</li></ul><h3 id="2-3、font-weight（字体粗细）"><a href="#2-3、font-weight（字体粗细）" class="headerlink" title="2.3、font-weight（字体粗细）"></a>2.3、font-weight（字体粗细）</h3><ul><li><strong>CSS 使用</strong> <strong>font-weight</strong> <strong>属性设置字体的粗细</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-weight:  normal | bold |  bolder  | lighter |number</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>normal</td><td>默认值(不加粗的)，相当于<strong>number=400</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>bold</td><td>定义粗体(加粗的)，相当于<strong>number=700</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>bolder</td><td>定义特粗体</td><td></td><td></td><td></td><td></td></tr><tr><td>100-900</td><td>400等同于 normal，700等同于 bold，注意这个数字后面不跟单位</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>实际开发中，我们更喜欢用<strong>数字表示粗细</strong></p><h3 id="2-4、font-style（字体样式-斜体）"><a href="#2-4、font-style（字体样式-斜体）" class="headerlink" title="2.4、font-style（字体样式-斜体）"></a>2.4、font-style（字体样式-斜体）</h3><ul><li><strong>CSS 使用</strong> <strong>font-style</strong> <strong>属性设置文字样式</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  font-style: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式</td></tr><tr><td>italic</td><td>浏览器会显示<strong>斜体</strong>的字体样式</td></tr></tbody></table><p>注意：<strong>平时我们很少给文字加斜体，反而要给斜体标签( em , i )改为不倾斜字体</strong></p><h3 id="2-5、字体属性复合写法（节约代码）"><a href="#2-5、字体属性复合写法（节约代码）" class="headerlink" title="2.5、字体属性复合写法（节约代码）"></a>2.5、字体属性复合写法（节约代码）</h3><p><strong>字体复合属性可以把以上文字样式综合来写，这样写更节约代码，例如：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        /* 想要div 文字变倾斜 加粗 字号设置为16像素 并且是微软雅黑 */   </span><br><span class="line">        div &#123;</span><br><span class="line">            font-style: italic;</span><br><span class="line">            font-weight: 700;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            font-family: &#x27;Microsoft yahe&#x27;;</span><br><span class="line">            /* 复合属性：简写的方式  节约代码*/</span><br><span class="line">            /* 顺序：font-style font-weight  font-size/line-height  font-family */</span><br><span class="line">            font: italic 700 16px &#x27;Microsoft yahe&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>顺序：文字样式 文字粗细 文字大小 文字字体</strong></li><li>**使用font属性时，必须按照上面语法格式中的顺序书写，**不能更换顺序**，并且各个属性间*<em>以空格*<em>隔开</em></em></li><li><strong>不需要设置的属性可以省略(取默认值)，但必须保留<code>font-size</code> 和<code>font-family</code>属性，否则 font 属性将不起作用</strong></li></ul><h3 id="2-6、字体属性总结"><a href="#2-6、字体属性总结" class="headerlink" title="2.6、字体属性总结"></a>2.6、字体属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic，不倾斜是 normal，实际开发最常用 normal</td><td></td><td></td><td></td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗是 700 或者 bold ，不加粗是 normal 或者 400，记住数字不加单位</td><td></td><td></td><td></td></tr><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是 px ，一定要跟上单位</td><td></td><td></td><td></td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td><td></td><td></td><td></td></tr><tr><td>font</td><td>字体连写</td><td>①字体连写是有顺序的，不能随意换位置 ② <strong>字体和字号必须同时出现</strong></td><td></td><td></td><td></td></tr></tbody></table><h2 id="3、CSS文本属性"><a href="#3、CSS文本属性" class="headerlink" title="3、CSS文本属性"></a>3、CSS文本属性</h2><h3 id="3-1、color（颜色）"><a href="#3-1、color（颜色）" class="headerlink" title="3.1、color（颜色）"></a>3.1、color（颜色）</h3><ul><li><strong>color</strong> <strong>属性用于定义文本的颜色</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，pink等</td></tr><tr><td>十六进制</td><td>#FF0000, #FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb（255，0，0） 或rgb(100%，0%，0%)</td></tr></tbody></table><p><strong>实际开发中最常用的是十六进制。</strong></p><h3 id="3-2、text-align（水平对齐方式）"><a href="#3-2、text-align（水平对齐方式）" class="headerlink" title="3.2、text-align（水平对齐方式）"></a>3.2、text-align（水平对齐方式）</h3><ul><li><strong>text-align 属性用于设置文本内容的水平对齐方式</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="3-3、text-decoration（装饰文本：下划线、删除线等等）"><a href="#3-3、text-decoration（装饰文本：下划线、删除线等等）" class="headerlink" title="3.3、text-decoration（装饰文本：下划线、删除线等等）"></a>3.3、text-decoration（装饰文本：下划线、删除线等等）</h3><ul><li><strong>text-decoration</strong> <strong>属性用于装饰文本，可以给文本添加下划线，删除线，上划线等</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    text-decoration: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线(最常用)</td></tr><tr><td>underline</td><td>下划线，链接自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线(几乎不用)</td></tr><tr><td>line-through</td><td>删除线 (不常用)</td></tr></tbody></table><p>重点记住如何添加下划线，如何删除下划线，其余了解即可。</p><h3 id="3-4、text-indent（段落缩进）"><a href="#3-4、text-indent（段落缩进）" class="headerlink" title="3.4、text-indent（段落缩进）"></a>3.4、text-indent（段落缩进）</h3><ul><li><strong>text-indent</strong> <strong>属性用于指定文本的第一行缩进，通常是将****段落的首行缩进</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    text-indent: 10px;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">   text-indent: 2em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过设置该水属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值</li><li>em是一个相对单位，就是当前元素(font-size)<strong>1个文字的大小</strong></li><li>如果当前元素没有设置大小，则会按照父元素的一个文字大小</li></ul><h3 id="3-5、line-height（行高）"><a href="#3-5、line-height（行高）" class="headerlink" title="3.5、line-height（行高）"></a>3.5、line-height（行高）</h3><ul><li><strong>line-height</strong> <strong>属性用于设置行间的距离(行高)，可以控制文字行与行之间的距离</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">   line-height: 26px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://postimg.cc/zVBNvd8G"><img src="https://i.postimg.cc/65VpHSPn/2.png" alt="2.png" style="zoom:200%;"></a></p><p>行间距包括<strong>上间距、文本高度、下间距</strong></p><h3 id="3-6、文本属性总结"><a href="#3-6、文本属性总结" class="headerlink" title="3.6、文本属性总结"></a><strong>3.6、文本属性总结</strong></h3><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th><th align="left"></th><th></th><th></th></tr></thead><tbody><tr><td align="left">color</td><td align="left">文本颜色</td><td align="left">通常用十六进制，而且是简写形式 #fff</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">text-align</td><td align="left">文本对齐</td><td align="left">可以设定文字水平的对齐方式</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">text-indent</td><td align="left">文本缩进</td><td align="left">段落首行缩进</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">text-decoration</td><td align="left">文本修饰</td><td align="left">记住添加下划线 underline 取消下划线 none</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">line-height</td><td align="left">行高</td><td align="left">控制行与行之间的距离</td><td align="left"></td><td></td><td></td></tr></tbody></table><h2 id="4、CSS复合选择器"><a href="#4、CSS复合选择器" class="headerlink" title="4、CSS复合选择器"></a>4、CSS复合选择器</h2><p>复合选择器：是由两个或多个基础选择器，通过不同的方式组合而成的</p><p>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器</p><h3 id="4-1、后代选择器"><a href="#4-1、后代选择器" class="headerlink" title="4.1、后代选择器"></a><strong>4.1、后代选择器</strong></h3><ul><li>后代选择器又称为<strong>包含选择器，可以选择父元素里面的子元素</strong></li><li>其<strong>写法</strong>就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就称为外层标签的后代</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素1 元素2 &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示**选择元素1里面的所有元素2(后代元素)**，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*选择ul 里面的所有 li 标签元素*/</span><br><span class="line">ul li &#123;    </span><br><span class="line">    样式声明   </span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是<strong>元素2</strong></li></ul><h3 id="4-2、子选择器"><a href="#4-2、子选择器" class="headerlink" title="4.2、子选择器"></a><strong>4.2、子选择器</strong></h3><ul><li><strong>子元素选择器</strong>只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素1 &gt; 元素2&#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1 里面的所有直接后代(子元素)元素2</strong>，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*选择div里面所有最近一级 P 标签元素*/ </span><br><span class="line">div &gt; p&#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用<strong>大于号</strong>隔开</li><li>元素1 是父级，元素2 是子级，<strong>最终选择的是元素2</strong></li><li>元素2必须是<strong>亲儿子</strong>，其孙子、重孙之类都不归他管</li></ul><h3 id="4-3、并集选择器"><a href="#4-3、并集选择器" class="headerlink" title="4.3、并集选择器"></a><strong>4.3、并集选择器</strong></h3><p><strong>并集选择器可以选择多组标签，同时为它们定义相同的样式。</strong></p><ul><li>并集选择器是各选择器通过<strong>英文逗号</strong>连接而成</li><li>任何形式的选择器都可以作为并集选择器的一部分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素1,元素2 &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1和元素2</strong>，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*选择  ul  和  div 标签元素 */</span><br><span class="line">ul,div &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用<strong>逗号隔开</strong></li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><h3 id="4-4、伪类选择器"><a href="#4-4、伪类选择器" class="headerlink" title="4.4、伪类选择器"></a><strong>4.4、伪类选择器</strong></h3><ul><li><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素</li><li>伪类选择器书写最大的特点是<strong>用冒号(😃</strong>表示，比如 <code>:hover</code>、<code>:first-child</code></li><li>伪类选择器很多，比如有链接伪类、结构伪类，这里先记录常用的链接伪类选择器</li></ul><h4 id="4-4-1、链接伪类选择器"><a href="#4-4-1、链接伪类选择器" class="headerlink" title="4.4.1、链接伪类选择器"></a>4.4.1、链接伪类选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* a是标签选择器 */</span><br><span class="line">a &#123;</span><br><span class="line">    color:gray;</span><br><span class="line">&#125;</span><br><span class="line">/* :hover 是链接伪类选择器，鼠标经过 */</span><br><span class="line">a :hover &#123;</span><br><span class="line">    /*鼠标经过的时候，由原来的灰色  变成了红色*/</span><br><span class="line">   color:red; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2、-focus伪类选择器"><a href="#4-4-2、-focus伪类选择器" class="headerlink" title="4.4.2、 :focus伪类选择器"></a>4.4.2、 :focus伪类选择器</h4><ul><li><code>:focus</code>伪类选择器用于<strong>选取获得焦点的表单元素</strong></li><li>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对表单元素来说</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input : focus &#123;</span><br><span class="line">    background-color:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5、复合选择器总结"><a href="#4-5、复合选择器总结" class="headerlink" title="4.5、复合选择器总结"></a><strong>4.5、复合选择器总结</strong></h3><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th><th></th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> <code>.nav a</code></td><td></td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>大于</strong> <code>.nav&gt;p</code></td><td></td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集团声明</td><td>较多</td><td>符号是<strong>逗号</strong> <code>.nav,.header</code></td><td></td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住<code>a&#123;&#125;</code>和<code>a:hover</code> ，实际开发的写法</td><td></td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td><code>input:focus</code> 记住这个写法</td><td></td></tr></tbody></table><h2 id="5、CSS元素显示模式"><a href="#5、CSS元素显示模式" class="headerlink" title="5、CSS元素显示模式"></a>5、CSS元素显示模式</h2><h3 id="5-1、块元素"><a href="#5-1、块元素" class="headerlink" title="5.1、块元素"></a><strong>5.1、块元素</strong></h3><p>1.常见的块元素有**==h1-h6、p、div、ul、ol、li==<strong>等，其中</strong>==div==** 标签是最典型的块元素。</p><p>2.块级元素的特点：</p><p>   ①：比较霸道，自己独占一行</p><p>   ②：<strong>高度，宽度，外边距以及内边距</strong>都可以控制</p><p>   ③：宽度默认是容器（父级宽度）的100%</p><p>   ④：是一个容器及盒子，里面可以放行内或块级元素</p><p>3.注意：</p><p>   ①：文字类的元素内不能使用块级元素</p><p>   ②：**==p==<strong>标签主要用于存放文字，因此</strong></p><p><strong>里面不能放块级元素，特别是不能放</strong><div>**</div></p><p>   ③：同理，**==h1-h6==**等都是文字类块级标签，里面也不能存放其他块级元素。</p><h3 id="5-2、行内元素"><a href="#5-2、行内元素" class="headerlink" title="5.2、行内元素"></a><strong>5.2、行内元素</strong></h3><ol><li><strong>常见的行内元素有</strong><code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</li><li>其中`<span>标签是最典型的行内元素<strong>。有的地方也将行内元素称为</strong>内联元素。</span></li><li>行内元素的特点**：   **</li></ol><p>​    ①：相邻行内元素在一行上，一行可以显示多个   </p><p>​    ②：高，宽直接设置是无效的   </p><p>​    ③：默认宽度就是它本身内容的宽度   </p><p>​    ④：行内元素只能容纳文本或其他行内元素  </p><p><strong>注意：</strong></p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>**&lt;a&gt;**</code>里面可以放块级元素，但是给<code>**&lt;a&gt;**</code>转换一下块级模式最安全</li></ul><h3 id="5-3、行内块元素"><a href="#5-3、行内块元素" class="headerlink" title="5.3、行内块元素"></a><strong>5.3、行内块元素</strong></h3><p><strong>1.在行内元素中有几个特殊的标签 ——</strong> <strong>img /、nput /、td，</strong>它们同时具有块元素和行内元素的特点</p><p><strong>2.<strong>有些资料称它们为</strong>行内块</strong>元素**</p><p>3.<strong>特点</strong>：</p><p>   ①：和相邻行内元素在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)  </p><p>   ②：默认宽度就是它本身内容的宽度(行内元素特点)  </p><p>   ③：高度，行高，外边距以及内边距都可以控制(块级元素特点)</p><h3 id="5-4、元素显示模式总结"><a href="#5-4、元素显示模式总结" class="headerlink" title="5.4、元素显示模式总结"></a><strong>5.4、元素显示模式总结</strong></h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th><th></th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td><td></td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td><td></td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td><td></td></tr></tbody></table><h3 id="5-5、元素显示模式转换"><a href="#5-5、元素显示模式转换" class="headerlink" title="5.5、元素显示模式转换"></a><strong>5.5、元素显示模式转换</strong></h3><ul><li><strong>转换为块元素： <code>display:block</code></strong></li><li><strong>转换为行内元素： <code>display:inline</code></strong></li><li><strong>转换为行内块元素: <code>display:inline-block</code></strong></li></ul><h3 id="5-6、👉小技巧"><a href="#5-6、👉小技巧" class="headerlink" title="5.6、👉小技巧"></a><strong>5.6、👉小技巧</strong></h3><p><strong>CSS没有给我们提供文字垂直居中的代码，这里我们可以用一个小技巧来实现单行文字垂直居中</strong></p><p><strong>解决方案：</strong></p><ul><li><strong>让文字的行高等于盒子的高度，就可以让文字在当前盒子内垂直居中。</strong></li></ul><p><a href="https://postimg.cc/G9M0WkGw"><img src="https://i.postimg.cc/m24bFjrD/3.png" alt="3.png"></a></p><p>简单理解：</p><ul><li>行高的上空隙和下空隙把文字挤到中间了</li><li>如果是行高小于盒子高度，文字会偏上，如果行高大于盒子高度，则文字偏下</li></ul><h2 id="6、CSS背景"><a href="#6、CSS背景" class="headerlink" title="6、CSS背景"></a>6、CSS背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。</p><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p><h3 id="6-1、background-color"><a href="#6-1、background-color" class="headerlink" title="6.1、background-color"></a><strong>6.1、background-color</strong></h3><p><strong>background-color 属性定义了元素的背景颜色</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: transparent;</span><br></pre></td></tr></table></figure><ul><li>一般情况下默认颜色是<strong>transparent（透明）</strong>，我们也可以手动指定背景颜色为透明色</li></ul><h3 id="6-2、background-image"><a href="#6-2、background-image" class="headerlink" title="6.2、background-image"></a>6.2、background-image</h3><ul><li>background-image <strong>属性描述了元素的背景图像</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image : none | url(url)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认）</td></tr><tr><td>url</td><td>使用绝对或相地址指定的背景图像</td></tr></tbody></table><p>注意：<strong>背景图片后面的地址，千万不要忘记加URL，同时里面的路径不要加引号</strong>。</p><h3 id="6-3、background-repeat"><a href="#6-3、background-repeat" class="headerlink" title="6.3、background-repeat"></a><strong>6.3、background-repeat</strong></h3><ul><li><strong>background-repeat 属性定义背景图像的平铺</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat: repeat| no-repeat| repeat-x| repeat-y</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table><h3 id="6-4、background-position"><a href="#6-4、background-position" class="headerlink" title="6.4、background-position"></a><strong>6.4、background-position</strong></h3><p><strong>background-position 属性可以改变图片在背景中的位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-position: x y;</span><br></pre></td></tr></table></figure><ul><li><strong>参数：X坐标 Y坐标</strong></li><li><strong>可以使用 方位名词 或者 精确单位</strong></li></ul><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数|由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top| center | bottom |left |center |right <strong>方位名词</strong></td></tr></tbody></table><p><strong>1.参数是方位名词</strong></p><p> ①：如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code></p><p> ②：如果只指定了一个方位名词，另一个值省略，则第二个值默认<strong>居中对齐</strong></p><p><strong>2.参数是精准单位</strong></p><p> ①：如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</p><p> ②：如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</p><p><strong>3.参数是混合单位</strong></p><p> ①：如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</p><h3 id="6-5、background-attachment"><a href="#6-5、background-attachment" class="headerlink" title="6.5、background-attachment"></a><strong>6.5、background-attachment</strong></h3><ul><li><strong>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="6-6、背景复合写法"><a href="#6-6、背景复合写法" class="headerlink" title="6.6、背景复合写法"></a><strong>6.6、背景复合写法</strong></h3><p><strong><code>background</code> ： 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background : transparent url(image.jpg) repeat-y fixed top;</span><br></pre></td></tr></table></figure><p><strong>这是实际开发中，我们更提倡的写法。</strong></p><h3 id="6-7、背景色半透明"><a href="#6-7、背景色半透明" class="headerlink" title="6.7、背景色半透明"></a><strong>6.7、背景色半透明</strong></h3><p><strong>CSS3为我们提供了背景颜色半透明的效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background : rgba(0,0,0,0.3);</span><br></pre></td></tr></table></figure><ol><li><strong>最后一个参数是<code>alpha</code> 透明度 ，取值范围在0~1之间</strong></li><li><strong>我们习惯把0.3的 0省略掉，写为<code>background(0,0,0,.3)</code>;</strong></li><li><strong>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</strong></li></ol><h3 id="6-8、背景总结"><a href="#6-8、背景总结" class="headerlink" title="6.8、背景总结"></a><strong>6.8、背景总结</strong></h3><table><thead><tr><th>属性</th><th>作用</th><th>值</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td><td></td><td></td><td></td></tr><tr><td>background-image</td><td>背景图片</td><td><strong>url(图片路径)</strong></td><td></td><td></td><td></td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/ no-repeat /repeat-x/repeat-y</td><td></td><td></td><td></td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x 和y坐标</td><td></td><td></td><td></td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动) /fixed(背景固定)</td><td></td><td></td><td></td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td><td></td><td></td><td></td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background : rgba(0,0,0,0.3);<strong>后面必须是四个值</strong></td><td></td><td></td><td></td></tr></tbody></table><p><strong>背景图片:实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置.</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“我的第一篇Hexo博客”</title>
      <link href="/2021/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E2%80%9CHexo%E2%80%9D/"/>
      <url>/2021/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E2%80%9CHexo%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>JavaScript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。即使是经验丰富的JavaScript开发者，如果没有认真学习的话，也无法真正理解它们，这就是JavaScript的矛盾之处。由于JavaScript不必理解就可以使用，因此通常来说很难真正理解语言本身，这就是我们面临的挑战。不满足于只是让代码正常工作，而是想要弄清楚为什么，勇于挑战这条崎岖颠簸的少有人走的路，拥抱整个JavaScript。</p><span id="more"></span><p>前端的内容分为基础和实践两块:<br>基础部分包括了HTML（语言、元素）、CSS（语言、功能）、JavaScript（运行时、文法、语义）、浏览器和API（实现原理、API），<br>实践部分包含了性能、工具链、持续集成、搭建系统、架构与基础库。<br>1.HTML和CSS基础<br>2.H5和CSS3（其实没啥东西，和第一部分一起学）<br>3.JS基础（BOM和DOM），JS的ES5以及ES6版本规范，新语法（重点Promise）<br>node.js<br>4.原生 ajax<br>5.ES module 和 CommonJS（这两个就等于学了Node部分），顺便Node再看下fs模块，另外模块也不怎么用<br>5.Vue2.0<br>6.TypeScript<br>7.Vue3.0<br>8.uni-app<br>9.react</p><p>【10】JavaScript高级（含ES6）<br>【11】前后端交互 Node+Gulp<br>【12】前后端交互 MongoDB+Express<br>【13】项目实战：博客项目<br>【14】前后端交互 Ajax<br>【15】前后端交互Git和GitHub<br>【16】项目实战：阿里百秀项目<br>【17】Vue基础<br>【18】前端工程化：ES6模块化和webpack打包<br>【19】前端工程化：Vue-cli3和Element-UI<br>【20】Vue实战项目：电商管理系统（Element-UI）<br>【21】Vue.js项目实战开发 Vuex</p><p>html-css-js-vue-node-nginx-服务器-小程序<br>前端架构主要分为四层：路由，状态机，公共方法，http 请求。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
