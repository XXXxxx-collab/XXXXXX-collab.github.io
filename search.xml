<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>“Vue全家桶(六)之VueX状态管理”</title>
      <link href="/2022/04/10/VueX%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
      <url>/2022/04/10/VueX%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍<strong>目录总览：</strong>（VueX概念、单界面的状态管理、多界面的状态管理、<strong>VueX核心概念</strong>）</p><span id="more"></span><p><strong>🔥Vue全家桶🔥</strong></p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="VueX状态管理"><a href="#VueX状态管理" class="headerlink" title="VueX状态管理"></a>VueX状态管理</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/5f2d4be8c70e9283ff26d5361771aff4.png"></p><h2 id="一、VueX概念"><a href="#一、VueX概念" class="headerlink" title="一、VueX概念"></a>一、VueX概念</h2><p><strong>1. VueX的概念</strong></p><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><p>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><ul><li><strong>Vuex 的状态存储是响应式的</strong>。当 Vue 组件从 store 中读取状态的时候，若 <strong>store 中的状态发生变化</strong>，那么<strong>相应的组件</strong>也会相应地得到<strong>高效更新</strong>。</li><li><strong>VueX里面所有数据都可以全局使用。</strong></li></ul><p><strong>2. 状态管理的概念</strong></p><p>可以简单的将其看成把需要多个组件<strong>共享的变量全部存储在一个对象</strong>里面。</p><p>将这个对象放在顶层的Vue实例中，让其他组件可以使用。</p><h2 id="二、单界面的状态管理"><a href="#二、单界面的状态管理" class="headerlink" title="二、单界面的状态管理"></a>二、单界面的状态管理</h2><p><strong>在单文件组件中进行状态管理：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e052d468f510e1f1a880362e400ae5d3.png"></p><p>图片中的三种东西如下：</p><ul><li>State：状态</li><li>View：视图层，可以针对 State 的变化，显示不同的信息</li><li>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的变化</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单文件组件内部代码</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前计数:&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter+=1&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter-=1&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>上述案例中，需要管理的状态：<strong>个数counter</strong>。</p><ol><li><p>counter需要某种方式被记录下来，也就是我们的State。</p></li><li><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p></li><li><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），需要去更新状态，也就是我们的Actions</p></li></ol><h2 id="三、多界面状态管理"><a href="#三、多界面状态管理" class="headerlink" title="三、多界面状态管理"></a>三、多界面状态管理</h2><p><strong>3.1 单个文件的组件状态管理清晰明了，那多个单文件组件的状态管理呢？（出现的问题）</strong></p><ul><li>多个组件都依赖同一个状态(一个状态改了，多个组件界面需要进行更新)</li><li>不同界面的 组件Actions 都想修改同一个状态(Home.vue 需要修改，Profile.vue 也需要修改这个状态)</li></ul><p><strong>3.2 VueX背后的基本思想：（解决方法）</strong></p><p><strong>1. 将多个组件共享的状态抽取出来，交给我们的大管家VueX，统一进行管理。</strong></p><p><strong>2. 每个组件视图，按照VueX的规则定，进行访问和修改等操作。</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f2af3a2d76e4d4672a06490d2f88a871.png"></p><h2 id="四、VueX-基本用法"><a href="#四、VueX-基本用法" class="headerlink" title="四、VueX 基本用法"></a>四、VueX 基本用法</h2><h4 id="1-安装VueX"><a href="#1-安装VueX" class="headerlink" title="1. 安装VueX"></a><strong>1. 安装VueX</strong></h4><ul><li><strong>方式1</strong>：通过命令行npm进行安装。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install vuex --save<br></code></pre></td></tr></table></figure><ul><li><strong>方式2</strong>：Vue-cli3脚手架生成 Vue 项目基础架构时候，进行配置选择。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/09a9074248dc6e7d2b9eea4805f3e9bb.png"></p><h4 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h4><p>我们创建一个文件夹 src/store，并且在其中创建一个 store.js 文件，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 1.安装插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><span class="hljs-comment">// 2.创建对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;<br>        <span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>)&#123;<br>            state.<span class="hljs-property">count</span>++<br>        &#125;,<br>        <span class="hljs-title function_">decrement</span>(<span class="hljs-params">state</span>)&#123;<br>            state.<span class="hljs-property">count</span>--<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">actions</span>: &#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">getters</span>: &#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">modules</span>: &#123;<br>        <br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// 导出store对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>其次，我们让所有的Vue组件都可以使用这个store对象</p><ul><li>来到 src/main.js文件，导入store对象，并且挂载到new Vue中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-comment">// 1.导入store对象</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-comment">// 2.挂载 store</span><br>    store,<br>    <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>这样，在其他Vue组件中，我们就可以通过 <code>this.$store</code>的方式，获取到这个store对象了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//app.vue根组件</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="hljs-comment">//行为层</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">count</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">count</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">increment</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">decrement</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;decrement&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>使用步骤小结：</strong></p><ol><li>提取出一个公共的 store 对象，用于保存在多个组件中共享的状态</li><li>将 store 对象放置在 new Vue 对象中，这样可以保证在所有的组件中都可以使用到</li><li>在其他组件中使用 store 对象中保存的状态即可<ul><li>通过 this.$store.state 属性的方式来访问状态</li><li>通过 this.$store.commit(‘mutation中方法’) 来修改状态</li></ul></li><li>我们通过提交 mutation 的方式，而非直接改变 store.state.count</li><li>这是因为 Vuex 可以更明确的追踪状态的变化，所以不要直接改变 store.state.count 的值</li></ol><h2 id="五、VueX核心概念🔥"><a href="#五、VueX核心概念🔥" class="headerlink" title="五、VueX核心概念🔥"></a>五、VueX核心概念🔥</h2><p>🔥🔥🔥<strong>强调：VueX的store.js定义方式固定，获取方式有两种：</strong></p><ul><li><strong>$store 当作全局对象直接进行访问</strong></li><li><strong>import 作为模块导入为组件内部属性或方法</strong></li></ul><h4 id="1-State-单-状态树（共享变量）"><a href="#1-State-单-状态树（共享变量）" class="headerlink" title="1. State 单-状态树（共享变量）"></a>1. State 单-状态树（共享变量）</h4><p>State 提供唯一的公共数据源，所有共享的数据都要统一放到 Store 的 State 中进行存储。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建store数据源，提供唯一公共数据</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br> <span class="hljs-attr">state</span>: &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件获取 State 中数据的<strong>第一种方式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.全局数据名称<br></code></pre></td></tr></table></figure><p>组件获取 State 中数据的<strong>第二种方式</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 从 vuex 中按需导入 mapState 函数</span><br><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>   通过刚才导入的 mapState 函数，将当前组件需要的全局数据，映射为当前组件的 computed 计算属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2. 将全局数据，映射为当前组件的计算属性</span><br><span class="hljs-attr">computed</span>: &#123;<br> ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-Mutation状态更新（函数修改变量）"><a href="#2-Mutation状态更新（函数修改变量）" class="headerlink" title="2. Mutation状态更新（函数修改变量）"></a>2. Mutation状态更新（函数修改变量）</h4><ul><li>Mutation 用于变更 Store中 的数据。</li></ul><p>① 只能通过 mutation 变更 Store 数据，不可以直接操作 Store 中的数据。</p><p>② 通过这种方式虽然操作起来稍微繁琐一些，但是可以集中监控所有数据的变化。</p><h5 id="2-1-Mutation用法🔥"><a href="#2-1-Mutation用法🔥" class="headerlink" title="2.1 Mutation用法🔥"></a>2.1 Mutation用法🔥</h5><p><strong>调用方式一：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9429c97b7968d9c4e2706ea6b96261e8.png"></p><p><strong>调用方式二：</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/23f6a400a172bc1990cba67a73f4e1d9.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1b1769991b9b1a1f167517db0acc1b5a.png"></p><h5 id="2-2-Mutation传参🔥"><a href="#2-2-Mutation传参🔥" class="headerlink" title="2.2 Mutation传参🔥"></a><strong>2.2 Mutation传参</strong>🔥</h5><p><strong>调用方式一：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/44ef6fb8aa3a1e52a6e36847766f6217.png"></p><p><strong>调用方式二：</strong></p><p><strong>1.store.js内定义函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><span class="hljs-comment">//store.js内定义函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">// 只有 mutations 中定义的函数，才有权利修改 state 中的数据</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">subN</span>(<span class="hljs-params">state, step</span>) &#123;<br>      state.<span class="hljs-property">count</span> -= step<br>    &#125;<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.在组件文件内导入函数 绑定函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//组件文件内导入函数 绑定函数</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>当前最新的count值为：&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    //引入的函数进行绑定</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;subN(3)&quot;</span>&gt;</span>-N<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//将指定的state变量，映射为当前组件的computed计算属性</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//将指定的 mutations 函数，映射为当前组件的 methods 函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;subN&#x27;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="3-Action异步任务（异步函数调用mutation）"><a href="#3-Action异步任务（异步函数调用mutation）" class="headerlink" title="3. Action异步任务（异步函数调用mutation）"></a>3. Action异步任务（异步函数调用mutation）</h4><ul><li>Action 用于处理异步任务。</li></ul><p>如果通过异步操作变更数据，<strong>必须通过 Action</strong>，而不能使用 Mutation，但是在 Action 中还是要通过触发Mutation 的调用方式间接变更数据。</p><h5 id="3-1-Action用法🔥"><a href="#3-1-Action用法🔥" class="headerlink" title="3.1 Action用法🔥"></a>3.1 Action用法🔥</h5><p><strong>调用方式一：</strong></p><ul><li><strong>actions 异步任务（不带参）</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/59be7fea1b1d653ba6e686d8eaf54859.png"></p><ul><li><strong>触发 actions 异步任务时携带参数：</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/4400e23235d3b9783c23d60373712c25.png"></p><h5 id="3-2-Action传参🔥"><a href="#3-2-Action传参🔥" class="headerlink" title="3.2 Action传参🔥"></a>3.2 Action传参🔥</h5><p><strong>调用方式二：</strong></p><ul><li><strong>actions 异步任务（不带参）</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//store.js内定义函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br> <span class="hljs-comment">// 只有 mutations 中定义的函数，才有权利修改 state 中的数据</span><br> <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">sub</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>--<br>    &#125;<br> <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">subAsync</span>(<span class="hljs-params">context</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;sub&#x27;</span>)<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;<br><span class="hljs-comment">//组件文件内导入函数 绑定函数</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>当前最新的count值为：&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    //引入的函数进行绑定</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;subAsync&quot;</span>&gt;</span>-1 Async<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//导入store.js里面的acion、mutation函数，acion内部调用mutation </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; mapState, mapMutations, mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//将指定的state变量，映射为当前组件的computed计算属性</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&#x27;count&#x27;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//将指定的 action 函数，映射为当前组件的 methods 函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;sub&#x27;</span>]),</span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;subAsync&#x27;</span>])</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>触发 actions 异步任务时携带参数：</strong></li></ul><p><strong>1.store.js内定义函数</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6b6ae8671e8673f42fcdea14a6f7e098.png"></p><p><strong>2.在组件文件内导入函数 绑定函数</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/da5059c549405e8b0dd9609d368fe4be.png"></p><h4 id="4-Getters基本使用（变量加工）"><a href="#4-Getters基本使用（变量加工）" class="headerlink" title="4. Getters基本使用（变量加工）"></a>4. Getters基本使用（变量加工）</h4><ul><li>Getter 用于对 Store 中的数据进行加工处理形成新的数据。</li></ul><p>① Getter 可以对 Store 中已有的数据加工处理之后形成新的数据，类似 Vue 的计算属性。</p><p>② Store 中数据发生变化，Getter 的数据也会跟着变化。</p><p><strong>1.store.js内定义函数</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/738f9a4338fa2b18bbbb0de322b85998.png"></p><p><strong>2.调用VueX</strong></p><p><strong>调用方式1：当作全局对象直接进行调用</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/24ab1b98505214e45b61acf57d8cb703.png"></p><p><strong>调用方式2：在组件文件内导入模块  绑定属性和函数</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/07dd1bfaa3c22670b61902ad6f021f6b.png"></p><h4 id="5-Module模块化"><a href="#5-Module模块化" class="headerlink" title="5. Module模块化"></a>5. Module模块化</h4><p>Module 是模块的意思，为什么在 Vuex 中我们要使用模块呢？</p><ul><li>Vue 使用单一状态树，那么也意味着很多状态都会交给 Vuex 来管理</li><li>当应用变得非常复杂时， store 对象就有可能变得相当臃肿</li><li>为了解决这个问题，Vuex 允许我们将 store 分割成某块，而每个模块拥有自己的 state、mutations、action、getters等</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ModuleA</span> = &#123;<br>    <span class="hljs-attr">state</span>: &#123;&#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>    <span class="hljs-attr">actions</span>: &#123;&#125;,<br>    <span class="hljs-attr">getters</span>: &#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ModuleB</span> = &#123;<br>    <span class="hljs-attr">state</span>: &#123;&#125;,<br>    <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>    <span class="hljs-attr">actions</span>: &#123;&#125;,<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">modules</span>: &#123;<br>        <span class="hljs-attr">a</span>: moduleA,<br>        <span class="hljs-attr">b</span>: moduleB<br>    &#125;<br>&#125;)<br>store.<span class="hljs-property">state</span>.<span class="hljs-property">a</span><span class="hljs-comment">// -&gt; moduleA 的状态</span><br>store.<span class="hljs-property">state</span>.<span class="hljs-property">b</span><span class="hljs-comment">// -&gt; moduleB 的状态</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> VueX </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Vue全家桶(五)之Vue-router路由”</title>
      <link href="/2022/04/08/Vue-router/"/>
      <url>/2022/04/08/Vue-router/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍<strong>目录总览：</strong>（基本概念与原理、<strong>vue-router的基本使用</strong>、<strong>一个完整路由的结构</strong>、<strong>vue-router的常见用法</strong>）</p><span id="more"></span><p><strong>🔥Vue全家桶🔥</strong></p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="Vue-Router-路由"><a href="#Vue-Router-路由" class="headerlink" title="Vue-Router 路由"></a>Vue-Router 路由</h1><p><img src="https://img-blog.csdnimg.cn/73c3c2a16aba447fb672fdc8c85024e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWFhYeHh45YWJ,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="路由的基本概念与原理"><a href="#路由的基本概念与原理" class="headerlink" title="路由的基本概念与原理"></a>路由的基本概念与原理</h3><ul><li>路由是一个比较广义和抽象的概念，路由的<strong>本质就是对应关系</strong>。</li></ul><p>在开发中，路由分为： <strong>后端路由</strong>  <strong>前端路由</strong></p><p><strong>1. 后端路由：</strong></p><p>概念：根据不同的用户 URL 请求，返回不同的内容</p><p>本质：URL 请求地址与服务器资源之间的对应关系</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7cbf090ba69d6038758389ec1a7f370.png"></p><p><strong>2. SPA 与前端路由的关系</strong></p><p>SPA （单页面应用程序）指的是一个 web 网站只有唯一的一个 HTML 页面，<strong>所有组件的展示与切换</strong>都在这唯一的一个页面内完成。此时，<strong>不同组件之间的切换</strong>需要通过<strong>前端路由</strong>来实现。</p><p><strong>特点：</strong></p><ul><li>整个网站只有一个页面</li><li>内容的变化通过Ajax局部更新实现</li><li>同时支持浏览器地址栏的前进和后退操作</li><li><strong>不同功能之间的切换，要依赖于前端路由来完成</strong>！</li></ul><p><strong>3. 前端路由</strong></p><p>概念：<strong>Hash 地址</strong>与<strong>组件</strong>之间的<strong>对应关系</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/626a9e6b0f6756250a1712d35de7ac61.png"></p><p><strong>5. 前端路由的工作方式</strong></p><p>① 用户<strong>点击了</strong>页面上的<strong>路由链接</strong></p><p>② 导致了 <strong>URL 地址栏</strong>中的 <strong>Hash 值</strong>发生了变化</p><p>③ <strong>前端路由监听了到 Hash 地址的变化</strong></p><p>④ 前端路由把当前 <strong>Hash 地址对应的组件</strong>渲染都浏览器中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/157568b65fbf0caeaa49556fa5d3f31e.png"></p><ul><li>结论：前端路由，指的是 <strong>Hash 地址</strong>与<strong>组件之间</strong>的<strong>对应关系！</strong></li></ul><p><strong>6. 认识vue-router</strong></p><ol><li><p>目前前端流行的三大<a href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">框架</a>，都有自己的路由实现：</p><ul><li><p>Angular的ngRouter</p></li><li><p>React的ReactRouter</p></li><li><p>Vue的vue-router</p></li></ul></li><li><p>vue-router是Vue.js官方的路由插件，它和vue.js是深度集成的，<strong>适合用于构建单页面应用（SPA）</strong>。</p></li><li><p>vue-router是基于路由和组件的</p><ul><li><p>路由用户设定访问路径的，将路径和组件映射起来。</p></li><li><p>在vue-router的单页面应用中，<strong>页面的路径的改变就是组件的切换</strong></p></li></ul></li></ol><h2 id="vue-router的基本使用"><a href="#vue-router的基本使用" class="headerlink" title="vue-router的基本使用"></a>vue-router的基本使用</h2><h3 id="1-安装router"><a href="#1-安装router" class="headerlink" title="1. 安装router"></a>1. 安装router</h3><p><strong>第一步：安装router（两种方式）</strong></p><ul><li><strong>方式1</strong>：Vue-cli3脚手架生成 Vue 项目基础架构时候，进行配置选择。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/18da8078a93fa86a8fdb5018b685bb88.png"></p><ul><li><strong>方式2</strong>：通过命令行npm进行安装。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install vue-router --save<br></code></pre></td></tr></table></figure><p><strong>第二步：在模块化工程中使用它（因为是一个插件，所以可以通过Vue.use()来安装路由功能）</strong></p><ul><li><p>1.导入路由对象，并且调用Vue.use(VueRouter)</p></li><li><p>2.创建路由router实例，并且传入路由映射配置</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/cabd8d3eb4e9cf21e0d0ef7e99d40d77.png"></p><ul><li>3.在Vue实例中挂载创建的路由实例</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/8d9ce5b5a6ffdfcfca599bd57f89905a.png"></p><h3 id="2-使用router"><a href="#2-使用router" class="headerlink" title="2. 使用router"></a>2. 使用router</h3><p><strong>一个完整的路由必须包含:路由链接和路由占位符、路由实例、路由规则链接的路由组件</strong></p><p>使用vue-router的步骤：</p><ul><li>第一步：<strong>创建路由组件</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/9e2cfcd39d847143aad349232a7ac385.png"></p><ul><li>第二步：<strong>配置路由映射：组件和路径映射关系</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/5d39d6b760d945f5cd4687ee8868a6b9.png"></li></ul><ul><li>第三步：使用路由：通过  <code>&lt;router-link&gt;路由链接</code>  和  <code>&lt;router-view&gt;路由占位符</code></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/2ded55d385b9a274f106fec9e323b458.png"></p><p><code>&lt;router-link&gt;路由链接</code>：该标签是一个vue-router中已经内置的组件，他会被渲染成一个<code>&lt;a&gt;</code>标签。<br><code>&lt;router-view&gt;路由占位符</code>：该标签会根据当前的路径，动态渲染出不同的组件。</p><p><strong>最终效果：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/ad1bd91c932651e37061f74f7210d896.gif"></p><h3 id="3-路由跳转方式"><a href="#3-路由跳转方式" class="headerlink" title="3. 路由跳转方式"></a>3. 路由跳转方式</h3><p>声明式导航&amp;编程式导航</p><h4 id="3-1-声明式导航"><a href="#3-1-声明式导航" class="headerlink" title="3.1 声明式导航"></a>3.1 声明式导航</h4><p>在浏览器中，声明式导航是指<strong>通过点击链接实现导航</strong>的方式，比如 a、router-link 标签。<strong>（最简单的方式）</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e1a48a121bb47c65ceff50aae7b9603b.png"></p><h4 id="3-2-编程式导航"><a href="#3-2-编程式导航" class="headerlink" title="3.2 编程式导航"></a>3.2 编程式导航</h4><p>在浏览器中，编程式导航指<strong>调用JavaScript的API实现导航</strong>的方式。</p><ul><li>借助 <strong>router 的实例方法</strong>，通过编写代码来实现。</li><li>编程式导航的使用是<strong>封装在方法里面</strong>，需要用到时调用方法就可以。</li></ul><table><thead><tr><th>编程式导航API</th><th>功能</th><th>特点1</th><th>特点2</th></tr></thead><tbody><tr><td><strong>router.push(location)</strong></td><td>导航到不同的位置</td><td>会向 history 栈添加一个新的记录</td><td>点击后退按钮时，回到之前的 URL。</td></tr><tr><td><strong>router.replace(location)</strong></td><td>导航到不同的位置</td><td>不会向history 添加新记录</td><td>替换掉当前的 history 记录。</td></tr><tr><td><strong>router.go(n)</strong></td><td>浏览器记录前进后退</td><td>参数为整数，正数-前进，负数-后退</td><td>类似window.history.go(n)</td></tr></tbody></table><p><strong>具体实例：</strong></p><h5 id="1-导航到不同的位置push"><a href="#1-导航到不同的位置push" class="headerlink" title="1.导航到不同的位置push"></a>1.导航到不同的位置push</h5><p>语法：<code>router.push</code></p><ul><li>想要导航到不同的 URL，可以使用<code>router.push</code>方法。 这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 字符串路径</span><br>router.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;/users/eduardo&#x27;</span>)<br><br><span class="hljs-comment">// 带有路径的对象</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/users/eduardo&#x27;</span> &#125;)<br><br><span class="hljs-comment">// 命名的路由，并加上参数，让路由建立 url</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-attr">params</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;eduardo&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 带查询参数，结果是 /register?plan=private</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-attr">query</span>: &#123; <span class="hljs-attr">plan</span>: <span class="hljs-string">&#x27;private&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 带 hash，结果是 /about#team</span><br>router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>, <span class="hljs-attr">hash</span>: <span class="hljs-string">&#x27;#team&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><h5 id="2-替换当前位置replace"><a href="#2-替换当前位置replace" class="headerlink" title="2.替换当前位置replace"></a>2.替换当前位置replace</h5><p>语法：<code>router.replace()</code></p><ul><li>它的作用类似于<code>router.push</code> ，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它<strong>取代了当前的条目。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br><span class="hljs-comment">// 相当于</span><br>router.<span class="hljs-title function_">replace</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><h5 id="3-横跨历史go"><a href="#3-横跨历史go" class="headerlink" title="3.横跨历史go"></a>3.横跨历史go</h5><p>语法：<code>router.go(n)</code></p><ul><li>该方法采用一个整数作为参数，表示<strong>在历史堆栈中前进或后退多少步</strong>，类似于 。<code>window.history.go(n)</code></li></ul><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 向前移动一条记录，与 router.forward() 相同</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>)<br>router.<span class="hljs-title function_">forward</span>(); <span class="hljs-comment">// 前进1</span><br><br><span class="hljs-comment">// 返回一条记录，与router.back() 相同</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>)<br>router.<span class="hljs-title function_">back</span>(); <span class="hljs-comment">// 后退1</span><br><br><span class="hljs-comment">// 前进 3 条记录</span><br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 如果没有那么多记录，静默失败</span><br>router.<span class="hljs-title function_">go</span>(-<span class="hljs-number">100</span>)<br>router.<span class="hljs-title function_">go</span>(<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><h3 id="4-路由的历史记录模式"><a href="#4-路由的历史记录模式" class="headerlink" title="4.路由的历史记录模式"></a>4.路由的历史记录模式</h3><h4 id="Hash-模式"><a href="#Hash-模式" class="headerlink" title="Hash 模式"></a>Hash 模式</h4><blockquote><p><a href="http://www.xxx.com/#/login">http://www.xxx.com/#/login</a></p></blockquote><ul><li>#后面 hash 值的变化，<strong>并不会导致浏览器向服务器发出请求</strong>，浏览器不发出请求，也就不会刷新页面。</li><li><strong>每次 hash 值的变化，还会触发 hashchange 这个事件</strong>，可以通过监听 hashchange 来实现更新页面部分内容的操作。</li><li><strong>hash发生变化的url都会被浏览器记录（历史访问栈）下来，从而你会发现浏览器的前进后退都可以用了</strong>。尽管浏览器没有请求服务器，但是页面状态和url一一关联起来。</li></ul><p>缺点：</p><ul><li>只能改变#后面的来实现路由跳转</li><li>在 SEO 中确实有不好的影响，可以使用HTML5解决</li></ul><h4 id="history模式（HTML-5）"><a href="#history模式（HTML-5）" class="headerlink" title="history模式（HTML 5）"></a>history模式（HTML 5）</h4><blockquote><p><a href="https://example.com/user/id">https://example.com/user/id</a></p></blockquote><ul><li><strong>依赖HTML5 History API 和服务器配置</strong></li><li><strong>原理都是跟 hash 实现相同的</strong></li><li><strong>考虑url规范，就要使用history模式</strong>，例如在app中需要将页面分享到第三方app，有的app里面url是不允许带有#号的，所以要将#号去除那么就要使用history模式。</li></ul><p>缺点：怕刷新,实实在在向服务器请求数据,速度慢,需要配置后端服务器。</p><p><strong>总结一下</strong></p><p>1.hash模式（vue-router默认模式URL后面带#）使用URL的hash值来作为路由，支持所有浏览器 </p><p>缺点：只能改变#后面的来实现路由跳转。不利于SEO搜索</p><p>2.history模式（通过mode: ‘history’来改变为history模式）HTML5 （BOM）History API 和服务器配置 </p><p>缺点：怕刷新,实实在在向服务器请求数据,速度慢,需要配置后端服务器。</p><h2 id="vue-router-的常见用法"><a href="#vue-router-的常见用法" class="headerlink" title="vue-router 的常见用法"></a>vue-router 的常见用法</h2><p><strong>一个完整的路由必须包含:路由链接和路由占位符、路由实例、路由规则链接的路由组件</strong></p><h3 id="1-路由重定向"><a href="#1-路由重定向" class="headerlink" title="1. 路由重定向"></a>1. 路由重定向</h3><ul><li>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。</li><li>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</li></ul><blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/10af4025b59b8e9740d497193a0d17a2.png"></p></blockquote><h3 id="2-嵌套路由"><a href="#2-嵌套路由" class="headerlink" title="2. 嵌套路由"></a>2. 嵌套路由</h3><p>通过路由实现<strong>组件的嵌套展示</strong>，叫做嵌套路由。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/77d961b00b18b90ebf56c9d5f83316af.png"></p><h4 id="2-1-声明子路由链接和子路由占位符"><a href="#2-1-声明子路由链接和子路由占位符" class="headerlink" title="2.1 声明子路由链接和子路由占位符"></a>2.1 声明子路由链接和子路由占位符</h4><p>在 <strong>About.vue</strong> 组件中，声明 tab1 和 tab2 的<strong>子路由链接</strong>以及<strong>子路由占位符</strong>。示例代码如下：</p><p> <img src="https://img-blog.csdnimg.cn/img_convert/c01785d67c456eaf06006e2559e3152b.png"></p><p><strong>2.2 通过</strong> <strong>children</strong> <strong>属性声明子路由规则</strong></p><p>在 src/router/index.js 路由模块中，导入需要的组件，并使用 <strong>children 属性</strong>声明子路由规则：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9e3d7d32d21433d66b6afa93ec1872bb.png"></p><h3 id="3-路由命名"><a href="#3-路由命名" class="headerlink" title="3. 路由命名"></a>3. 路由命名</h3><ul><li>为了更加方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//添加路由链接<br>//声明式导航<br>&lt;router-link :to=&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;&quot;&gt;User&lt;/router-link&gt;<br>//编程式导航<br>router.push(&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;)<br><br>//定义路由规则<br>const router = new VueRouter(&#123;<br> routes: [<br> &#123;<br> path: &#x27;/user/:id&#x27;,<br>  name: &#x27;user&#x27;,<br>  component: User<br> &#125;<br> ]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="4-动态路由与路由匹配"><a href="#4-动态路由与路由匹配" class="headerlink" title="4. 动态路由与路由匹配"></a>4. 动态路由与路由匹配</h3><ul><li><strong>一个完整的路由必须包含:路由链接和路由占位符、路由实例、路由规则链接的路由组件</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/8a9f8fd87ec31fa1b8185611e5a0b8ed.png"></p><h4 id="4-1-动态路由的概念"><a href="#4-1-动态路由的概念" class="headerlink" title="4.1 动态路由的概念"></a>4.1 <strong>动态路由的概念</strong></h4><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。 </p><p>在 vue-router 中使用英文的冒号（**:**）来定义路由的参数项。示例代码如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0d031ca18b50df7a888cf21cccc29b5f.png"></p><h4 id="4-2-route-params-参数对象"><a href="#4-2-route-params-参数对象" class="headerlink" title="4.2 $route.params 参数对象"></a><strong>4.2</strong> <strong>$route.params</strong> <strong>参数对象</strong></h4><p>在<strong>动态路由</strong>渲染出来的组件中，可以使用 <strong>this.$route.params</strong> 对象访问到<strong>动态匹配的参数值</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/18e80b3ac7a9e55ab0d9a95a1312b8c8.png"></p><h3 id="5-路由传递参数和接收参数"><a href="#5-路由传递参数和接收参数" class="headerlink" title="5. 路由传递参数和接收参数"></a>5. 路由传递参数和接收参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br>      &lt;!-- 路由占位符 --&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = &#123;<br>         <span class="hljs-comment">//组件的props属性接收参数</span><br><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;id&#x27;</span>],<br>         <span class="hljs-comment">//props: [&#x27;uname&#x27;, &#x27;age&#x27;],</span><br>         <span class="hljs-comment">//props: [&#x27;id&#x27;, &#x27;uname&#x27;, &#x27;age&#x27;],</span><br><span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;h1&gt;User 组件 -- 用户id为: &#123;&#123;id&#125;&#125;&lt;/h1&gt;&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 创建路由实例对象</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br><span class="hljs-comment">// 所有的路由规则</span><br><span class="hljs-attr">routes</span>: [<br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/user&#x27;</span>&#125;,<br>         <span class="hljs-comment">//props:true 开启传参</span><br>&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span>, <span class="hljs-attr">props</span>: <span class="hljs-literal">true</span> &#125;,<br>         <span class="hljs-comment">//传对象类型props: &#123; uname: &#x27;lisi&#x27;, age: 20 &#125;</span><br>         <span class="hljs-comment">//传函数类型props: route =&gt; (&#123; uname: &#x27;zs&#x27;, age: 20, id: route.params.id &#125;)</span><br>         <span class="hljs-comment">//params传值</span><br>         &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/search&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-title class_">SearchUser</span>,<span class="hljs-attr">props</span>: <span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> (&#123; <span class="hljs-attr">query</span>: route.<span class="hljs-property">query</span>.<span class="hljs-property">q</span> &#125;)&#125;<br>         <span class="hljs-comment">//query传值</span><br>]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="6-路由的懒加载"><a href="#6-路由的懒加载" class="headerlink" title="6. 路由的懒加载"></a>6. 路由的懒加载</h3><p><strong>路由懒加载的应用场景:</strong></p><ul><li><p>首先, 我们知道路由中通常会定义很多不同的页面.</p></li><li><p>这个页面最后被打包在哪里呢? 一般情况下, 是放在一个js文件中.</p></li><li><p>但是, 页面这么多放在一个js文件中, 必然会造成这个页面非常的大</p></li><li><p>如果我们一次性从服务器请求下来这个页面, 可能需要花费一定的时间, 甚至用户的电脑上还出现了短暂空白的情况.</p></li><li><p>如何避免这种情况呢? 使用路由懒加载就可以了</p></li></ul><p><strong>路由懒加载的作用:</strong></p><ul><li>p路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块.</li><li>只有在这个路由被访问到的时候, 才加载对应的组件</li></ul><h4 id="6-1-路由懒加载的用法"><a href="#6-1-路由懒加载的用法" class="headerlink" title="6.1 路由懒加载的用法"></a>6.1 路由懒加载的用法</h4><p>在ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/Home.vue&#x27;</span>)<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 配置路由相关的信息</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 原始路由加载</span><br><span class="hljs-comment">// import Home from &#x27;../components/Home&#x27;</span><br><span class="hljs-comment">// 路由懒加载(推荐)</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">imports</span>(<span class="hljs-string">&#x27;../components/Home&#x27;</span>)<br><br><span class="hljs-comment">// 1.通过Vue.use(插件), 安装插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<span class="hljs-comment">// 在 routes 数组中,声明路由的匹配规则</span><br>  &#123;<br>    <span class="hljs-comment">// path 表示要匹配的 hash 地址,component 表示要展示的路由组件  </span><br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-comment">// 配置路由和组件之间的应用关系</span><br>  routes,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  <span class="hljs-attr">linkActiveClass</span>: <span class="hljs-string">&#x27;active&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 3.将router对象传入到Vue实例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><h3 id="7-导航守卫-钩子函数"><a href="#7-导航守卫-钩子函数" class="headerlink" title="7. 导航守卫(钩子函数)"></a>7. 导航守卫(钩子函数)</h3><p>我们可以利用beforeEach来完成标题的修改</p><ul><li><p>首先，我们可以在钩子当中定义一些标题，可以利用mate来定义</p></li><li><p>其次，利用导航守卫修改我们的标题</p></li></ul><p>导航钩子的三个参数解析：</p><ul><li>to：即将要进入的目标的路由对象</li><li>from：当前导航即要离开的路由对象</li><li>next：调用该方法后，才能进入下一个钩子</li></ul><p>全局守卫示例:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5edec07cb7b821b91506236f6a7ae064.png"></p><ul><li>如果是后置钩子，也就是afterEach，不需要主动调用next(）函数。</li></ul><h4 id="7-1-next函数的三种调用方式"><a href="#7-1-next函数的三种调用方式" class="headerlink" title="7.1 next函数的三种调用方式"></a>7.1 next函数的三种调用方式</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/d1c8ff9c2b52f8ae941fb651db37efb5.png"></p><ul><li>当前用户拥有后台主页的访问权限，直接放行： <code>next()</code></li><li>当前用户没有后台主页的访问权限，强制其跳转到登录页面：<code>next(&#39;/login&#39;)</code></li><li>当前用户没有后台主页的访问权限，不允许跳转到后台主页：<code>next(false)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-router </tag>
            
            <tag> 路由 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Vue全家桶(四)之ES6模块化与webpack打包 ”</title>
      <link href="/2022/04/07/Vue%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8Ewebpack/"/>
      <url>/2022/04/07/Vue%E6%A8%A1%E5%9D%97%E5%8C%96%E4%B8%8Ewebpack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（模块化概述、浏览器模块化规范、服务器模块化规范、<strong>ES6模块化基本语法</strong>、模块化产生的问题、构建工具、webpack概述、<strong>webpack基本使用</strong>、<strong>loader加载器</strong>、<strong>加载器基本用法</strong>、打包发布、Source Mpa）</p><span id="more"></span><p><strong>🔥Vue全家桶🔥</strong></p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="ES6模块化与webpack打包"><a href="#ES6模块化与webpack打包" class="headerlink" title="ES6模块化与webpack打包"></a>ES6模块化与webpack打包</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/62b24002e134ec6e9ada962c59244461.png"></p><h2 id="模块化相关规范"><a href="#模块化相关规范" class="headerlink" title="模块化相关规范"></a><strong>模块化相关规范</strong></h2><h3 id="1-模块化概述"><a href="#1-模块化概述" class="headerlink" title="1. 模块化概述"></a><strong>1. 模块化概述</strong></h3><p><strong>传统开发模式的主要问题</strong></p><p>① 命名冲突</p><p>② 文件依赖</p><p><strong>通过模块化解决上述问题</strong></p><ul><li><strong>模块化</strong>就是把单独的一个功能封装到一个模块（文件）中，模块之间相互隔离，但是可以通过特定的接口公开内部成员，也可以依赖别的模块</li><li>模块化开发的好处：方便代码的重用，从而提升开发效率，并且方便后期的维护</li></ul><h3 id="2-浏览器端模块化规范"><a href="#2-浏览器端模块化规范" class="headerlink" title="2. 浏览器端模块化规范"></a><strong>2. 浏览器端模块化规范</strong></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9c6aaa68e2fc0ddc9595e911054a82be.png"></p><h3 id="3-服务器端模块化规范"><a href="#3-服务器端模块化规范" class="headerlink" title="3.  服务器端模块化规范"></a><strong>3.  服务器端模块化规范</strong></h3><p><strong>1. CommonJS</strong></p><p>① 模块分为 单文件模块 与 包     </p><p>② 模块成员导出：module.exports 和 exports</p><p>③ 模块成员导入：require(‘模块标识符’)</p><h3 id="4-大一统的模块化规范-–-ES6模块化"><a href="#4-大一统的模块化规范-–-ES6模块化" class="headerlink" title="4. 大一统的模块化规范 – ES6模块化"></a><strong>4. 大一统的模块化规范 – ES6模块化</strong></h3><ol><li>在 ES6 模块化规范诞生之前，Javascript 社区已经尝试并提出了 AMD、CMD、CommonJS 等模块化规范。</li><li>但是，这些社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化标准，例如：<ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li> CommonJS 适用于服务器端的 Javascript 模块化</li></ul></li><li>因此，ES6 语法规范中，在语言层面上定义了 ES6 模块化规范，是浏览器端与服务器端通用的模块化开发规范。</li></ol><p><strong>ES6模块化规范中定义</strong>：</p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入模块成员使用 import 关键字</li><li>暴露模块成员使用 export 关键字</li></ul><h4 id="4-1-Node-js-中通过-babel-体验-ES6-模块化"><a href="#4-1-Node-js-中通过-babel-体验-ES6-模块化" class="headerlink" title="4.1 Node.js 中通过 babel 体验 ES6 模块化"></a><strong>4.1 Node.js 中通过</strong> <strong>babel</strong> <strong>体验 ES6 模块化</strong></h4><p>① npm install –save-dev @babel/core @babel/cli @babel/preset-env @babel/node</p><p>② npm install –save @babel/polyfill</p><p>③ 项目跟目录创建文件 babel.config.js</p><p>④ babel.config.js 文件内容如右侧代码</p><p>⑤ 通过 npx babel-node index.js 执行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> presets = [<br> [<span class="hljs-string">&quot;@babel/env&quot;</span>, &#123;<br> <span class="hljs-attr">targets</span>: &#123;<br> <span class="hljs-attr">edge</span>: <span class="hljs-string">&quot;17&quot;</span>,<br> <span class="hljs-attr">firefox</span>: <span class="hljs-string">&quot;60&quot;</span>,<br> <span class="hljs-attr">chrome</span>: <span class="hljs-string">&quot;67&quot;</span>,<br> <span class="hljs-attr">safari</span>: <span class="hljs-string">&quot;11.1&quot;</span><br>&#125;<br>  &#125;]<br> ];<br> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; presets &#125;;<br></code></pre></td></tr></table></figure><h3 id="5-ES6-模块化的基本语法"><a href="#5-ES6-模块化的基本语法" class="headerlink" title="5.  ES6 模块化的基本语法"></a><strong>5.  ES6 模块化的基本语法</strong></h3><h4 id="5-1-默认导出-与-默认导入"><a href="#5-1-默认导出-与-默认导入" class="headerlink" title="5.1 默认导出 与 默认导入"></a><strong>5.1 默认导出 与 默认导入</strong></h4><ul><li>默认导出语法 export default 默认导出的成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当前文件模块为 m1.js</span><br><span class="hljs-comment">// 定义私有成员 a 和 c</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">let</span> c = <span class="hljs-number">20</span><br><span class="hljs-comment">// 外界访问不到变量 d ,因为它没有被暴露出去</span><br><span class="hljs-keyword">let</span> d = <span class="hljs-number">30</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">// 将本模块中的私有成员暴露出去，供其它模块使用</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br> a,<br> c,<br> show<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>默认导入语法 import 接收名称 from ‘模块标识符’</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入模块成员</span><br><span class="hljs-keyword">import</span> m1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./m1.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(m1)<br><span class="hljs-comment">// 打印输出的结果为：</span><br><span class="hljs-comment">// &#123; a: 10, c: 20, show: [Function: show] &#125;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：每个模块中，只允许使用唯一的一次 export default，否则会报错！</p><h4 id="5-2-按需导出-与-按需导入"><a href="#5-2-按需导出-与-按需导入" class="headerlink" title="5.2 按需导出 与 按需导入"></a><strong>5.2 按需导出 与 按需导入</strong></h4><ul><li>按需导出语法 export let s1 = 10</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 当前文件模块为 m1.js</span><br><span class="hljs-comment">// 向外按需导出变量 s1</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> s1 = <span class="hljs-string">&#x27;aaa&#x27;</span> <br><span class="hljs-comment">// 向外按需导出变量 s2</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> s2 = <span class="hljs-string">&#x27;ccc&#x27;</span><br><span class="hljs-comment">// 向外按需导出方法 say</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> say = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>按需导入语法 import { s1 } from ‘模块标识符’</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入模块成员</span><br><span class="hljs-keyword">import</span> &#123; s1, s2 <span class="hljs-keyword">as</span> ss2, say &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./m1.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s1) <span class="hljs-comment">// 打印输出 aaa</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ss2) <span class="hljs-comment">// 打印输出 ccc</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(say) <span class="hljs-comment">// 打印输出 [Function: say]</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：每个模块中，可以使用多次按需导出</p><h4 id="5-3-直接导入并执行模块代码"><a href="#5-3-直接导入并执行模块代码" class="headerlink" title="5.3 直接导入并执行模块代码"></a><strong>5.3 直接导入并执行模块代码</strong></h4><p>有时候，我们<strong>只想单纯执行某个模块中的代码，并不需要得到模块中向外暴露的成员</strong>，此时，可以直接导入并执行模块代码。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/558fe43cef3189f20b7b5ce5f2b2a59d.png"></p><h2 id="webpack打包（很重要）"><a href="#webpack打包（很重要）" class="headerlink" title="webpack打包（很重要）"></a>webpack打包（很重要）</h2><h3 id="问题的产生"><a href="#问题的产生" class="headerlink" title="问题的产生"></a>问题的产生</h3><p>浏览器环境中<strong>模块化开发的问题</strong>：</p><ul><li><strong>效率问题</strong>：模块化导致JS代码需要不断的被细分, 而精细的模块划分带来了更多的JS文件, 更多的JS文件带来了更多的网络请求, 降低了页面访问效率</li><li><strong>兼容性问题</strong>：<ol><li>浏览器不识别ES6（或者更高版本的JS语法）语法，或者CSS预编译处理器（如less，scss）</li><li>目前浏览器仅支持ES6的模块化, 那么意味着我们不能在代码中书写commonjs规范的代码, 更意味着我们在浏览器更加不能用commonjs导出的库和包, 我们知道, 学习了npm, yarn这类包管理工具以后, 我们不会再用很low的方式去引入库或者包, 都会用npm install的方式。</li></ol></li><li><strong>使用工具的兼容问题</strong>：在默认情况下, 浏览器跟npm的结合问题非常大, 要解决这个问题, 必须使用第三方工具。</li><li><strong>代码环境问题</strong>：浏览器端, 开发环境（development）和线上环境（production）的侧重点完全不同：<ul><li>开发环境<ol><li>模块划分越细越好</li><li>最好支持多种模块化标准</li><li>支持npm和其他包管理器下载的模块</li><li>能解决其他工程化的问题</li></ol></li><li>线上环境（代码上线后）<ol><li>文件数量越少越好</li><li>文件体积越小越好</li><li>代码内容越乱越好</li><li>所有浏览器都要兼容</li><li>执行效率越高越好</li></ol></li></ul></li></ul><h3 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h3><p><strong>什么是构建工具？</strong></p><ul><li><p>能够让开发者专心的书写开发环境的代码, 然后利用这个工具将开发时态编写的代码转化为运行时态的工具。</p></li><li><p>常见的构建工具：webpack、grunt、gulp、browserfly等等。</p></li><li><p>其中<strong>webpack是目前生态最繁荣构建工具。</strong></p></li><li><p>所有资源文件(js/json/css/img/less/…)都会被webpack作为<strong>模块处理</strong>。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/3d61f1726a5675927c98f6435a1809ac.png"></p><h3 id="一、webpack概述"><a href="#一、webpack概述" class="headerlink" title="一、webpack概述"></a>一、webpack<strong>概述</strong></h3><ul><li><strong>webpack</strong> 是一个流行的<strong>前端项目构建工具（打包工具）</strong>，可以解决当前 web 开发中所面临的困境。</li><li>webpack 提供了<strong>友好的模块化支持</strong>，以及<strong>代码压缩混淆</strong>、<strong>处理 js 兼容问题</strong>、<strong>性能优化</strong>等强大的功能，从而让程序员把工作的重心放到具体的功能实现上，提高了开发效率和项目的可维护性。</li><li>五个核心概念：入口(Entry)、输出(Output)、Loader（加载器）、Plugins（插件）、Mode（模式）<br><img src="https://img-blog.csdnimg.cn/img_convert/456111cc89dc0f8aad4e6da1d18b0519.png"></li></ul><h3 id="二、webpack-的基本使用"><a href="#二、webpack-的基本使用" class="headerlink" title="二、webpack 的基本使用"></a>二、<strong>webpack 的基本使用</strong></h3><p><strong>2.1 在项目中安装和配置 webpack</strong></p><p>① 运行 npm install webpack webpack-cli –D 命令，安装 webpack 相关的包</p><p>② 在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件</p><p>③ 在 webpack 的配置文件中，初始化如下基本配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span> <span class="hljs-comment">// mode 用来指定构建模式</span><br>&#125;<br></code></pre></td></tr></table></figure><p>④ 在 package.json 配置文件中的 scripts 节点下，新增 dev 脚本如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span> <span class="hljs-comment">// script 节点下的脚本，可以通过 npm run 执行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>⑤ 在终端中运行 npm run dev 命令，启动 webpack 进行项目打包。</p><p><strong>2.2 配置打包的入口与出口</strong></p><p>webpack 的 4.x 版本中默认约定：</p><ul><li>打包的<strong>入口文件</strong>为 src -&gt; index.js </li><li>打包的<strong>输出文件</strong>为 dist -&gt; main.js</li></ul><p>如果要修改打包的入口与出口，可以在 webpack.config.js 中新增如下配置信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>) <span class="hljs-comment">// 导入 node.js 中专门操作路径的模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./src/index.js&#x27;</span>), <span class="hljs-comment">// 打包入口文件的路径</span><br> <span class="hljs-attr">output</span>: &#123;<br> <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), <span class="hljs-comment">// 输出文件的存放路径</span><br> <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span> <span class="hljs-comment">// 输出文件的名称</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.3</strong> <strong>配置 webpack 的自动打包功能</strong></p><p>① 运行 npm install webpack-dev-server –D 命令，安装支持项目自动打包的工具</p><p>② 修改 package.json -&gt; scripts 中的 dev 命令如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br> <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server&quot;</span> <span class="hljs-comment">// script 节点下的脚本，可以通过 npm run 执行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>③ 将 src -&gt; index.html 中，script 脚本的引用路径，修改为 “/buldle.js“</p><p>④ 运行 npm run dev 命令，重新进行打包</p><p>⑤ 在浏览器中访问 <a href="http://localhost:8080/">http://localhost:8080</a> 地址，查看自动打包效果</p><p>注意：</p><ul><li>webpack-dev-server 会启动一个实时打包的 http 服务器</li><li> webpack-dev-server 打包生成的输出文件，默认放到了项目根目录中，而且是虚拟的、看不见的</li></ul><p><strong>2.4 配置 html-webpack-plugin 生成预览页面</strong></p><p>① 运行 npm install html-webpack-plugin –D 命令，安装生成预览页面的插件</p><p>② 修改 webpack.config.js 文件头部区域，添加如下配置信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入生成预览页面的插件，得到一个构造函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> htmlPlugin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123; <span class="hljs-comment">// 创建插件的实例对象</span><br> <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;./src/index.html&#x27;</span>, <span class="hljs-comment">// 指定要用到的模板文件</span><br> <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;index.html&#x27;</span> <span class="hljs-comment">// 指定生成的文件的名称，该文件存在于内存中，在目录中不显示</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>③ 修改 webpack.config.js 文件中向外暴露的配置对象，新增如下配置节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br> <span class="hljs-attr">plugins</span>: [ htmlPlugin ] <span class="hljs-comment">// plugins 数组是 webpack 打包期间会用到的一些插件列表</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.5 配置自动打包相关的参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// package.json中的配置</span><br> <span class="hljs-comment">// --open 打包完成后自动打开浏览器页面</span><br> <span class="hljs-comment">// --host 配置 IP 地址</span><br> <span class="hljs-comment">// --port 配置端口</span><br> <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br> <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --open --host 127.0.0.1 --port 8888&quot;</span><br> &#125;,<br></code></pre></td></tr></table></figure><h3 id="三、-webpack-中的加载器（loader）"><a href="#三、-webpack-中的加载器（loader）" class="headerlink" title="三、 webpack 中的加载器（loader）"></a><strong>三、 webpack 中的加载器</strong>（loader）</h3><p><strong>1. 通过 loader 打包非 js 模块</strong></p><p>在实际开发过程中，webpack 默认只能打包处理以 .js 后缀名结尾的模块，其他<strong>非 .js 后缀名结尾的模块</strong>，webpack 默认处理不了，<strong>需要调用 loader 加载器才可以正常打包</strong>，否则会报错！</p><p>loader 加载器可以协助 webpack 打包处理特定的文件模块，比如：</p><ul><li>less-loader 可以打包处理 .less 相关的文件</li><li>sass-loader 可以打包处理 .scss 相关的文件</li><li>url-loader 可以打包处理 css 中与 url 路径相关的文件</li></ul><p><strong>2. loader 的调用过程</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5b3812f40c86b9292f7bee28fb8346b5.png"></p><h3 id="四、webpack-中加载器的基本使用"><a href="#四、webpack-中加载器的基本使用" class="headerlink" title="四、webpack 中加载器的基本使用"></a><strong>四、webpack 中加载器的基本使用</strong></h3><p><strong>1. 打包处理 css 文件</strong></p><p>①  运行 npm i style-loader css-loader -D 命令，安装处理 css 文件的 </p><p>②  在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 所有第三方文件模块的匹配规则</span><br><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">rules</span>: [<br> &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>, <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>] &#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，test 表示匹配的文件类型， use 表示对应要调用的 loader</p><p>注意： </p><ul><li> use 数组中指定的 loader 顺序是固定的</li><li> 多个 loader 的调用顺序是：从后往前调用</li></ul><p><strong>2. 打包处理 less 文件</strong></p><p>① 运行 npm i less-loader less -D 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 所有第三方文件模块的匹配规则</span><br><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">rules</span>: [<br> &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>, <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;less-loader&#x27;</span>] &#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3. 打包处理 scss 文件</strong></p><p>① 运行 npm i sass-loader node-sass -D 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 所有第三方文件模块的匹配规则</span><br><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">rules</span>: [<br>&#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/</span>, <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;sass-loader&#x27;</span>] &#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 配置 postCSS 自动添加 css 的兼容前缀</strong></p><p>① 运行 npm i postcss-loader autoprefixer -D 命令</p><p>② 在项目根目录中创建 postcss 的配置文件 postcss.config.js，并初始化如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> autoprefixer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>) <span class="hljs-comment">// 导入自动添加前缀的插件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">plugins</span>: [ autoprefixer ] <span class="hljs-comment">// 挂载插件</span><br>&#125;<br></code></pre></td></tr></table></figure><p>③ 在 webpack.config.js 的 module -&gt; rules 数组中，修改 css 的 loader 规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">rules</span>: [<br>&#123; <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>, <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-string">&#x27;postcss-loader&#x27;</span>] &#125;<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5. 打包样式表中的图片和字体文件</strong></p><p>① 运行 npm i url-loader file-loader -D 命令</p><p>② 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br><span class="hljs-attr">rules</span>: [<br>&#123; <br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span>, <br>  <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;url-loader?limit=16940&#x27;</span><br>&#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 ? 之后的是 loader 的参数项。</p><p>limit 用来指定图片的大小，单位是字节(byte),只有小于 limit 大小的图片，才会被转为 base64 图片</p><p><strong>6. 打包处理 js 文件中的高级语法</strong>（babel）</p><p>① 安装babel转换器相关的包：npm i babel-loader @babel/core @babel/runtime -D</p><p>② 安装babel语法插件相关的包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm i @babel/preset-env @babel/plugin-transform<br>runtime @babel/plugin-proposal-<span class="hljs-keyword">class</span>-properties –D <br></code></pre></td></tr></table></figure><p>③ 在项目根目录中，创建 babel 配置文件 babel.config.js 并初始化基本配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">presets</span>: [ <span class="hljs-string">&#x27;@babel/preset-env&#x27;</span> ],<br><span class="hljs-attr">plugins</span>: [ <span class="hljs-string">&#x27;@babel/plugin-transform-runtime&#x27;</span>, <span class="hljs-string">&#x27;@babel/plugin-proposalclass-properties’ ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>④ 在 webpack.config.js 的 module -&gt; rules 数组中，添加 loader 规则如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// exclude 为排除项，表示 babel-loader 不需要处理 node_modules 中的 js 文件</span><br>&#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>, <span class="hljs-attr">use</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>, <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="五、打包发布"><a href="#五、打包发布" class="headerlink" title="五、打包发布"></a>五、打包发布</h3><p>项目开发完成之后 ，需要使用 webpack 对项目进行打包发布 ，主要原因有以下两点：</p><ol><li>开发环境下，打包生成的文件存放于内存中 ，无法获取到最终打包生成的文件</li><li>开发环境下，打包生成的文件 不会进行代码压缩和性能优化</li></ol><p>为了让项目能够在<strong>生产环境</strong>中高性能的运行，因此需要对项目进行打包发布。</p><p><strong>5.1、配置webpack的打包发布</strong></p><p>在 package.json 文件的 scripts 节点下，新增 build 命令如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    ...<br>    <span class="hljs-string">&quot;script&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;serve&quot;</span>: <span class="hljs-string">&quot;vue-cli-service serve&quot;</span>   <span class="hljs-comment">// 开发环境中,运行dev命令</span><br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;vue-cli-service build&quot;</span>   <span class="hljs-comment">// 项目发布时,运行 build 命令 </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>-- model</code> 是一个参数项，用来指定 webpack 的<strong>运行模式</strong> 。production 代表生产环境，会对打包生成的文件<br>进行<strong>代码压缩和性能优化</strong> 。</p><p>注意：通过 <code>-- model</code> 指定的参数项，会覆盖 webpack.config.js 中的 model 选项</p><p><strong>5.2、把JavaScript文件统一生成到js目录中</strong></p><p>在 webpack.config.js 配置文件的 output 节点中，进行如下的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">// 入口:可以是字符串/数组/对象，我们这里的入口只有一个，所以写一个字符串即可</span><br>    <span class="hljs-attr">entry</span>: path.<span class="hljs-title function_">join</span>(__dirname,<span class="hljs-string">&#x27;./src/index.js&#x27;</span>)<br>    <br>    <span class="hljs-comment">// 出口:通常是一个对象,里面至少包含两个重要属性,path 和 filename</span><br>    output :&#123;<br>        <span class="hljs-comment">// 注意: path通常是一个绝对路径</span><br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-comment">// 明确告诉 webpack 把生成的 bundle.js 文件存放到 dist 目录下的 js 子目录中</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;js/bundle.js&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.3、把图片文件统一生成到 image 目录中</strong></p><p>修改 webpack.config.js 中的 url-loader 配置项，新增 <code>outputPath</code> 选项即可指定图片文件的输出路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.jpg|png|gif$/</span>,<br>    <span class="hljs-attr">use</span>: &#123;<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">limit</span>: <span class="hljs-number">22228</span>,<br>            <span class="hljs-comment">// 明确指定把打包生成的图片文件,存储到 dist 目录下的 image 文件夹中    </span><br>            <span class="hljs-attr">outputPath</span>: <span class="hljs-string">&#x27;image&#x27;</span>,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.4、自动清理 dist 目录下的旧文件</strong></p><p>为了在每次打包发布时自动清理掉 dist 目录中的旧文件 ，可以安装并配置 <code>clean-webpack-plugin</code> 插件</p><ol><li>安装插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install clean-webpack-plugin --save-dev<br></code></pre></td></tr></table></figure><ol start="2"><li>按需导入插件，得到插件的构造函数后，创建插件的实例对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">CleanWebpackPlugin</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><span class="hljs-keyword">const</span> cleanPlugin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>()<br></code></pre></td></tr></table></figure><ol start="3"><li>把创建的 cleanPlugin 插件实例对象挂载到 plugins 节点中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.导入清理插件插件,得到插件的构造函数后，创建插件的实例对象</span><br><span class="hljs-keyword">const</span> &#123;<span class="hljs-title class_">CleanWebpackPlugin</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><span class="hljs-comment">// 2.创建HTML插件的实例对象</span><br><span class="hljs-keyword">const</span> cleanPlugin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>()<br><br><span class="hljs-comment">// 3.把创建的 cleanPlugin 插件实例对象,挂载到 plugins 节点中,使插件生效</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-attr">plugins</span>: [htmlPlugin,cleanPlugin],<span class="hljs-comment">// 挂载插件</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、Source-Map"><a href="#六、Source-Map" class="headerlink" title="六、Source Map"></a>六、Source Map</h3><h4 id="6-1、生产环境遇到的问题"><a href="#6-1、生产环境遇到的问题" class="headerlink" title="6.1、生产环境遇到的问题"></a><strong>6.1、生产环境遇到的问题</strong></h4><p>前端项目在投入生产环境之前，都需要对JavaScript 源代码进行 压缩混淆 ，从而减小文件的体积，提高文件的加载效率。此时就不可避免的产生了另一个问题：</p><ul><li>对压缩混淆之后的代码除错（debug）是一件极其困难的事情</li><li>变量被替换成 没有任何语义 的名称</li><li>空行和注释被剔除</li></ul><h4 id="6-2、什么是SourceMap"><a href="#6-2、什么是SourceMap" class="headerlink" title="6.2、什么是SourceMap"></a><strong>6.2、什么是SourceMap</strong></h4><ul><li>Source Map就是一个信息文件，里面储存着位置信息</li><li>也就是说， Source Map 文件中存储着压缩混淆后的代码所对应的转换前的位置 。</li><li>有了它，出错的时候，除错工具将直接显示原始代码 ，而不是转换后的代码 ，能够极大的方便后期的调试。</li></ul><p><strong>6.2.1、webpack 开发环境下的 Source Map</strong></p><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6decf006279e9d8c6fdbf2555cfe407f.png"></p><p><strong>6.2.2、默认Source Map的问题</strong></p><p>开发环境下默认生成的 SourceMap ，记录的是 生成后的代码的位置 。会导致运行时报错的行数与源代码的行数不一致的问题。示意图如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/27125ac331b83b89b7510e70a035c527.png"></p><p><strong>6.2.3、解决默认Source Map的问题</strong></p><p>开发环境下，推荐在 webpack.config.js 中添加如下的配置，即可保证运行时报错的行数与源代码的行数保持一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-comment">// eval-source-map 仅限在&#x27;开发模式&#x27;下使用,不建议在 &#x27;生产模式&#x27;下使用。</span><br>    <span class="hljs-comment">// 此选项生产的 Source Map 能够保证运行时报错的行数与源代码的行数保持一致</span><br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;eval-source-map&#x27;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-3、webpack生产环境下的SourceMap"><a href="#6-3、webpack生产环境下的SourceMap" class="headerlink" title="6.3、webpack生产环境下的SourceMap"></a><strong>6.3、webpack生产环境下的SourceMap</strong></h4><p>在生产环境下 ，如果省略了 devtool 选项 ，则最终生成的文件中不包含 Source Map 。这能够防止原始代码通过Source Map 的形式暴露给别有所图之人。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e80f01ef8cf25a4b56379fc53c55305b.png"></p><p><strong>6.3.1、只定位行数不暴露源码</strong></p><p>在生产环境下，如果 只想定位报错的具体行数 ，且不想暴露源码 。此时可以将 devtool 的值设置为<code>nosources-source-map</code> 。实际效果如图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4e9f5a9da2a4b4a5be9f327b4d68b613.png"></p><p><strong>6.3.2、定位行数且暴露源码</strong></p><p>在生产环境下，如果想在定位报错行数的同时，展示具体报错的源码。此时可以将 devtool 的值设置为 <code>source-map</code>。实际效果如图所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8dcbc70b558632dec90a289eae7ae093.png"></p><h4 id="6-4、Source-Map最佳实践"><a href="#6-4、Source-Map最佳实践" class="headerlink" title="6.4、Source Map最佳实践"></a><strong>6.4、Source Map最佳实践</strong></h4><ul><li>开发环境下<ol><li>建议把 devtool 的值设置为 <code>eval-source-map</code></li><li>好处：可以精准定位到具体的错误行</li></ol></li><li>生产环境下<ol><li>建议关闭 Source Map 或将 devtool 的值设置为 <code>nosources-source-map</code></li><li>好处：放置源码泄露，提高网站的安全性</li></ol></li></ul><p>总结：实际开发中不需要自己配置webpack</p><ul><li>实际开发中会使命令行工具（俗称 CLI）一键生成 带有 webpack 的项目</li><li>开箱即用，所有 webpack 配置项都是现成的</li><li>但是我们仍需要了解配置项的基本概念</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ES6模块化 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Vue全家桶(三)之cli3脚手架 ”</title>
      <link href="/2022/04/06/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2022/04/06/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍<strong>目录总览：</strong>（脚手架基本用法、项目结构分析、自定义配置、Vue可视化ui项目创建、Element-UI）</p><span id="more"></span><p><strong>🔥Vue全家桶🔥</strong></p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="Vue-cli3脚手架"><a href="#Vue-cli3脚手架" class="headerlink" title="Vue-cli3脚手架"></a>Vue-cli3脚手架</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/2a2e8eeb2bce6dfcbe99f9de3ca78b21.png"></p><h3 id="1-Vue-脚手架的基本用法"><a href="#1-Vue-脚手架的基本用法" class="headerlink" title="1. Vue 脚手架的基本用法"></a><strong>1. Vue 脚手架的基本用法</strong></h3><ul><li><p><strong>Vue</strong> <strong>脚手架</strong>用于快速生成 Vue 项目基础架构，其官网地址为：<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p></li><li><p>Vue-cli 3 与 2 版本有很大区别:</p><ul><li><p>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3</p></li><li><p>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</p></li><li><p>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化</p></li><li><p>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</p></li></ul></li></ul><p><strong>使用步骤：</strong></p><p>1.安装 3.x 版本的 Vue 脚手架：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g @vue/cli<br></code></pre></td></tr></table></figure><p><strong>2.基于3.x版本的脚手架创建vue项目</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 基于 交互式命令行 的方式，创建 新版 vue 项目</span><br>vue create my-project<br><span class="hljs-comment">// 2. 基于 图形化界面 的方式，创建 新版 vue 项目</span><br>vue ui<br><span class="hljs-comment">// 3. 基于 2.x 的旧模板，创建 旧版 vue 项目</span><br>npm install -g @vue/cli-init<br>vue init webpack my-project<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fa3620517f0fa100920b3cf6af79f86b.png"></p><h3 id="2-Vue-脚手架生成的项目结构分析"><a href="#2-Vue-脚手架生成的项目结构分析" class="headerlink" title="2. Vue 脚手架生成的项目结构分析"></a><strong>2. Vue 脚手架生成的项目结构分析</strong></h3><p><img src="https://img-blog.csdnimg.cn/img_convert/bf97a17e526da2abd9a3102c0eb01d74.png"></p><h3 id="3-运行项目"><a href="#3-运行项目" class="headerlink" title="3.运行项目"></a><strong>3.运行项目</strong></h3><p>使用 Vue CLI3 初始化项目之后，运行项目。只需要看 package.json 下的 scripts 就知道运行命令。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b8af7e7ef525f36e2c6bc20acf520fb5.png"></p><h3 id="4-Vue-脚手架的自定义配置"><a href="#4-Vue-脚手架的自定义配置" class="headerlink" title="4 .Vue 脚手架的自定义配置"></a><strong>4 .Vue 脚手架的自定义配置</strong></h3><ul><li>方式一：自定义配置 vue.config.js</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/62aab091b5142170371452a74ef582a1.png"></p><ul><li>方式二：启动图形化界面 <code>Vue ui</code>进行配置</li></ul><h3 id="5-通过Vue可视化ui界面进行项目创建"><a href="#5-通过Vue可视化ui界面进行项目创建" class="headerlink" title="5.通过Vue可视化ui界面进行项目创建"></a>5.通过Vue可视化ui界面进行项目创建</h3><p>1.通过命令行启动可视化ui界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4d9c8ab3373f6023a3149de0cbf943f1.png"></p><p>2.在可视化界面点击创建进行项目的初始化</p><p><img src="https://img-blog.csdnimg.cn/img_convert/811167ed61250167f32f609b2aeab14e.png"></p><p>3.输入项目名称和git初始提交信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cae70c3f686c76b39aa22d88865bec35.png"></p><p>4.选择配置，可以使用默认，也可以根据自己需求配</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c9423709304daec5676fe237ece848f3.png"></p><p>5.手动配置面板中，需要把（Bable工具链、Router路由、Linter代码规范、使用配置文件）这几项勾选</p><p><img src="https://img-blog.csdnimg.cn/img_convert/255b1f2ee05e50562191fe32ee6a3cfe.png"></p><p>6.选择标准版本的Linter</p><p><img src="https://img-blog.csdnimg.cn/img_convert/441de52f761f90f3b7bd1458f04cc755.png"></p><p>7.最后在项目管理器查看创建结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4765b3f7f417d1f238746d8784a98425.png"></p><p>8.项目启动</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5720f15d99c9613fac4c0bb99f906716.png"></p><h1 id="Element-UI-的基本使用"><a href="#Element-UI-的基本使用" class="headerlink" title="Element-UI 的基本使用"></a>Element-UI 的基本使用</h1><h3 id="1-基于命令行方式手动安装"><a href="#1-基于命令行方式手动安装" class="headerlink" title="1. 基于命令行方式手动安装"></a><strong>1. 基于命令行方式手动安装</strong></h3><p>① 安装依赖包 <strong>npm i element-ui –S</strong> </p><p>② 导入 Element-UI 相关资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在main.js文件内导入组件库</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><span class="hljs-comment">// 导入组件相关样式</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;<br><span class="hljs-comment">// 配置 Vue 插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e2ef16ffeac456f1fbeb3b75924786a4.png"></p><h3 id="2-基于图形化界面自动安装"><a href="#2-基于图形化界面自动安装" class="headerlink" title="2. 基于图形化界面自动安装"></a><strong>2. 基于图形化界面自动安装</strong></h3><p>① 运行 <strong>vue ui</strong> 命令，打开图形化界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ec5d07a01f1e5daadfbead5398f40b8.png"></p><p>② 通过 <strong>Vue 项目管理器</strong>，进入具体的项目配置面板</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0611d878abe3a2d03b819de2b354efe0.png"></p><p>③ 点击 <strong>插件 -&gt; 添加插件</strong>，进入插件查询面板</p><p>④ 搜索 <strong>vue-cli-plugin-element</strong> 并安装</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a52137131ea49867ab4230f2acf7931c.png"></p><p>⑤ 配置插件，实现按需导入，从而减少打包后项目的体积</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7f0edd7b4742efc27de16eb561b48fbf.png"></p><h3 id="3-使用案例"><a href="#3-使用案例" class="headerlink" title="3.使用案例"></a>3.使用案例</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/d287d89f9e4a4b3cb4903676ffd74787.png"></p><p> <strong>最终效果：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/410580dc0560e8ae6b24b7a3142e98bd.png"></p>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Vue全家桶(二)之组件化开发 ”</title>
      <link href="/2022/04/04/Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/04/Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（组件化概念、<strong>组件注册</strong>、数据存放、<strong>组件之间数据交互</strong>、组件插槽、组件使用步骤、<strong>单文件组件</strong>）</p><span id="more"></span><p><strong>🔥Vue全家桶🔥</strong></p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="Vue组件化开发"><a href="#Vue组件化开发" class="headerlink" title="Vue组件化开发"></a>Vue组件化开发</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/a2cd35e665718fa58ccf7bece031e9bd.png"></p><h2 id="一、组件化概念"><a href="#一、组件化概念" class="headerlink" title="一、组件化概念"></a>一、组件化概念</h2><p><strong>1. 组件化开发思想</strong></p><p><strong>组件化思想的特点</strong>：标准、分治、复用、组合</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6f9410662c007be9b161df1b0547f7d7.png"></p><p><strong>2. 组件化定义</strong></p><p> <strong>组件化</strong>开发：根据封装的思想，把页面上可重用的 UI 结构封装为组件，从而方便项目的开发和维护。</p><p><strong>3. Vue中的组件化开发</strong></p><p> <strong>vue</strong> 是一个<strong>支持组件化开发的前端框架</strong>。</p><p> <strong>vue</strong> 中规定：<strong>组件的后缀名是 .vue</strong>。之前接触到的 App.vue 文件本质上就是一个 vue 的组件，即<strong>单组件</strong>（单文件组件）。</p><p><strong>4. Vue组件的三个组成部分</strong></p><p>每个 .vue 组件都由 3 部分构成，分别是：</p><ul><li>template -&gt; 组件的模板结构</li><li>script -&gt; 组件的 JavaScript 行为</li><li>style -&gt; 组件的样式</li></ul><p>其中，<strong>每个组件中必须包含 template 模板结构</strong>，而 <strong>script 行为</strong>和 <strong>style 样式</strong>是<strong>可选</strong>的组成部分。</p><h2 id="二、组件注册"><a href="#二、组件注册" class="headerlink" title="二、组件注册"></a>二、组件注册</h2><h3 id="1-全局组件🔥"><a href="#1-全局组件🔥" class="headerlink" title="1. 全局组件🔥"></a>1. 全局组件🔥</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//全局组件使用</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>&lt;组件名称&gt;&lt;/组件名称&gt;<br>&lt;/div&gt;<br><br><span class="hljs-comment">//全局组件注册</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(组件名称, &#123;<br><span class="hljs-attr">data</span>: 组件数据,<br><span class="hljs-attr">template</span>: 组件模板内容<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><strong>1.1 全局组件组件可以在app实例内部任意地方使用</strong>：我们可以在 app 实例下使用，也可以在 home 实例下使用，也可以在 message 实例下使用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--调用全局注册组件--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 2.定义一个组件(全局组件)</span></span></span><br><span class="language-javascript"><span class="language-xml">     app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-counter&#x27;</span>,&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">         &#125;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;`</span></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;你好,Vue3！&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 3. 挂载vue实例</span></span></span><br><span class="language-javascript"><span class="language-xml">     app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>); </span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/30d3b9e3d6aee7ef2f2daba55428e843.png"></p><ul><li><strong>1.2 可以设置多个全局组件</strong>，代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--调用第二个注册组件--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">lk-box</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lk-box</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-comment">&lt;!--调用全局注册组件--&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button-counter</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button-counter</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;你好,Vue3！&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 2.定义一个组件(全局组件)</span></span></span><br><span class="language-javascript"><span class="language-xml">  app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;button-counter&#x27;</span>,&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">       `</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 定义第二个全局组件</span></span></span><br><span class="language-javascript"><span class="language-xml">  app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;lk-box&#x27;</span>,&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;div style=&quot;width: 200px;height: 200px;background-color:pink;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        盒子组件</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;/div&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">       `</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 3. 挂载vue实例</span></span></span><br><span class="language-javascript"><span class="language-xml">  app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/067d315d411410128e96dab28bb07cd6.png"></p><ul><li><strong>1.3 全局组件之间可以相互使用</strong>，使用方式如下：我们在定义第二个全局组件，若向使用第一个全局组件，只需要将第一个全局组件的名称标签写入模板template中即可。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义第二个全局组件</span><br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;lk-box&#x27;</span>,&#123;<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div style=&quot;width: 200px;height: 200px;background-color:pink;&quot;&gt;</span><br><span class="hljs-string">        盒子组件</span><br><span class="hljs-string">        &lt;button-counter&gt;&lt;/button-counter&gt;</span><br><span class="hljs-string">        &lt;/div&gt;</span><br><span class="hljs-string">       `</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3b2ec25fbfc13f4afaf0c93d14190ed2.png"></p><h3 id="2-局部组件🔥"><a href="#2-局部组件🔥" class="headerlink" title="2. 局部组件🔥"></a>2. 局部组件🔥</h3><ul><li><strong>局部组件只能在注册他的父组件中使用</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//局部组件使用</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentA</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ComponentA</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentB</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ComponentB</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ComponentC</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ComponentC</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">//局部组件注册</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentA</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentB</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ComponentC</span> = &#123; <span class="hljs-comment">/* ... */</span> &#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span><br><span class="hljs-attr">components</span>: &#123;<br><span class="hljs-string">&#x27;component-a&#x27;</span>: <span class="hljs-title class_">ComponentA</span>,<br><span class="hljs-string">&#x27;component-b&#x27;</span>: <span class="hljs-title class_">ComponentB</span>,<br><span class="hljs-string">&#x27;component-c&#x27;</span>: <span class="hljs-title class_">ComponentC</span>,<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//局部组件使用</span><br>&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">lk-count</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">lk-count</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">cc-count</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cc-count</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 注册一个局部组件</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Counter</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;`</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 注册第二个局部组件</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Box</span> = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;div style=&quot;width: 200px;height: 200px;background-color:pink;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        盒子组件</span></span></span><br><span class="hljs-string"><span class="language-javascript"><span class="language-xml">        &lt;/div&gt; `</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;你好,Vue3！&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 组件选项</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&#x27;lk-count&#x27;</span>: <span class="hljs-title class_">Counter</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-string">&#x27;cc-count&#x27;</span>: <span class="hljs-title class_">Box</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 挂载vue实例</span></span></span><br><span class="language-javascript"><span class="language-xml">  app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7e1d0f8d006d1cce61627d24b9fa439e.png"></p><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a>3. 注意事项</h3><p><strong>1. data必须是一个函数</strong></p><p><strong>2. 组件模板内容必须是单个跟元素</strong> </p><p><strong>3. 组件模板内容可以是模板字符串</strong>（需要浏览器提供ES6语法支持）</p><p><strong>4. 组件命名方式</strong></p><ul><li>短横线方式：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br></code></pre></td></tr></table></figure><ul><li>驼峰方式：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyComponent&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br></code></pre></td></tr></table></figure><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><ul><li><p>全局组件：在整个Vue实例中都可以被调用，若想要<strong>全局组件之间相互使用</strong>，只需将<strong>想使用全局组件的名称写入 template</strong> 中</p></li><li><p>局部组件：只能在当前组件中被使用，若想在其他组件中使用，必须使用 components 将其挂载在想使用的组件中，然后再如全局组件那样向模板template写入名称标签</p></li><li><p>我们之后其实对局部组件用的更多一些。</p></li></ul><h2 id="三、组件数据存放"><a href="#三、组件数据存放" class="headerlink" title="三、组件数据存放"></a>三、组件数据存放</h2><h3 id="Data属性的值是一个函数🔥"><a href="#Data属性的值是一个函数🔥" class="headerlink" title="Data属性的值是一个函数🔥"></a>Data属性的值是一个函数🔥</h3><ul><li>为什么data在组件中必须是一个函数呢?<ul><li>当然，如果不是一个函数，Vue直接就会报错。</li><li>组件是可复用的vue实例，一个组件被创建好之后，就可能被用在各个地方</li><li>而组件不管被复用了多少次，组件中的data数据都应该是相互隔离，互不影响的</li><li>基于这一理念，组件每复用一次，data数据就应该被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响</li><li>组件中的data<strong>写成一个函数</strong>，<strong>数据以函数返回值形式定义</strong>，这样每<strong>复用一次组件</strong>，就会<strong>返回一份新的data</strong>，类似于给每个组件实例创建一个<strong>私有的数据空间</strong>，让各个组件实例维护各自的数据</li><li>而单纯的<strong>写成对象形式</strong>，就使得<strong>所有组件实例共用了一份data</strong>，就<strong>会造成一个变了全都会变的结果</strong>。</li></ul></li></ul><h2 id="四、组件之间数据的交互共享"><a href="#四、组件之间数据的交互共享" class="headerlink" title="四、组件之间数据的交互共享"></a>四、组件之间数据的交互共享</h2><h3 id="4-1-父组件向子组件传值🔥"><a href="#4-1-父组件向子组件传值🔥" class="headerlink" title="4.1 父组件向子组件传值🔥"></a><strong>4.1 父组件向子组件传值</strong>🔥</h3><p><strong>1. 组件内部通过props接收传递过来的值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(‘menu-item<span class="hljs-string">&#x27;, &#123;</span><br><span class="hljs-string">props: [&#x27;</span>title<span class="hljs-string">&#x27;],</span><br><span class="hljs-string">template: &#x27;</span>&lt;div&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><p><strong>2. 父组件通过属性将值传递给子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;menu-item title=<span class="hljs-string">&quot;来自父组件的数据&quot;</span>&gt;&lt;/menu-item&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>3. props属性名规则</strong></p><ul><li>在props中使用驼峰形式，模板中需要使用短横线的形式</li><li>字符串形式的模板中没有这个限制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(‘menu-item<span class="hljs-string">&#x27;, &#123;</span><br><span class="hljs-string">// 在 JavaScript 中是驼峰式的</span><br><span class="hljs-string">props: [‘menuTitle&#x27;</span>],<br><span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123; menuTitle &#125;&#125;&lt;/div&gt;&#x27;</span><br>&#125;)<br>&lt;!– 在html中是短横线方式的 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu-item</span> <span class="hljs-attr">menu-title</span>=<span class="hljs-string">“nihao</span>&quot;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">menu-item</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>4. props属性值类型</strong></p><ul><li>字符串 String</li><li>数值 Number</li><li>布尔值 Boolean</li><li>数组 Array</li><li>对象 Object</li></ul><h3 id="4-2-子组件向父组件传值🔥"><a href="#4-2-子组件向父组件传值🔥" class="headerlink" title="4.2 子组件向父组件传值🔥"></a><strong>4.2 子组件向父组件传值</strong>🔥</h3><p><strong>1. 子组件通过自定义事件向父组件传递信息</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&#x27;$emit(&quot;enlarge-text&quot;) &#x27;</span>&gt;扩大字体&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><strong>2. 父组件监听子组件的事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;menu-item v-<span class="hljs-attr">on</span>:enlarge-text=<span class="hljs-string">&#x27;fontSize += 0.1&#x27;</span>&gt;&lt;/menu-item&gt;<br></code></pre></td></tr></table></figure><p><strong>3. 子组件通过自定义事件向父组件传递信息</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&#x27;$emit(&quot;enlarge-text&quot;, 0.1) &#x27;</span>&gt;扩大字体&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><strong>4. 父组件监听子组件的事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;menu-item v-<span class="hljs-attr">on</span>:enlarge-text=<span class="hljs-string">&#x27;fontSize += $event&#x27;</span>&gt;&lt;/menu-item&gt;<br></code></pre></td></tr></table></figure><h3 id="4-3-非父子组件间传值🔥"><a href="#4-3-非父子组件间传值🔥" class="headerlink" title="4.3 非父子组件间传值🔥"></a><strong>4.3 非父子组件间传值</strong>🔥</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/324fe89095c79f6adb861234c337ed6a.png"></p><p><strong>1. 单独的事件中心管理组件间的通信</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> eventHub = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br></code></pre></td></tr></table></figure><p><strong>2. 监听事件与销毁事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventHub.$on(<span class="hljs-string">&#x27;add-todo&#x27;</span>, addTodo)<br>eventHub.$off(<span class="hljs-string">&#x27;add-todo&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>3. 触发事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventHub.$emit(‘add-todo<span class="hljs-string">&#x27;, id)</span><br></code></pre></td></tr></table></figure><h2 id="五、组件插槽"><a href="#五、组件插槽" class="headerlink" title="五、组件插槽"></a>五、组件插槽</h2><h3 id="5-1-组件插槽的作用"><a href="#5-1-组件插槽的作用" class="headerlink" title="5.1 组件插槽的作用"></a><strong>5.1 组件插槽的作用</strong></h3><ul><li><p>插槽就是子组件中的提供给父组件使用的一个<strong>占位符</strong>，用<slot></slot> 表示，<strong>父组件可以在这个占位符中填充任何模板代码</strong>，如 HTML、组件等，填充的内容会替换子组件的<slot></slot>标签。</p></li><li><p>父组件向子组件传递内容</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7ff0042a01f41b62a2da1cd58ecde562.png"></p><h3 id="5-2-组件插槽基本用法"><a href="#5-2-组件插槽基本用法" class="headerlink" title="5.2 组件插槽基本用法"></a><strong>5.2 组件插槽基本用法</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//插槽的使用</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有bug发生<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span>有一个警告<span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">alert-box</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">alert-box</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="hljs-comment">//插槽的定义</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;alert-box&#x27;</span>, &#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">          &lt;strong&gt;ERROR:&lt;/strong&gt;</span><br><span class="hljs-string">          &lt;slot&gt;默认内容&lt;/slot&gt;</span><br><span class="hljs-string">        &lt;/div&gt;`</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1e6b196a3942480dc64c2b18713a4648.png"></p><h3 id="5-3-具名插槽用法"><a href="#5-3-具名插槽用法" class="headerlink" title="5.3 具名插槽用法"></a><strong>5.3 具名插槽用法</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//具名插槽的使用</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br><span class="hljs-comment">//第一种：当具名插槽内只有1个标签</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span>标题信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span></span><br>    <br>    <span class="hljs-comment">//第二种：当具名插槽内需要填充多个标签</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题信息1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标题信息2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>主要内容2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部信息信息1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>底部信息信息2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">//具名插槽的定义</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;base-layout&#x27;</span>, &#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;div&gt;</span><br><span class="hljs-string">          &lt;header&gt;</span><br><span class="hljs-string">            &lt;slot name=&#x27;header&#x27;&gt;&lt;/slot&gt;</span><br><span class="hljs-string">          &lt;/header&gt;</span><br><span class="hljs-string">          &lt;main&gt;</span><br><span class="hljs-string">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="hljs-string">          &lt;/main&gt;</span><br><span class="hljs-string">          &lt;footer&gt;</span><br><span class="hljs-string">            &lt;slot name=&#x27;footer&#x27;&gt;&lt;/slot&gt;</span><br><span class="hljs-string">          &lt;/footer&gt;</span><br><span class="hljs-string">        &lt;/div&gt;`</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7c7fa8c9aff4fdeae1066bc0896eb2c0.png"></p><h3 id="5-4-作用域插槽"><a href="#5-4-作用域插槽" class="headerlink" title="5.4 作用域插槽"></a><strong>5.4 作用域插槽</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//作用域插槽的使用</span><br>&lt;fruit-list v-<span class="hljs-attr">bind</span>:list= <span class="hljs-string">&quot;list&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;slotProps.item.current&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;&#123; slotProps.item.text &#125;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/fruit-list&gt;<br><br><span class="hljs-comment">//作用域插槽的定义</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>= <span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">v-bind:key</span>= <span class="hljs-string">&quot;item.id&quot;</span> &gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">v-bind:item</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span></span><br><span class="language-xml">&#123;&#123;item.name&#125;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1><h2 id="1、单文件组件"><a href="#1、单文件组件" class="headerlink" title="1、单文件组件"></a>1、单文件组件</h2><p>1.<strong>在很多 Vue 项目中，我们使用 <code>Vue.component</code> 来定义全局组件</strong>，紧接着用 <code>new Vue(&#123; el: &#39;#container &#39;&#125;)</code> 在每个页面内指定一个容器元素。</p><p>2.这种方式在很多中小规模的项目中运作的很好，在这些项目里 JavaScript 只被用来加强特定的视图。但当在更复杂的项目中，或者你的前端完全由 JavaScript 驱动的时候，下面这些<strong>缺点将变得非常明显</strong>：</p><ul><li><strong>全局定义 (Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板 (String templates)</strong> 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 <code>\</code></li><li><strong>不支持 CSS (No CSS support)</strong> 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤 (No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript，而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ul><p>3.文件扩展名为 <code>.vue</code> 的 <strong>single-file components (单文件组件)</strong> 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p><blockquote><p><strong>直接将组件分离出来，作为一个单独的文件。</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/e5d7547ed044ed9b2e2b9ad39095c9c0.png"></p><h2 id="2、使用单文件组件的三个步骤"><a href="#2、使用单文件组件的三个步骤" class="headerlink" title="2、使用单文件组件的三个步骤"></a>2、使用单文件组件的三个步骤</h2><ul><li><strong>Left单文件组件配置</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//文件名为Left.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Left 组件<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>组件的值是:&#123;&#123; msg &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//默认导出 固定写法</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//data数据源  类型为函数</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;left&#x27;</span> </span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> &gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>在根组件App.vue引用Left.vue单文件组件</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/6d04c7c6a6ab2197d147d06660c6473b.png"></p><h2 id="3、单文件组件之间的通信（数据交互）"><a href="#3、单文件组件之间的通信（数据交互）" class="headerlink" title="3、单文件组件之间的通信（数据交互）"></a>3、单文件组件之间的通信（数据交互）</h2><h3 id="3-1-组件关系"><a href="#3-1-组件关系" class="headerlink" title="3.1 组件关系"></a>3.1 组件关系</h3><ul><li>组件在被封装好之后，彼此之间是相互独立的，不存在父子关系 </li><li>在使用组件的时候，根据彼此的嵌套关系，形成了父子关系、兄弟关系</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c3e5f2d07fd06bd74c4860a888e16ddb.png"></p><p>父子组件是两个封闭的作用域</p><p><strong>父组件为User.vue</strong>  </p><p><strong>子组件为status.vue，detail.vue</strong></p><h3 id="3-2-父组件往子组件里面传值"><a href="#3-2-父组件往子组件里面传值" class="headerlink" title="3.2 父组件往子组件里面传值"></a>3.2 父组件往子组件里面传值</h3><p>1.在子组件中自定义可以接收的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>  <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;name&#x27;</span>]<span class="hljs-comment">//props:[&#x27;name&#x27;,&#x27;age&#x27;]可以传多个自定义属性</span><br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>2.在父组件中引用子组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">app-status</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-status</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//引入</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Status</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./status.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zcy&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//注册</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-string">&quot;app-status&quot;</span>:<span class="hljs-title class_">Status</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125; </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3.这时候，我们就可以在子组件中使用这个name了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>4.如果我们直接改变props的name属性的值，会报错(怕我们数据流发生混乱)，所以我们要<strong>定义一个属性初始化</strong>这个传过来的name</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;myName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;changeName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&#x27;name&#x27;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     myName=<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">changeName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-variable language_">this</span>.<span class="hljs-property">myName</span>=<span class="hljs-string">&#x27;xiaoming&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>5.<strong>props验证，可以传一个也可以传多个，必须传required:true，default:’daming’ 这两个只能存在一个，必传或者默认</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>  <span class="hljs-comment">//props:[&#x27;name&#x27;],</span><br>  <span class="hljs-attr">props</span>:&#123;<br>   <span class="hljs-attr">name</span>:<span class="hljs-title class_">String</span>,<br>   <span class="hljs-attr">name</span>:[<span class="hljs-title class_">String</span>,<span class="hljs-title class_">Array</span>,<span class="hljs-title class_">Number</span>],<br>   <span class="hljs-attr">name</span>:&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span>,<br>    <span class="hljs-attr">required</span>:<span class="hljs-literal">true</span><span class="hljs-comment">//必须传，存其一</span><br>    <span class="hljs-attr">default</span>:<span class="hljs-string">&#x27;daming&#x27;</span><span class="hljs-comment">//默认，存其一</span><br>   &#125;,<br>   <span class="hljs-comment">//如果是Object</span><br>    <span class="hljs-attr">name</span>:&#123;<br>    <span class="hljs-attr">type</span>:<span class="hljs-title class_">Object</span>,<br>    <span class="hljs-comment">//required:true//必须传，存其一</span><br>    <span class="hljs-title function_">default</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-keyword">return</span>&#123;<br>      <br>     &#125;<br>    &#125;<br>   &#125;,<br>   <span class="hljs-comment">//age:Number</span><br>  &#125;,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">return</span>&#123;<br>     myName=<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>:&#123;<br>   <span class="hljs-attr">changeName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">myName</span>=<span class="hljs-string">&#x27;xiaoming&#x27;</span>;<br>    &#125;<br>  &#125;<br> <br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="3-3-子组件往父组件里面传值"><a href="#3-3-子组件往父组件里面传值" class="headerlink" title="3.3 子组件往父组件里面传值"></a>3.3 子组件往父组件里面传值</h3><p>1.在子组件中绑定上点击事件，然后通过**$emit触发自定义的事件（事件名和值）**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;myName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;changeName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changePName&quot;</span>&gt;</span>改变父级的name<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">name</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">type</span>:<span class="hljs-title class_">String</span></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     myName=<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">changeName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-variable language_">this</span>.<span class="hljs-property">myName</span>=<span class="hljs-string">&#x27;xiaoming&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">changePName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;changePName&#x27;</span>,<span class="hljs-string">&#x27;xiaohuang&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.在父组件中<strong>绑定上这个自定义的事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">app-status</span></span></span><br><span class="hljs-tag"><span class="language-xml">   <span class="hljs-attr">:name</span>=<span class="hljs-string">&quot;name&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">   @<span class="hljs-attr">changePName</span>=<span class="hljs-string">&quot;changeName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-status</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//引入</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Status</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./status.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;zcy&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//注册</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-string">&quot;app-status&quot;</span>:<span class="hljs-title class_">Status</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-attr">changeName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125; </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3-4-兄弟组件传值"><a href="#3-4-兄弟组件传值" class="headerlink" title="3.4 兄弟组件传值"></a>3.4 兄弟组件传值</h3><p><strong>绑定和触发全局事件（EventBus）</strong></p><p>1.在main.js中注册一个新的Vue实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">EventBus</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>()<br></code></pre></td></tr></table></figure><p>2.在子组件<strong>status.vue</strong>中引入这个EventBus，<strong>这个子组件去改变另一个兄弟子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeAge&quot;</span>&gt;</span>改变兄弟值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">EventBus</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./main.js&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">age</span>:<span class="hljs-number">10</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">changeAge</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=<span class="hljs-number">20</span>;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-title class_">EventBus</span>.$emit(<span class="hljs-string">&quot;editAge&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<span class="hljs-comment">//全局触发自定义事件</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> &#125; </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3.在子组件detail.vue中去引入EventBus，通过**$on绑定上自定义事件**</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">EventBus</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./main.js&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">age</span>:<span class="hljs-number">10</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"> <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"> </span></span><br><span class="language-javascript"><span class="language-xml"> &#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">create</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">EventBus</span>.$on(<span class="hljs-string">&quot;editAge&quot;</span>,<span class="hljs-function">(<span class="hljs-params">age</span>)=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>=age;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;);<span class="hljs-comment">//绑定自定义事件 </span></span></span><br><span class="language-javascript"><span class="language-xml"> &#125; </span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 组件化开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Vue全家桶(一)之常用特性 ”</title>
      <link href="/2022/04/02/vue%E5%B8%B8%E8%A7%81%E7%89%B9%E6%80%A7/"/>
      <url>/2022/04/02/vue%E5%B8%B8%E8%A7%81%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（<strong>表单操作</strong>、自定义指令、计算属性、侦听器、过滤器、生命周期）</p><span id="more"></span><p>🔥<strong>Vue全家桶</strong>🔥</p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="Vue常用特性"><a href="#Vue常用特性" class="headerlink" title="Vue常用特性"></a>Vue常用特性</h1><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/img_convert/4b225349bb06466250faa17fad2f5205.png" alt="思维导图" class="lazyload"></p><h2 id="一、表单操作"><a href="#一、表单操作" class="headerlink" title="一、表单操作"></a>一、表单操作</h2><h3 id="1-基于Vue的表单操作"><a href="#1-基于Vue的表单操作" class="headerlink" title="1. 基于Vue的表单操作"></a><strong>1. 基于Vue的表单操作</strong></h3><ul><li>v-model指令：在表单控件元素上创建<strong>双向数据绑定</strong>。v-model 会根据控件类型<strong>自动</strong>选取正确的方法来<strong>更新</strong>元素。</li></ul><p> <img src="https://img-blog.csdnimg.cn/img_convert/8bc1e71b0065445aed191f6e87525604.png"></p><p><strong>1.1 Input 单行文本</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>input 元素：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;编辑我……&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>消息是: &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/359197edc641a684eb1d220449a95629.png"></p><p><strong>1.2 textarea 多行文本</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>textarea 元素：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;white-space: pre&quot;</span>&gt;</span>&#123;&#123; message2 &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message2&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;多行文本输入……&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">message2</span>: <span class="hljs-string">&#x27;菜鸟教程\r\nhttp://www.runoob.com&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/aeec453a8b53f05294f3010a0c209b46.png"></p><p><strong>1.3 radio 单选框</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bd974a209318990a9643dc4d4b3286d3.png"></p><ul><li>实现多选一效果。常见场景：性别选择</li><li>v-model变量的值和value一致时，即勾选</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  &lt;span&gt; 性别：&lt;span/&gt;<br>  &lt;span&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;picked&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//设置默认值为1，即默认选择性别为男</span></span></span><br><span class="language-javascript"><span class="language-xml">    picked : <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>1.4 select 下拉表单（单选和多选）</strong></p><ul><li>表单元素添加multiple=”true”属性 可以将单选下拉表单 <strong>变成 多选下拉表单</strong> </li><li><strong>多选下拉表单</strong>（需要把data中v-model绑定的属性类型改为数组）。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml">&lt;-- 单选下拉表单 --&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选择一个网站<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;www.runoob.com&quot;</span>&gt;</span>Runoob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;www.google.com&quot;</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;output&quot;</span>&gt;</span></span><br><span class="language-xml">      选择的网站是: &#123;&#123;selected&#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  &lt;-- 多选下拉表单 --&gt;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;website&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span>  <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>选择一个网站<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;www.runoob.com&quot;</span>&gt;</span>Runoob<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;www.google.com&quot;</span>&gt;</span>Google<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;output&quot;</span>&gt;</span></span><br><span class="language-xml">      选择的网站是: &#123;&#123;website&#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//默认选择Runoob </span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">selected</span>: <span class="hljs-string">&#x27;www.runoob.com&#x27;</span> ,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//多选下拉表单默认无选中</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">website</span>:[]</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9ca4d58f25297a05bb34335e0032c026.png"></p><p><strong>1.5 checkbox 复选框（单个和多个）</strong></p><ul><li>v-model变量的值和value一致时，即勾选。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>单个复选框：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;<br>  &lt;label for=&quot;checkbox&quot;&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;<br>    <br>  &lt;p&gt;多个复选框：&lt;/p&gt;<br>  &lt;input type=&quot;checkbox&quot; id=&quot;runoob&quot; value=&quot;Runoob&quot; v-model=&quot;checkedNames&quot;&gt;<br>  &lt;label for=&quot;runoob&quot;&gt;Runoob&lt;/label&gt;<br>  &lt;input type=&quot;checkbox&quot; id=&quot;google&quot; value=&quot;Google&quot; v-model=&quot;checkedNames&quot;&gt;<br>  &lt;label for=&quot;google&quot;&gt;Google&lt;/label&gt;<br>  &lt;input type=&quot;checkbox&quot; id=&quot;taobao&quot; value=&quot;Taobao&quot; v-model=&quot;checkedNames&quot;&gt;<br>  &lt;label for=&quot;taobao&quot;&gt;taobao&lt;/label&gt;<br>  &lt;br&gt;<br>  &lt;span&gt;选择的值为: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>new Vue(&#123;<br>  el: &#x27;#app&#x27;,<br>  data: &#123;<br>    //默认打勾<br>    checked : true,<br>    //默认打勾 Runoob Google Taobao<br>    checkedNames: [&quot;Runoob&quot;, &quot;Google&quot;, &quot;Taobao&quot;]<br>  &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f3e1317fa3cf7e8221ccf257527fae9f.png"></p><h3 id="2-表单修饰符"><a href="#2-表单修饰符" class="headerlink" title="2.表单修饰符"></a>2.表单修饰符</h3><table><thead><tr><th>修饰符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>.number</td><td>自动将用户的输入值<strong>转化为数值类型</strong></td><td><code>&lt;input v-model.number = &quot;age&quot; /&gt;</code></td></tr><tr><td>.trim</td><td>自动<strong>过滤</strong>用户输入的<strong>首尾空白字符</strong></td><td><code>&lt;input v-module.trim = &quot;msg&quot; /&gt;</code></td></tr><tr><td>.lazy</td><td>在 <code>change</code> 时而非 <code>input</code> 时更新(<strong>失去焦点或回车时</strong>)</td><td><code>&lt;input v-model.lazy = &quot;msg&quot; /&gt;</code></td></tr></tbody></table><p><strong>2.1 .number</strong></p><ul><li>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input v-model.<span class="hljs-property">number</span>=<span class="hljs-string">&quot;age&quot;</span> type=<span class="hljs-string">&quot;number&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>这通常很有用，因为在 type=”number” 时 HTML 中输入的值也总是会返回字符串类型。</strong></p><p><strong>2.2 .trim</strong></p><ul><li>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input v-model.<span class="hljs-property">trim</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>2.3 .lazy</strong></p><ul><li>在默认情况下， v-model 在 input 事件中同步输入框的值与数据。</li><li>但你可以添加一个修饰符 lazy ，从而转变为在 change 事件（当是去input输入框<strong>失去焦点</strong>或<strong>敲击回车</strong>）中同步：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 在 <span class="hljs-string">&quot;change&quot;</span> 而不是 <span class="hljs-string">&quot;input&quot;</span> 事件中更新 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;msg&quot;</span> &gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="二、自定义指令"><a href="#二、自定义指令" class="headerlink" title="二、自定义指令"></a>二、自定义指令</h2><p><strong>使用场景：内置指令不满足需求</strong></p><h3 id="1-自定义指令"><a href="#1-自定义指令" class="headerlink" title="1.自定义指令"></a>1.自定义指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span> &#123;<br><span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>) &#123;<br><span class="hljs-comment">// 获取元素的焦点</span><br>el.<span class="hljs-title function_">focus</span>();<br>&#125;<br>&#125;)<br><span class="hljs-comment">//用法</span><br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-focus&gt;<br></code></pre></td></tr></table></figure><h3 id="2-带参数的自定义指令"><a href="#2-带参数的自定义指令" class="headerlink" title="2.带参数的自定义指令"></a>2.带参数的自定义指令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(‘color<span class="hljs-string">&#x27;, &#123;</span><br><span class="hljs-string">inserted: function(el, binding) &#123;</span><br><span class="hljs-string">el.style.backgroundColor = binding.value.color;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">//用法 修改背景颜色</span><br><span class="hljs-string">&lt;input type=&quot;text&quot; v-color=&#x27;</span>&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&quot;orange&quot;</span>&#125;<span class="hljs-string">&#x27;&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-局部自定义指令"><a href="#3-局部自定义指令" class="headerlink" title="3.局部自定义指令"></a>3.局部自定义指令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">directives: &#123;<br>focus: &#123;<br>// 指令的定义<br>inserted: function (el) &#123;<br>el<span class="hljs-selector-class">.focus</span>()<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、计算属性（computed）"><a href="#三、计算属性（computed）" class="headerlink" title="三、计算属性（computed）"></a>三、计算属性（computed）</h2><h3 id="1-概念和用法"><a href="#1-概念和用法" class="headerlink" title="1.概念和用法"></a>1.概念和用法</h3><ul><li>表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁。</li></ul><p><strong>用法（computed）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;Nihao&#x27;</span><br>      &#125;,<br>      <span class="hljs-attr">computed</span>: &#123;<br>        <span class="hljs-attr">reverseString</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>        &#125;<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><h3 id="2-计算属性与方法的区别"><a href="#2-计算属性与方法的区别" class="headerlink" title="2.计算属性与方法的区别"></a>2.计算属性与方法的区别</h3><ul><li>计算属性是基于他们的依赖进行缓存的（如果输入不变，后续直接调用第一次计算结果的缓存数据）</li><li>方法不存在缓存（每次输入，都需要进行计算。）</li></ul><h2 id="四、侦听器"><a href="#四、侦听器" class="headerlink" title="四、侦听器"></a>四、侦听器</h2><p><strong>4.1 侦听器的应用场景：</strong>数据变化时执行<strong>异步</strong>或<strong>开销较大的操作</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/13a1744192ff21cd1b410959b8e913a5.png"></p><p><strong>4.2 基本用法：</strong>和计算属性相似</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;firstName&#x27;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>姓：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&#x27;lastName&#x27;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">watch: &#123;</span><br><span class="language-xml">   firstName: function(val) &#123;</span><br><span class="language-xml">          this.fullName = val + &#x27; &#x27; + this.lastName;</span><br><span class="language-xml">   &#125;,</span><br><span class="language-xml">   lastName: function(val) &#123;</span><br><span class="language-xml">          this.fullName = this.firstName + &#x27; &#x27; + val;</span><br><span class="language-xml">   &#125;</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/82f4aeed77b0541127ee88bfdaab993a.png"></p><h3 id="侦听器案例：验证用户名是否可用"><a href="#侦听器案例：验证用户名是否可用" class="headerlink" title="侦听器案例：验证用户名是否可用"></a><strong>侦听器案例：验证用户名是否可用</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&#x27;uname&#x27;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;tip&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><br><span class="hljs-attr">methods</span>: &#123;<br><span class="hljs-attr">checkName</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">uname</span>) &#123;<br><span class="hljs-comment">// 调用接口，但是可以使用定时任务的方式模拟接口调用</span><br><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">// 模拟接口调用</span><br><span class="hljs-keyword">if</span>(uname == <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>that.<span class="hljs-property">tip</span> = <span class="hljs-string">&#x27;用户名已经存在，请更换一个&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>that.<span class="hljs-property">tip</span> = <span class="hljs-string">&#x27;用户名可以使用&#x27;</span>;<br>&#125;<br>&#125;, <span class="hljs-number">2000</span>);<br> &#125;<br>&#125;,<br><span class="hljs-attr">watch</span>: &#123;<br><span class="hljs-attr">uname</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-comment">// 调用后台接口验证用户名的合法性</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkName</span>(val);<br><span class="hljs-comment">// 修改提示信息</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">tip</span> = <span class="hljs-string">&#x27;正在验证...&#x27;</span>;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f23649a60f51729c260298f7258a8d6e.png"></p><h2 id="五、过滤器"><a href="#五、过滤器" class="headerlink" title="五、过滤器"></a>五、过滤器</h2><p><strong>5.1 过滤器的作用：</strong></p><p>格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定的格式等。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ebdd2007f1b4c2b0582aad21da732a8.png"></p><p><strong>5.2 过滤器的基本用法：</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/727f6dc456204a4d859fe8c1b2c8f317.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWFhYeHh4NDQ0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img" class="lazyload"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/29ff22457df0933f9d3fa139451e6c67.png"></p><p><strong>5.3 带参数的过滤器</strong></p><ul><li>过滤器是 JavaScript 函数，因此可以接收参数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&#123; message | filterA(&#x27;arg&#x27; )&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>这里，filterA 被定义为接收三个参数的过滤器函数。其中 message 的值作为第一个参数，普通字符串 ‘arg’ 作为第二个参数</li></ul><p><img src="https://img-blog.csdnimg.cn/ca50e5354cb549bb9c93b90587e9fb09.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWFhYeHh4NDQ0,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="过滤器案例：格式化日期"><a href="#过滤器案例：格式化日期" class="headerlink" title="过滤器案例：格式化日期"></a>过滤器案例：格式化日期</h4><ul><li>获取data数据<strong>使用过滤器</strong>格式化为<strong>‘2022-4-1 12:22:19’的格式</strong></li></ul><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/b5e46077aae04d70bf0958312b9d4e04.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAWFhYeHh4NDQ0,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img" class="lazyload"></p><h2 id="六、生命周期"><a href="#六、生命周期" class="headerlink" title="六、生命周期"></a>六、生命周期</h2><p><strong>1. 主要阶段</strong></p><ul><li>挂载（初始化相关属性）</li></ul><p>① beforeCreate</p><p>② created</p><p>③ beforeMount</p><p>④ mounted</p><ul><li>更新（元素或组件的变更操作）</li></ul><p>① beforeUpdate</p><p>② updated</p><ul><li>销毁（销毁相关属性）</li></ul><p>① beforeDestroy</p><p>② destroyed</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eedd74887eebdabc3a3a36875a661463.png"></p><p><strong>2. Vue实例的产生过程</strong></p><p><strong>挂载;</strong></p><p>① beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用。</p><p>② created 在实例创建完成后被立即调用。</p><p>③ beforeMount 在挂载开始之前被调用。</p><p>④ <strong>mounted el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子</strong>。</p><p><strong>跟新：</strong></p><p>⑤ beforeUpdate 数据更新时调用，发生在虚拟DOM打补丁之前。</p><p>⑥ updated 由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。</p><p><strong>销毁：</strong></p><p>⑦ beforeDestroy 实例销毁之前调用。</p><p>⑧ destroyed 实例销毁后调用。</p>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue常用特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Vue全家桶(一)之基础指令 ”</title>
      <link href="/2022/03/31/vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/03/31/vue%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（模板语法概述、<strong>基础指令</strong>）</p><span id="more"></span><p><strong>🔥Vue全家桶🔥</strong></p><table><thead><tr><th><strong>Vue全家桶</strong></th><th><strong>地址</strong></th></tr></thead><tbody><tr><td>Vue全家桶(一)之基础指令🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917809">https://blog.csdn.net/article/123917809</a></td></tr><tr><td>Vue全家桶(一)之常用特性🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123917352">https://blog.csdn.net/article/123917352</a></td></tr><tr><td>Vue全家桶(二)之组件化开发🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123957131">https://blog.csdn.net/article/123957131</a></td></tr><tr><td>Vue全家桶(三)之cli3脚手架🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123956982">https://blog.csdn.net/article/123956982</a></td></tr><tr><td>Vue全家桶(四)之ES6模块化与webpack打包🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124019983">https://blog.csdn.net/article/124019983</a></td></tr><tr><td>Vue全家桶(五)之Vue-Router路由🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/123994048">https://blog.csdn.net/article/123994048</a></td></tr><tr><td>Vue全家桶(六)之VueX状态管理🔥</td><td><a href="https://blog.csdn.net/m0_55990909/article/details/124017667">https://blog.csdn.net/article/124017667</a></td></tr></tbody></table><h1 id="Vue-基础指令（模板语法）"><a href="#Vue-基础指令（模板语法）" class="headerlink" title="Vue 基础指令（模板语法）"></a>Vue 基础指令（模板语法）</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/edbe698cff247c7d60a887c0ebcc3575.png"></p><h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a><strong>Vue模板语法</strong></h2><h3 id="1-如何理解前端渲染？"><a href="#1-如何理解前端渲染？" class="headerlink" title="1.如何理解前端渲染？"></a><strong>1.如何理解前端渲染？</strong></h3><ul><li>把数据填充到HTML标签中</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/4fb191d8da5396c098c11304b10afc51.png"></p><h3 id="2-前端渲染的方式"><a href="#2-前端渲染的方式" class="headerlink" title="2.前端渲染的方式"></a><strong>2.前端渲染的方式</strong></h3><ul><li>前端渲染的方式主要有三种：<ul><li>原生js拼接字符串</li><li>使用前端模板引擎</li><li>使用vue特有的模板语法</li></ul></li></ul><h4 id="2-1-原生js拼接字符串"><a href="#2-1-原生js拼接字符串" class="headerlink" title="2.1 原生js拼接字符串"></a>2.1 原生js拼接字符串</h4><ul><li>基本上就是<strong>将数据以字符串的方式拼接到HTML标签中</strong>，前端代码风格大体上如下图所示。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = data.<span class="hljs-property">weather</span>;<br><span class="hljs-keyword">var</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;info&#x27;</span>);<br>info.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;d.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-keyword">var</span> date = d[i].<span class="hljs-property">date</span>;<br><span class="hljs-keyword">var</span> day = d[i].<span class="hljs-property">info</span>.<span class="hljs-property">day</span>;<br><span class="hljs-keyword">var</span> night = d[i].<span class="hljs-property">info</span>.<span class="hljs-property">night</span>;<br><span class="hljs-keyword">var</span> tag = <span class="hljs-string">&#x27;&#x27;</span>;<br>tag += <span class="hljs-string">&#x27;&lt;span&gt;日期：&#x27;</span>+date+<span class="hljs-string">&#x27;&lt;/sapn&gt;&lt;ul&gt;&#x27;</span>;<br>tag += <span class="hljs-string">&#x27;&lt;li&gt;白天天气：&#x27;</span>+day[<span class="hljs-number">1</span>]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span><br>tag += <span class="hljs-string">&#x27;&lt;li&gt;白天温度：&#x27;</span>+day[<span class="hljs-number">2</span>]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span><br>tag += <span class="hljs-string">&#x27;&lt;li&gt;白天风向：&#x27;</span>+day[<span class="hljs-number">3</span>]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span><br>tag += <span class="hljs-string">&#x27;&lt;li&gt;白天风速：&#x27;</span>+day[<span class="hljs-number">4</span>]+<span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span><br>tag += <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>;<br><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.<span class="hljs-property">innerHTML</span> = tag;<br>info.<span class="hljs-title function_">appendChild</span>(div);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>缺点：</strong>不同开发人员的代码风格差别很大，随着业务的复杂，后期的维护变得逐渐困难起来。</p><h5 id="2-2-使用前端模板引擎"><a href="#2-2-使用前端模板引擎" class="headerlink" title="2.2 使用前端模板引擎"></a>2.2 使用前端模板引擎</h5><ul><li>下图代码是基于模板引擎art-template的一段代码，与拼接字符串相比，代码明显规范了很多，它<strong>拥有自己的一套模板语法规则</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script id=<span class="hljs-string">&quot;abc&quot;</span> type=<span class="hljs-string">&quot;text/html&quot;</span>&gt;<br>&#123;&#123;<span class="hljs-keyword">if</span> isAdmin&#125;&#125;<br>&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">&#123;&#123;each list as value i&#125;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">&#123;&#123;/each&#125;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&#123;&#123;/<span class="hljs-keyword">if</span>&#125;&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>优点：</strong>大家都遵循同样的规则写代码，代码可读性明显提高了，方便后期的维护。</p><p><strong>缺点：</strong>没有专门提供事件机制。</p><h4 id="2-3-使用vue特有的模板语法（重点）"><a href="#2-3-使用vue特有的模板语法（重点）" class="headerlink" title="2.3 使用vue特有的模板语法（重点）"></a>2.3 使用vue特有的模板语法（重点）</h4><ul><li><p><strong>Vue基础指令：</strong></p><ul><li><p>差值表达式</p></li><li><p>指令</p></li><li><p>事件绑定</p></li><li><p>属性绑定 </p></li><li><p>样式绑定 </p></li><li><p>分支循环结构</p></li></ul></li></ul><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><h3 id="一、内容渲染指令"><a href="#一、内容渲染指令" class="headerlink" title="一、内容渲染指令"></a>一、内容渲染指令</h3><h3 id="1-1-插值表达式（mustache语法）"><a href="#1-1-插值表达式（mustache语法）" class="headerlink" title="1.1 插值表达式（mustache语法）"></a>1.1 插值表达式（mustache语法）</h3><p>内容渲染指令就是插值操作，如何将data中的文本数据，插入到HTML中呢？<strong>插值表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">可以通过Mustache语法（也就是 双大括号&#123;&#123;&#125;&#125;），也叫做插值表达式<br></code></pre></td></tr></table></figure><p>1.双括号里面是<strong>变量</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3d0633a773f0a48c160253026d62ba09.png"></p><p>2.双括号里面是<strong>表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message+site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">site</span>: <span class="hljs-string">&#x27;www.newmood.top&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/272f13f0e34c7a6a7afa3fb5597f6c16.png"></p><p>3.双括号里面<strong>表达式加空格或者字符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message+ &#x27;空格或者字符&#x27; + site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">site</span>: <span class="hljs-string">&#x27;www.newmood.top&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a0a4b84ee301f7c38fc4312cba34b031.png"></p><p>4.<strong>双括号后加双括号</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125; &#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">site</span>: <span class="hljs-string">&#x27;www.newmood.top&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/164cf3a7b19cf2d225677eb1c9057d38.png"></p><p>5.双括号后<strong>跟字符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;,生命里那束光<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">site</span>: <span class="hljs-string">&#x27;www.newmood.top&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/48d2e9c9ffdaa744b6800328a6c58d03.png"></p><p>6.双括号只能写在标签内部,不能写在标签属性里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  &lt;!-- <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> &#123;&#123;<span class="hljs-attr">message</span>&#125;&#125;&gt;</span> &#123;&#123;message&#125;&#125;,生命里那束光 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span> 报错--&gt; <br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>7.双括号里面还能进行变量计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>计算&#123;&#123;count * 2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/cdc64462a1e4448841d4ce8f076c4f08.png"></p><h3 id="1-2-v-once"><a href="#1-2-v-once" class="headerlink" title="1.2 v-once"></a>1.2 v-once</h3><p>我们有时候希望展示的部分数据不会随着Vue的响应式而发生变化，要怎么做呢？先来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>会变化&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>不会变化&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/5834abcf90a537a2fb002ce0ee8c4833.png"></p><p>我们在Console控制台修改 <code>app.messgae=&quot;Vue3&quot;</code>，会发现message都发生了变化</p><p><img src="https://img-blog.csdnimg.cn/img_convert/57faa40cfdbb794859da620e7437052b.png"></p><p>要想第二个message不发生变化，我们给第二个h1标签添加<code>v-once</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>会变化&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-once</span>&gt;</span>不会变化&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/dbd2146c3affe05ee2d069c476a24554.png"></p><blockquote><p>注意：</p><p>1.<code>v-once</code>指令后面不需要跟任何表达式</p><p>2.<code>v-once</code>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变</p></blockquote><h3 id="1-3-v-text"><a href="#1-3-v-text" class="headerlink" title="1.3 v-text"></a>1.3 v-text</h3><p><code>v-text</code> 作用和 <code>插值表达式</code> 比较相似：都是用于将数据显示在界面中</p><ul><li><code>v-text</code> 是放在标签属性中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/720ac92aa0d9c05b98cba4e7e5c5c8bd.png"></p><ul><li>对于v-text和插值表达式语法，我们更推荐使用<strong>插值表达式</strong>语法。</li></ul><blockquote><p>注意：v-text 指令会覆盖元素内默认的值。</p></blockquote><h3 id="1-4-v-html"><a href="#1-4-v-html" class="headerlink" title="1.4 v-html"></a>1.4 v-html</h3><p>某些情况下，我们从服务器请求到的数据本身就是一个HTML代码</p><ul><li><p>如果我们直接通过<strong>插值表达式</strong> 来输出，会将HTML代码也一起输出</p></li><li><p>但是我们希望是按照HTML格式进行解析，并且显示对应的内容</p></li></ul><p>如果我们希望解析出HTML展示</p><ul><li>可以使用v-html指令</li><li>该指令后面往往会跟上一个string类型</li><li>会将string的html解析出来并且进行渲染</li></ul><p>我们来看一个插值表达式例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;site&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3！&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">site</span>: <span class="hljs-string">&#x27;&lt;a href=&quot;www.newmood.top&quot;&gt;那束光の博客&lt;/a&gt;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/037aed6df4488a8bd6a3d6027c51306a.png"></p><ul><li>有时候服务器给客户端返回的数据是带标签的数据，我们客户端拿到之后解析肯定不能如上图那样直接使用 mustache 语法，我们要对其进行处理</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/7fd49bd43cb50f9588e74d460034935a.png"></p><h3 id="1-5-v-pre"><a href="#1-5-v-pre" class="headerlink" title="1.5 v-pre"></a>1.5 v-pre</h3><p>该指令的作用是用于跳过这个元素和它子元素的编译过程，用于显示原本的 Mustache 语法</p><p>一般我们的mustache语法会去data里面找对应的变量然后解析，可是如果我们就想让其显示为 <code>&#123;&#123;message&#125;&#125;</code> ，这个时候需要加 <code>v-pre</code> 属性，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3！&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/adf4b410743e03c0d8c00ab818bfe70c.png"></p><p>我们给标签增加 <code>v-pre</code> 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e557676caae7d332d525d9a5d94193d9.png"></p><h3 id="1-6-v-cloak"><a href="#1-6-v-cloak" class="headerlink" title="1.6 v-cloak"></a>1.6 v-cloak</h3><p>在实际开发中，我们data里面的数据可能是从服务器端获取来的，如果网络不好获取的比较慢，浏览器可能会直接显示出未编译的Mustache标签。那么页面在渲染时可能会先显示  之后变为 你好Vue3！。这种效果不是我们想要的，我们可以给标签添加 v-cloak 来避免这种效果。</p><p>解决办法：</p><ul><li>加上v-clock 属性,并加上css。</li><li>vue解析之前有 v-clock 属性时，让其不显示</li><li>Vue解析之后没有v-clock 属性，再让其显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;style&gt;<br>    [v-cloak] &#123;<br>      <span class="hljs-attr">display</span>: none;<br>    &#125;<br>&lt;/style&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 在vue解析之前, div中有一个属性v-cloak</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 在vue解析之后, div中没有一个属性v-cloak</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="二、属性绑定指令"><a href="#二、属性绑定指令" class="headerlink" title="二、属性绑定指令"></a>二、属性绑定指令</h3><h3 id="2-1-v-bind"><a href="#2-1-v-bind" class="headerlink" title="2.1 v-bind"></a>2.1 v-bind</h3><p>前面的指令主要作用是将值插入到我们的模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。</p><ul><li>比如动态绑定a元素的 href 属性</li><li>比如动态绑定img元素的 src 属性</li></ul><p><strong>绑定 href、src 用法</strong></p><p>在实际开发中，照片img的url值可能也是由服务器端获取，a标签的href值可能也是由服务器端获取的，那么我们如何动态绑定呢？例如我们看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3！&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ffcc00ae379e187709219369fd97f483.png"></p><ul><li>如上图，我们给a标签的href是不能直接写url的，因为它不会解析。这个时候就需要给href前添加<code>v-bind</code>指令了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fbb64cfd47611859fdaf6ab0b7b859cd.png"></p><p><strong>语法糖写法如下</strong>： <code>:href=&quot;url&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="三、样式绑定指令"><a href="#三、样式绑定指令" class="headerlink" title="三、样式绑定指令"></a>三、样式绑定指令</h3><h3 id="3-1-class样式处理"><a href="#3-1-class样式处理" class="headerlink" title="3.1 class样式处理"></a><strong>3.1 class样式处理</strong></h3><ul><li>对象语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-attr">bind</span>:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li>数组语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-attr">bind</span>:<span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;[activeClass, errorClass]&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>样式绑定相关语法细节：</strong></p><p>1.对象绑定和数组绑定可以结合使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-attr">bind</span>:<span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;[activeClass, errorClass, &#123;test: isTest&#125;]&#x27;</span>&gt;测试样式&lt;/div&gt;<br><br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">activeClass</span>: <span class="hljs-string">&#x27;active&#x27;</span>,<br><span class="hljs-attr">errorClass</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br><span class="hljs-attr">isTest</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.class绑定的值可以简化处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-attr">bind</span>:<span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;arrClasses&#x27;</span>&gt;测试样式&lt;/div&gt;<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">arrClasses</span>: [<span class="hljs-string">&#x27;active&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>3.默认的class会保留（base）</p><p>  <img src="https://img-blog.csdnimg.cn/img_convert/c8b4ca22bd2a71db44b89129a42a95c4.png"></p><h3 id="3-2-style样式处理"><a href="#3-2-style样式处理" class="headerlink" title="3.2 style样式处理"></a><strong>3.2 style样式处理</strong></h3><ul><li>对象语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-attr">bind</span>:style=<span class="hljs-string">&quot;&#123; color: activeColor, fontSize: fontSize &#125;&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li>数组语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-attr">bind</span>:style=<span class="hljs-string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h3 id="四、事件监听指令"><a href="#四、事件监听指令" class="headerlink" title="四、事件监听指令"></a>四、事件监听指令</h3><h3 id="4-1-v-on"><a href="#4-1-v-on" class="headerlink" title="4.1 v-on"></a>4.1 v-on</h3><p><strong>1.Vue如何处理事件？</strong></p><ul><li>v-on指令用法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=‘button<span class="hljs-string">&#x27; v-on:click=&#x27;</span>num++<span class="hljs-string">&#x27;/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>v-on简写形式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=‘button<span class="hljs-string">&#x27; @click=&#x27;</span>num++<span class="hljs-string">&#x27;/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.事件函数的调用方式</strong></p><ul><li>直接绑定函数名称</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&#x27;say&#x27;</span>&gt;<span class="hljs-title class_">Hello</span>&lt;/button&gt;<br></code></pre></td></tr></table></figure><ul><li>调用函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&#x27;say()&#x27;</span>&gt;<span class="hljs-title class_">Say</span> hi&lt;/button&gt;<br></code></pre></td></tr></table></figure><p><strong>3.事件函数参数传递</strong></p><ul><li>普通参数和事件对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button v-<span class="hljs-attr">on</span>:click=<span class="hljs-string">&#x27;say(&quot;hi&quot;,$event)&#x27;</span>&gt;<span class="hljs-title class_">Say</span> hi&lt;/button&gt;<br></code></pre></td></tr></table></figure><h3 id="4-2-v-on修饰符"><a href="#4-2-v-on修饰符" class="headerlink" title="4.2 v-on修饰符"></a>4.2 v-on修饰符</h3><p><strong>4.事件修饰符</strong></p><ul><li>.stop 阻止冒泡</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a v-<span class="hljs-attr">on</span>:click.<span class="hljs-property">stop</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;跳转&lt;/a&gt;<br></code></pre></td></tr></table></figure><ul><li>.prevent 阻止默认行为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a v-<span class="hljs-attr">on</span>:click.<span class="hljs-property">prevent</span>=<span class="hljs-string">&quot;handle&quot;</span>&gt;跳转&lt;/a&gt;<br></code></pre></td></tr></table></figure><p><strong>5.按键修饰符</strong></p><ul><li>.enter 回车键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;input v-on:keyup.enter=&#x27;submit&#x27;&gt;<br></code></pre></td></tr></table></figure><ul><li>.esc 退出键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;input v-on:keyup.delete=&#x27;handle&#x27;&gt;<br></code></pre></td></tr></table></figure><p><strong>6.自定义按键修饰符</strong></p><ul><li>全局 config.keyCodes 对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Vue.config.keyCodes.f1 = 112<br></code></pre></td></tr></table></figure><h3 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h3><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code></li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code></li><li><code>.&#123;keyCode|keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调</li><li><code>.once</code> - 只触发一次回调</li></ul><h3 id="五、条件渲染指令（分支结构）"><a href="#五、条件渲染指令（分支结构）" class="headerlink" title="五、条件渲染指令（分支结构）"></a>五、条件渲染指令（分支结构）</h3><p><strong>条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏 。</strong></p><p>v - if<code>、</code>v-else-if<code>、</code>v-else</p><ul><li>这三个指令与JavaScript的条件语句 if、else、else if 类似</li><li>Vue 的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><h3 id="5-1-v-if"><a href="#5-1-v-if" class="headerlink" title="5.1 v-if"></a>5.1 v-if</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>今天要下雨<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>今天不要下雨<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>&lt;/div&gt;<br><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><code>v-if</code>的原理：</p><ul><li><code>v-if</code> 后面的条件为 false时，对应的元素以及子元素不会渲染</li><li>也就是根本没有对应的标签出现在DOM中</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/56f1f8a6bfdee79dad6339d62dd9c671.png"></p><h3 id="5-2-v-if、v-else-if、v-else"><a href="#5-2-v-if、v-else-if、v-else" class="headerlink" title="5.2 v-if、v-else-if、v-else"></a>5.2 v-if、v-else-if、v-else</h3><p>我们一般不会使用 v-else-if，因为这样的代码不美观，我们一般想要切换的话使用如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>今天要下雨<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>今天不要下雨<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/8e35446acdfbbca2d37e5526465310de.png"></p><h3 id="5-3-v-show"><a href="#5-3-v-show" class="headerlink" title="5.3 v-show"></a>5.3 v-show</h3><p><code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染：</p><ul><li><code>v-if</code> 指令会 动态地创建或移除 DOM 元素 ，从而控制元素在页面上的显示与隐藏</li><li><code>v-show</code> 指令会动态为元素 添加或移除 <strong>style=“display: none;”</strong> 样式 ，从而控制元素的显示与隐藏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;flag&quot;</span>&gt;</span>今天要下雨<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;!flag&quot;</span>&gt;</span>今天不要下雨<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">flag</span>: <span class="hljs-literal">true</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-title function_">toggle</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">flag</span>;</span></span><br><span class="language-javascript"><span class="language-xml">       &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3b7ec25128aa61fc8551592beec62858.png"></p><h3 id="5-4-v-if与v-show的区别"><a href="#5-4-v-if与v-show的区别" class="headerlink" title="5.4 v-if与v-show的区别"></a><strong>5.4 v-if与v-show的区别</strong></h3><ul><li>v-if控制元素是否渲染到页面（是否创建）</li><li>v-show控制元素是否显示（已经创建，是否显示）</li></ul><blockquote><p>开发中如何选择呢？</p></blockquote><p>1.当需要在显示与隐藏之间切片很频繁时，使用 <code>v-show</code><br>2.当只有一次切换时，通过 <code>v-if</code></p><h3 id="六、列表渲染指令（循环结构）"><a href="#六、列表渲染指令（循环结构）" class="headerlink" title="六、列表渲染指令（循环结构）"></a>六、列表渲染指令（循环结构）</h3><h3 id="6-1-v-for-遍历数组"><a href="#6-1-v-for-遍历数组" class="headerlink" title="6.1 v-for(遍历数组)"></a><strong>6.1 v-for</strong>(遍历数组)</h3><ul><li><strong>遍历数组</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//语法1</span><br>&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;item in list&#x27;</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;<br><span class="hljs-comment">//语法2</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item,index) in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125; + &#x27;---&#x27; +&#123;&#123;index&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;水果列表&lt;/div&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;item.id&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(item, index) in myFruits&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.ename&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>-----<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item.cname&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">fruits</span>: [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>],<br>        <span class="hljs-attr">myFruits</span>: [&#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">ename</span>: <span class="hljs-string">&#x27;apple&#x27;</span>,<br>          <span class="hljs-attr">cname</span>: <span class="hljs-string">&#x27;苹果&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">ename</span>: <span class="hljs-string">&#x27;orange&#x27;</span>,<br>          <span class="hljs-attr">cname</span>: <span class="hljs-string">&#x27;橘子&#x27;</span><br>        &#125;, &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>          <span class="hljs-attr">ename</span>: <span class="hljs-string">&#x27;banana&#x27;</span>,<br>          <span class="hljs-attr">cname</span>: <span class="hljs-string">&#x27;香蕉&#x27;</span><br>        &#125;]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f5d52300c361e1855bcba213b69b2e42.png"></p><h3 id="6-2-组件的key属性"><a href="#6-2-组件的key属性" class="headerlink" title="6.2 组件的key属性"></a>6.2 组件的key属性</h3><ul><li><p>官方推荐我们在使用 v-for时，给对应的元素或组件加上一个 :key属性，<strong>key的作用主要是为了高效的更新虚拟DOM</strong></p></li><li><p>当<strong>列表的数据变化</strong>时，默认情况下， vue 会<strong>尽可能的复用</strong>已存在的 DOM 元素，从而<strong>提升渲染的性能</strong> 。</p></li><li><p>但这种默认的性能优化策略，会导致<strong>有状态的列表无法被正确更新</strong> 。为了给 vue 一个提示，以便它能跟踪每个节点的身份， 从而在保证<strong>有状态的列表被正确更新</strong>的前提下， <strong>提升渲染的性能</strong> 。此时，需要为每项提供一个<strong>唯一的 key 属性</strong></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in myFruits&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><blockquote><p>key的注意事项</p></blockquote><ul><li>key 的值只能是字符串或数字类型</li><li>key 的值必须具有唯一性(即：key 的值不能重复)</li><li>建议把 数据项 id 属性的值 作为 key 的值（因为 id 属性的值具有唯一性)</li><li>使用 index 的值当作 key 的值没有任何意义(因为 index 的值不具有唯一性)</li><li>建议使用 v-for 指令时一定要指定 key 的值(既提升性能、又防止列表状态紊乱)</li></ul><h4 id="不绑定key的后果"><a href="#不绑定key的后果" class="headerlink" title="不绑定key的后果:"></a>不绑定key的后果:</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/e3d74a564dd825205ac2b1867cd09a00.png"></p><ul><li>向数组添加数据</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/c724c94582f18c75b052109b2c66c23d.png"></p><blockquote><p>上面就是由于没有加 <code>:key</code> 属性造成的Bug，所以官方也建议我们在使用 v-for 指令时最好要加上 <code>:key</code> 属性</p></blockquote><h3 id="6-3-v-for-遍历对象"><a href="#6-3-v-for-遍历对象" class="headerlink" title="6.3 v-for(遍历对象)"></a>6.3 v-for(遍历对象)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;(value, key, index) in object&#x27;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="v-if和v-for结合使用"><a href="#v-if和v-for结合使用" class="headerlink" title="v-if和v-for结合使用"></a>v-if和v-for结合使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&#x27;value==12&#x27;</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;(value, key, index) in object&#x27;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//v-if判断值为13的记录,进行输出  v-for对obj里面的属性进行遍历</span><br>&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;v==13&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(v,k,i) in obj&#x27;</span>&gt;</span>&#123;&#123;v + &#x27;---&#x27; + k + &#x27;---&#x27; + i&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="hljs-comment">//定义的对象</span><br><span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">obj</span>: &#123;<br>          <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>,<br>          <span class="hljs-attr">age</span>: <span class="hljs-number">13</span>,<br>          <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;female&#x27;</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2f230a67e28f21523103322018ffae87.png"></p><h3 id="七、双向绑定指令"><a href="#七、双向绑定指令" class="headerlink" title="七、双向绑定指令"></a>七、双向绑定指令</h3><h3 id="7-1-v-model"><a href="#7-1-v-model" class="headerlink" title="7.1 v-model"></a>7.1 v-model</h3><ul><li>双向绑定指令也叫表单元素绑定，vue提供了 <code>v-model</code> 双向数据绑定 指令，用来辅助开发者在 不操作 DOM 的前提下， 快速获取表单的数据。</li><li>vue中使用 <code>v-model</code> 指令来实现表单元素和数据的<strong>双向绑定</strong>，经常用于表单 input 和 textarea 元素。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好Vue3!&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f8d9e18a1113cab7b74a40294b51e47a.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1463037904ec37fdec51bb23227bf4e5.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e00f239a733521741e2f5f5bdab2fcb9.png"></p><p><strong>理解双向绑定：</strong></p><ul><li>我们来看上述代码，当我们在输入框输入内容时</li><li>因为 input 中的 v-model 绑定了message，所以会实时的将输入的内容传递给 message，message发生改变。</li><li>当message 发生改变时，因为上面我们使用 Mustache 语法，将 message 的值插入到 DOM 中，所以 DOM 会发生响应的改变。</li><li>所以，通过 v-model 实现了 双向的绑定</li></ul><h3 id="7-2-v-model底层原理实现"><a href="#7-2-v-model底层原理实现" class="headerlink" title="7.2 v-model底层原理实现"></a>7.2 v-model底层原理实现</h3><p><code>v-model</code> 其实是一个语法糖，它的背后本质上是包含两个操作：</p><ul><li><code>v-bind</code> 绑定一个 value 属性</li><li><code>v-on</code> 指令给当前元素绑定 input 事件</li></ul><p>也就是说下面的代码，等同于下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;message&quot;</span>&gt;<br>&lt;!-- 等同于 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;message = $event.target.value&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="7-3-dom类型与-v-model"><a href="#7-3-dom类型与-v-model" class="headerlink" title="7.3 dom类型与 v-model"></a>7.3 dom类型与 v-model</h3><h4 id="v-model-radio-单选框"><a href="#v-model-radio-单选框" class="headerlink" title="v-model:radio(单选框)"></a>v-model:radio(单选框)</h4><p>使得单选框只能选一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>选择的性别是:&#123;&#123;sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/4511837ae8fa0ebc0fb8cf465893cd91.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a61a3ad2ce4a67714f1ea492dee9591f.png"></p><h4 id="v-model：checkbox-单-多勾选框"><a href="#v-model：checkbox-单-多勾选框" class="headerlink" title="v-model：checkbox(单/多勾选框)"></a>v-model：checkbox(单/多勾选框)</h4><p>复选框分为两种情况：<strong>单个勾选框</strong>和<strong>多个勾选框</strong></p><blockquote><p>单个勾选框</p></blockquote><ul><li><code>v-moduel</code> 即为布尔值</li><li>此时 input 的 value 并不影响<code>v-model</code>的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>  <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;isAgree&quot;</span>&gt;</span>同意会员协议<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>是否同意协议：&#123;&#123;isAgree ? &#x27;同意&#x27; : &#x27;不同意&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">isAgree</span>: <span class="hljs-string">&#x27;false&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ad233c98e1d121ec44c5976aa71f62d8.png"></p><blockquote><p>多个复选框</p></blockquote><ul><li>当是多个复选框时，因为可以选中多个，所以对应的 data 中属性是一个数组</li><li>当选中某一个时，就会将 input 的 value 添加到数组中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  &lt;div id=&quot;app&quot;&gt;<br>    &lt;input type=&quot;checkbox&quot; value=&quot;篮球&quot; v-model=&quot;hobbies&quot;&gt;篮球<br>    &lt;input type=&quot;checkbox&quot; value=&quot;足球&quot; v-model=&quot;hobbies&quot;&gt;足球<br>    &lt;input type=&quot;checkbox&quot; value=&quot;乒乓球&quot; v-model=&quot;hobbies&quot;&gt;乒乓球<br>    &lt;input type=&quot;checkbox&quot; value=&quot;羽毛球&quot; v-model=&quot;hobbies&quot;&gt;羽毛球<br>    &lt;h2&gt;您的爱好是: &#123;&#123;hobbies&#125;&#125;&lt;/h2&gt;<br>  &lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;<br>&lt;script&gt;<br>     const app = Vue.createApp(&#123;<br>      data()&#123;<br>        return &#123;<br>          hobbies: [], // 多选框,<br>        &#125;<br>      &#125;<br>     &#125;).mount(&#x27;#app&#x27;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/dbd1cea4b1c13de3312a7149216bfed3.png"></p><h4 id="v-model-select（单选-多选下拉表单）"><a href="#v-model-select（单选-多选下拉表单）" class="headerlink" title="v-model:select（单选/多选下拉表单）"></a>v-model:select（单选/多选下拉表单）</h4><p>和 checkbox 一样，select 也分单选和多选两种情况</p><blockquote><p>单选：只能选中一个值</p></blockquote><ul><li><code>v-model</code> 绑定的是一个值</li><li>当我们选中 option 中的一个时，会将它对应的 vaule 赋值到 city 中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>选择所在的城市:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;city&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;天津&quot;</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>选择的城市是:&#123;&#123;city&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;上海&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a358325ebb461d54ca04777008e0ccbb.png"></p><blockquote><p>多选：可以选中多个值</p></blockquote><ul><li><code>v-model</code> 绑定的是一个数组</li><li>当选中多个值时，就会将选中的 option 对应的 value 添加到数组 mySelects中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>选择所在的城市:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cities&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;cities&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;北京&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;天津&quot;</span>&gt;</span>天津<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>选择的城市是:&#123;&#123;cities&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">// 1.创建Vue的实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">const</span> app = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">createApp</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">cities</span>: []</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">     &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c61b6cfc89db006211c0117ae5f01e15.png"></p><h3 id="7-4-v-model修饰符"><a href="#7-4-v-model修饰符" class="headerlink" title="7.4 v-model修饰符"></a>7.4 v-model修饰符</h3><p>为了方便对用户输入的内容进行处理，vue 为 v-model 指令提供了 3 个修饰符</p><table><thead><tr><th>修饰符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>.number</td><td>自动将用户的输入值转化为数值类型</td><td><code>&lt;input v-model.number = &quot;age&quot; /&gt;</code></td></tr><tr><td>.trim</td><td>自动过滤用户输入的首尾空白字符</td><td><code>&lt;input v-module.trim = &quot;msg&quot; /&gt;</code></td></tr><tr><td>.lazy</td><td>在 <code>change</code> 时而非 <code>input</code> 时更新(失去焦点或回车时)</td><td><code>&lt;input v-model.lazy = &quot;msg&quot; /&gt;</code></td></tr></tbody></table><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue基础指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“个人简介”</title>
      <link href="/2022/03/01/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/03/01/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="何须浅碧深红色，自是花中第一流。"><a href="#何须浅碧深红色，自是花中第一流。" class="headerlink" title="何须浅碧深红色，自是花中第一流。"></a><em>何须浅碧深红色</em>，<em>自是花中第一流</em>。</h4><span id="more"></span><p>零壹年春,生于南方,22年努力闭关ing.</p><p>大三计算机专业在读书。</p><h6 id="我有许多热爱的事情："><a href="#我有许多热爱的事情：" class="headerlink" title="我有许多热爱的事情："></a>我有许多热爱的事情：</h6><blockquote><p><strong>喜欢音乐</strong>。无论宫崎骏电影里的纯音乐，还是电子合成音乐，或是古典乐，我都热爱。还有蒸汽波、动漫的主题曲、电影的主题曲，或者是民谣、摇滚。</p><p><strong>喜欢摄影</strong>，热衷大疆，着迷无人机。</p><p><strong>喜欢动漫</strong>，国漫，日漫 都爱。</p><p><strong>热爱艺术</strong>，也<strong>热爱旅行</strong>、看展，更<strong>热爱生命</strong>。</p><p>我有太多向往的事情想要去实现，诸如跳伞，滑雪，潜水，川藏自驾等等。</p></blockquote><h4 id="📞-联系方式"><a href="#📞-联系方式" class="headerlink" title="📞 联系方式"></a>📞 联系方式</h4><ul><li>WeChat:13099462370</li><li>QQ: 2578657473</li><li>社交平台：<ul><li><a href="https://space.bilibili.com/480369104?spm_id_from=333.1007.0.0">哔哩哔哩</a></li><li>微博</li><li>简书</li><li>CSDN</li><li>掘金</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“Git和GitHub”</title>
      <link href="/2022/03/01/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92Git%E5%92%8CGitHub/"/>
      <url>/2022/03/01/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92Git%E5%92%8CGitHub/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="git是什么？github又是什么"><a href="#git是什么？github又是什么" class="headerlink" title="git是什么？github又是什么?"></a>git是什么？github又是什么?</h4><ul><li>git 是版本控制软件，目前最先进最流行的。</li><li>github 是一个网站，用于广大开发者开源自己的代码，也提供私有仓库的付费功能，而它采用的版本控制软件就是git。</li></ul><span id="more"></span><h1 id="前后端交互：Git和GitHub"><a href="#前后端交互：Git和GitHub" class="headerlink" title="前后端交互：Git和GitHub"></a><strong>前后端交互：Git和GitHub</strong></h1><h2 id="1-Git基础"><a href="#1-Git基础" class="headerlink" title="1. Git基础"></a><strong>1. Git基础</strong></h2><h3 id="1-1-版本管理"><a href="#1-1-版本管理" class="headerlink" title="1.1 版本管理"></a>1.1 版本管理</h3><h4 id="1-1-1-什么是版本管理"><a href="#1-1-1-什么是版本管理" class="headerlink" title="1.1.1 什么是版本管理"></a>1.1.1 什么是版本管理</h4><p>版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\01.png"></p><h4 id="1-1-2-人为维护文档版本的问题"><a href="#1-1-2-人为维护文档版本的问题" class="headerlink" title="1.1.2 人为维护文档版本的问题"></a>1.1.2 人为维护文档版本的问题</h4><ol><li><p>文档数量多且命名不清晰导致文档版本混乱</p></li><li><p>每次编辑文档需要复制，不方便</p></li><li><p>多人同时编辑同一个文档，容易产生覆盖</p></li></ol><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\04.png"></p><h4 id="1-1-3-版本控制"><a href="#1-1-3-版本控制" class="headerlink" title="1.1.3 版本控制"></a>1.1.3 版本控制</h4><ul><li>版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。</li><li>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换</li></ul><h4 id="1-1-4-版本控制工具"><a href="#1-1-4-版本控制工具" class="headerlink" title="1.1.4 版本控制工具"></a>1.1.4 版本控制工具</h4><p>版本控制工具分为==<strong>集中式版本控制工具</strong>==与==<strong>分布式版本控制工具</strong>==</p><ul><li> 集中式版本控制工具</li><li>CVS、SVN、VSS</li><li>集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。</li><li>这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</li><li>事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</li></ul> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/56049f78129a437fb83de5e08aef2759.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"><ul><li><p>分布式版本控制工具</p><ul><li>Git、Mercurial、…</li><li>像Git这种分布式版本控制工具 ，客户端提取的不 最新版本的文件快照，而是把代码仓库完整地镜像下来 (本地库) 。这 样 任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行 恢复。因为每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份 。</li></ul></li><li><p>分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷 :</p><ul><li>服务器断网的情况下也可以进行开发，因为版本控制是在本地进行的</li><li>每个客户端保存的也都是整个完整的项目 ，包含历史记录 更加安全</li></ul></li></ul> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/d6fa284caaa54d4bb3ee254054c57a29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"><h3 id="1-2-Git-是什么"><a href="#1-2-Git-是什么" class="headerlink" title="1.2 Git 是什么"></a>1.2 Git 是什么</h3><ul><li><p>Git是一个==版本管理控制系统==（缩写VCS），它可以在任何时间点，==<strong>将文档的状态作为更新记录保存</strong>==起来，也可以在任何时间点，将更新记录恢复回来。</p></li><li><p>Git是一个免费的、开源的分布式版本控制系统 ，可以快速高效地处理从小型到大型的各种项目</p></li><li><p>Git易于学习，占地面积小，性能 极快 。 它具有廉价的本地 库 ，方便的暂存区域和多个工作<br>流分支等特性。 其性能优于 Subversion、 CVS、 Perforce和 ClearCase等 版本控制 工具。</p></li></ul><p><img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\19.png"></p><h3 id="1-3-Git-安装"><a href="#1-3-Git-安装" class="headerlink" title="1.3 Git 安装"></a>1.3 Git 安装</h3><ul><li>官网地址：<a href="http://git-scm.com/">http://git-scm.com/</a></li><li><strong>==在安装的过程中，所有选项使用默认值即可。==</strong></li></ul><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/5e2cbec6c6bd4eaa9c757e31172de0ac.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"><p><strong>==详细步骤：==</strong></p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/71fc6c6b43514c5b81f17861c683afea.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>1.最好安装在自己电脑开发或者环境目录下</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/7d98a73b534543959ca0cefc9e35ad0e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>2.Git安装目录名，不用修改，直接点击下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/5acbef64922c43cd80f60f801c380023.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>3.Git的默认编辑器，建议使用默认的 Vim编辑器，然后点击下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/8c3f930fd70d4b809e730383c1008172.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>4.默认分支名设置，选择让Git决定，分支名默认为 master，下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/d9f66ca52e8c48f99c92fcf0648e857f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>5.修改Git的环境变量，选第一个，不修改环境变量，只在 Git Bash里使用 Git。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/4530363936134add9cbb3fec9bb8a405.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>6.选择后台客户端连接协议，选默认值OpenSSL，然后下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/22743fac4c1741afa82404d435faaffe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>7.配置Git文件的行末换行符， Windows使用 CRLF Linux使用 LF，选择第一个自动转换，然后继续下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/83cc5c62bc9a4e208e550e81504e6485.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>8.选择Git终端类型，选择默认的 Git Bash终端，然后继续下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/0a7628f37cdf4557b6e31b9ce8335fb6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>9.选择Git pull合并的模式，选择默认，然后下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/dc2698bb35e24403b4c225a357f0c7b9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>10.选择Git的凭据管理器，选择默认 的跨平台的凭据管理器 ，然后下一步 。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/11679e46f2854007b0846a795f26330f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>11.其他配置，选择默认设置，然后下一步。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/e57120cec24c46578384ec671203c376.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>12.实验室功能，技术还不成熟， 有已知的 bug，不要勾选，然后点击右下角的 Install按钮，开始安装 Git</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/14e1b5f3508f42908254788198296e2a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>13.点击Finsh按钮， Git安装成功！</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/3f29b6a8fd4f4a8f9cb6ad8fc7738277.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>14.右键任意位置，在右键菜单里选择Git Bash Here即可打开 Git Bash命令行终端。在Git Bash终端里输入 <code>git --version</code>查看 git版本，如图所示，说明 Git安装成功。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220302171558260.png" alt="image-20220302171558260" class="lazyload"></p><h4 id="Git和代码托管中心"><a href="#Git和代码托管中心" class="headerlink" title="Git和代码托管中心"></a>Git和代码托管中心</h4><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为==远程库==</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220302171014877.png" alt="image-20220302171014877" class="lazyload"></p><h3 id="1-4-Git-基本工作流程"><a href="#1-4-Git-基本工作流程" class="headerlink" title="1.4 Git 基本工作流程"></a>1.4 Git 基本工作流程</h3><table><thead><tr><th>git仓库</th><th>暂存区</th><th>工作目录</th></tr></thead><tbody><tr><td>用于存放提交记录</td><td>临时存放被修改文件</td><td>被Git管理的项目目录</td></tr></tbody></table><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\05.png"></p><h3 id="1-5-Git-常用命令"><a href="#1-5-Git-常用命令" class="headerlink" title="==1.5 Git 常用命令=="></a><strong>==1.5 Git 常用命令==</strong></h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td><strong>git init</strong></td><td><strong>初始化本地库</strong></td></tr><tr><td><strong>git status</strong></td><td><strong>查看本地库状态</strong></td></tr><tr><td><strong>git add 文件名</strong></td><td><strong>添加到暂存区</strong></td></tr><tr><td><strong>git commit m “ 日志信息 “ 文件名</strong></td><td><strong>提交到本地库</strong></td></tr><tr><td><strong>git reflog</strong></td><td><strong>查看历史记录</strong></td></tr><tr><td><strong>git reset hard 版本号</strong></td><td><strong>版本穿梭</strong></td></tr></tbody></table><h4 id="1、Git-使用前配置：设置用户签名"><a href="#1、Git-使用前配置：设置用户签名" class="headerlink" title="1、Git 使用前配置：设置用户签名"></a>1、Git 使用前配置：设置用户签名</h4><p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p><p>基本语法：</p><ol><li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li><li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li><li>查看git配置信息：<code>git config --list</code>   </li></ol><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220302172707513.png" alt="image-20220302172707513" class="lazyload"></p><p>并且在自己 <code>C:\Users\Augenestern</code> 下有个 <code>.gitconfig</code> 文件，打开里面就是我们设置的用户签名。</p><p><strong>注意</strong></p><ol><li>如果要对配置信息进行修改，重复上述命令即可。</li><li>配置只需要执行一次。</li><li>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git首次安装必须设置一下用户签名，否则无法提交代码。</li><li>这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系。</li></ol><h4 id="2、-初始化本地库（git-init"><a href="#2、-初始化本地库（git-init" class="headerlink" title="==2、====初始化本地库（git init)=="></a>==2、====初始化本地库（git init)==</h4><p>基本语法：<code>git init</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220302173015077.png" alt="image-20220302173015077" class="lazyload"></p><h4 id="3、-查看本地库状态-git-status"><a href="#3、-查看本地库状态-git-status" class="headerlink" title="==3、====查看本地库状态(git status)=="></a>==3、====查看本地库状态(git status)==</h4><p>基本语法：<code>git status</code></p><ul><li>首次查看，工作区没有任何文件</li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220302173045195.png" alt="image-20220302173045195" class="lazyload"></p><h5 id="3-1、新增文件"><a href="#3-1、新增文件" class="headerlink" title="3.1、新增文件"></a>3.1、新增文件</h5><p>语法：<code>vim hello.txt</code> ,然后按 i 键进入 INSERT，要想复制粘贴 ，需要先按 esc 键，之后 <code>yy</code> 复制，<code>p</code> 粘贴</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220302173204819.png" alt="image-20220302173204819" class="lazyload"></p><p>文件内容输入完毕，需要先按<code>:</code>,输入<code>wq</code>，然后才算完成新增文件，再次查看</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/e0c072a3c5124796a758a01f6194e586.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="4、-添加暂存区-git-add-文件名"><a href="#4、-添加暂存区-git-add-文件名" class="headerlink" title="==4、====添加暂存区(git add 文件名)=="></a>==4、====添加暂存区(git add 文件名)==</h4><p><strong>基本语法：<code>单个文件 git add 文件名</code>  全部文件git add .</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/aa86b5ca829b493abcdd4c068036e783.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="5、-提交本地库（git-commit-m-提交信息）"><a href="#5、-提交本地库（git-commit-m-提交信息）" class="headerlink" title="==5、====提交本地库（git commit -m 提交信息）=="></a>==5、====提交本地库（git commit -m 提交信息）==</h4><p>基本语法：<code>git commit -m &quot;日志信息&quot; 文件名</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/3cc8464925aa49d4bd286af91d50978c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="6、修改文件"><a href="#6、修改文件" class="headerlink" title="6、修改文件"></a>6、修改文件</h4><p>语法：<code>vim 文件名</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/a764baa720854fd7a1cdaf636eb4bc87.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/a017a4930fba4b00a6e3604147779fc7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="7、历史版本"><a href="#7、历史版本" class="headerlink" title="7、历史版本"></a>7、历史版本</h4><h5 id="7-1、查看历史版本（git-log"><a href="#7-1、查看历史版本（git-log" class="headerlink" title="==7.1、查看历史版本（git log)=="></a>==7.1、查看历史版本（git log)==</h5><p>基本语法：</p><ul><li><code>git reflog</code> 查看版本信息</li><li><code>git log</code> 查看版本详细信息</li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/930526d37b3749fcaedc19af4b67225d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/a86b01bda4b34dd5a0d6dc8be9886ec1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>但是我们工作区的 hello.txt 始终只有一个文件存在</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/e0966fe190b248769a4d8146c235832e.png#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="7-2、版本穿梭"><a href="#7-2、版本穿梭" class="headerlink" title="7.2、版本穿梭"></a>7.2、版本穿梭</h5><p>语法：<code>git reset --hard 版本号</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/2d764cc641b94d93a8f2129bb50acfb6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="8、切换版本原理"><a href="#8、切换版本原理" class="headerlink" title="8、切换版本原理"></a>8、切换版本原理</h4><p>Git 切换版本，底层其实是移动的HEAD 指针，具体原理如下图所示</p><p>HEAD 指针指向 master 分支，master分支指向 first 版本</p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/7c0455e5ef1a4e17b34d9005570ed7d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"><p>之后有了 second 版本，master 指针指向 second 版本</p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/0bf9644acc0b40759828e22c62b04917.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"><p>之后有了third 版本，master 指针指向 third 版本</p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/bf4cc6bc6ea1489b8449adeba5195f5e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"><p><strong>==如果我们想穿越回去，只需要让 master 指针指向 first 版本或者 second 版本==</strong></p><h4 id="9、-撤销"><a href="#9、-撤销" class="headerlink" title="9、 撤销"></a>9、 撤销</h4><ul><li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p></li><li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p></li><li><p>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </p></li></ul><p><img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\07.png"></p><h2 id="2-Git进阶"><a href="#2-Git进阶" class="headerlink" title="2. Git进阶"></a><strong>2. Git进阶</strong></h2><h3 id="2-1-、分支"><a href="#2-1-、分支" class="headerlink" title="==2.1 、分支=="></a>==2.1 、分支==</h3><p>为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p><p>使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p><p><img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\08.png"></p><h4 id="2-1-1-什么是分支"><a href="#2-1-1-什么是分支" class="headerlink" title="2.1.1 什么是分支"></a>2.1.1 什么是分支</h4><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支</li><li>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行</li><li>对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本</li></ul><h4 id="2-1-2-什么是分支"><a href="#2-1-2-什么是分支" class="headerlink" title="2.1.2 什么是分支"></a>2.1.2 什么是分支</h4><ul><li>同时并行推进多个功能开发，提高开发效率。</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul><h4 id="2-1-3-分支细分"><a href="#2-1-3-分支细分" class="headerlink" title="2.1.3 分支细分"></a>2.1.3 分支细分</h4><ol><li><p>主分支（master）：第一次向 git 仓库中提交更新记录时自动产生的一个分支。</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\06.png"></p></li><li><p>、开发分支（develop）：作为开发的分支，基于 master 分支创建。</p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\09.png" style="zoom:80%;"></li><li><p>功能分支（feature）：作为开发具体功能的分支，基于开发分支创建</p><p>​       <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\10.png" style="zoom:67%;"></p></li></ol><p><strong>功能分支 -&gt; 开发分支 -&gt; 主分支</strong></p><h4 id="2-1-4-分支命令-都很重要）"><a href="#2-1-4-分支命令-都很重要）" class="headerlink" title="==2.1.4 分支命令(都很重要）=="></a><strong>==2.1.4 分支命令(都很重要）==</strong></h4><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td><strong><code>git branch</code></strong></td><td><strong>查看分支</strong></td></tr><tr><td><strong><code>git branch 分支名称</code></strong></td><td><strong>创建分支</strong></td></tr><tr><td><strong><code>git checkout 分支名称</code></strong></td><td><strong>切换分支</strong></td></tr><tr><td><strong><code>git merge 来源分支</code></strong></td><td><strong>合并分支</strong></td></tr><tr><td><strong><code>git branch -d 分支名称</code></strong></td><td><strong>删除分支（分支被合并后才允许删除）（-D 强制删除）</strong></td></tr></tbody></table><h5 id="1、查看分支"><a href="#1、查看分支" class="headerlink" title="1、查看分支"></a>1、查看分支</h5><p>基本语法：<code>git branch -v</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301212629704.png" alt="image-20220301212629704" class="lazyload"></p><h5 id="2、创建分支"><a href="#2、创建分支" class="headerlink" title="2、创建分支"></a>2、创建分支</h5><p>基本语法：<code>git branch 分支名</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301212652516.png" alt="image-20220301212652516" class="lazyload"></p><h5 id="3、切换分支"><a href="#3、切换分支" class="headerlink" title="3、切换分支"></a>3、切换分支</h5><p>基本语法:<code>git checkout 分支名</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301212726205.png" alt="image-20220301212726205" class="lazyload"></p><h5 id="4、修改分支"><a href="#4、修改分支" class="headerlink" title="4、修改分支"></a>4、修改分支</h5><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301212752822.png" alt="image-20220301212752822" class="lazyload"></p><h5 id="5、合并分支"><a href="#5、合并分支" class="headerlink" title="5、合并分支"></a>5、合并分支</h5><p>基本语法：<code>git merge 分支名</code></p><p>①<strong>正常合并不冲突</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301212859573.png" alt="image-20220301212859573" class="lazyload"></p><p>②<strong>合并产生冲突</strong>  </p><p>冲突产生的原因：</p><ul><li>合并分支时，两个分支在==同一个文件的同一个位置==有两套完全不同的修改。</li><li>有两套完全不同的修改。 Git无法替我们决定使用哪一个。必须 人为决定新代码内容。</li></ul><p>例如，我们首先在 master 分支的倒数第二行进行修改，并将其添加到暂存区，再提交到本地库</p><p><strong>==解决方法：详见3.5解决冲突==</strong></p><h3 id="2-2-、暂时保存更改"><a href="#2-2-、暂时保存更改" class="headerlink" title="2.2 、暂时保存更改"></a>2.2 、暂时保存更改</h3><p>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p><p>使用场景：分支临时切换</p><ul><li>存储临时改动：<code>git stash</code></li><li>恢复改动：<code>git stash pop</code></li></ul><h2 id="3-Github"><a href="#3-Github" class="headerlink" title="==3. Github=="></a><strong>==3. Github==</strong></h2><p>在版本控制系统中，大约90%的操作都是在本地仓库中进行的：暂存，提交，查看状态或者历史记录等等。除此之外，如果仅仅只有你一个人在这个项目里工作，你永远没有机会需要设置一个远程仓库。</p><p>只有当你需要和你的开发团队共享数据时，设置一个远程仓库才有意义。你可以把它想象成一个 “文件管理服务器”，利用这个服务器可以与开发团队的其他成员进行数据交换。</p><h3 id="3-1、-注册"><a href="#3-1、-注册" class="headerlink" title="3.1、 注册"></a>3.1、 注册</h3><ol><li><p>访问<a href="https://github.com/">github</a>首页，点击 Sign up 连接。（注册）</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\11.png"></p></li><li><p>填写用户名、邮箱地址、GitHub登陆密码</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\12.png"></p></li><li><p>选择计划</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\13.png"></p></li><li><p>填写 GitHub 问题</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\14.png"></p></li><li><p>验证邮箱</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\15.png"></p></li><li><p>GitHub 个人中心</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\16.png"></p></li></ol><h3 id="3-2-、多人协作开发流程"><a href="#3-2-、多人协作开发流程" class="headerlink" title="3.2 、多人协作开发流程"></a>3.2 、多人协作开发流程</h3><ol><li>A在自己的计算机中创建本地仓库</li><li>A在github中创建远程仓库</li><li>A将本地仓库推送到远程仓库</li><li>B克隆远程仓库到本地进行开发</li><li>B将本地仓库中开发的内容推送到远程仓库</li><li>A将远程仓库中的最新内容拉去到本地</li></ol><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>git push 别名 分支</strong></td><td><strong>推送本地分支上的内容克隆到本地</strong></td></tr><tr><td><strong>git clone 远程地址</strong></td><td><strong>将远程仓库的内容克隆到本地</strong></td></tr><tr><td><strong>git pull 远程库地址别名 远程分支名</strong></td><td><strong>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</strong></td></tr></tbody></table><p><img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\20.png"></p><p><img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\21.png"></p><h3 id="3-3、创建远程仓库"><a href="#3-3、创建远程仓库" class="headerlink" title="==3.3、创建远程仓库=="></a><strong>==3.3、创建远程仓库==</strong></h3><h4 id="3-3-1、Github远程仓库"><a href="#3-3-1、Github远程仓库" class="headerlink" title="3.3.1、Github远程仓库"></a>3.3.1、Github远程仓库</h4><ol><li><p>填写仓库基本信息</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\17.png"></p></li><li><p>将本地仓库推送到远 程仓库</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\18.png"></p><ol><li><p>git push 远程仓库地址 分支名称</p></li><li><p>git push 远程仓库地址别名 分支名称</p></li><li><p>git push -u 远程仓库地址别名 分支名称</p><p>-u 记住推送地址及分支，下次推送只需要输入git push即可</p></li><li><p>git remote add 远程仓库地址别名 远程仓库地址</p></li></ol></li></ol><h4 id="3-3-2、Gitee远程仓库"><a href="#3-3-2、Gitee远程仓库" class="headerlink" title="3.3.2、Gitee远程仓库"></a>3.3.2、Gitee远程仓库</h4><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/ba8d53d1f0f64035817fde0856ed068e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/19f9eec5769143b2b4694152027a952e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h3 id="3-4-远程仓库操作"><a href="#3-4-远程仓库操作" class="headerlink" title="==3.4 远程仓库操作=="></a><strong>==3.4 远程仓库操作==</strong></h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td><strong>git push 别名 分支</strong></td><td><strong>推送本地分支上的内容克隆到本地</strong></td></tr><tr><td><strong>git clone 远程地址</strong></td><td><strong>将远程仓库的内容克隆到本地</strong></td></tr><tr><td><strong>git pull 远程库地址别名 远程分支名</strong></td><td><strong>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</strong></td></tr></tbody></table><h4 id="3-4-1、创建远程仓库别名"><a href="#3-4-1、创建远程仓库别名" class="headerlink" title="3.4.1、创建远程仓库别名"></a>3.4.1、创建远程仓库别名</h4><p><strong>①、Gihub</strong></p><p><strong>==基本语法：==</strong></p><ul><li><code>git remote -v</code> 查看当前所有远程地址别名</li><li><code>git remote add 别名 远程地址</code> 起别名</li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301201128197.png" alt="image-20220301201128197" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/ae3a8e8baa7340b19f72535a5f13b413.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>注意：起的别名最好和本地库的名称一致</p><p><strong>②、Gitee</strong></p><h6 id><a href="#" class="headerlink" title></a><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/27e01eed66fd437d88c315341b5ba950.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></h6><h4 id="3-4-2、推送本地分支到远程仓库"><a href="#3-4-2、推送本地分支到远程仓库" class="headerlink" title="3.4.2、推送本地分支到远程仓库"></a>3.4.2、推送本地分支到远程仓库</h4><p><strong>==基本语法：==</strong><code>git push 别名 分支</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/5a652a14b41b43ba9d76ff54fbfee6d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>我们输入 gitee 的用户名和密码，会提示推送成功，我们在 gitee 上查看我们的 git-demo 仓库，发现有我们推送的hello.txt 文件</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301201439384.png" alt="image-20220301201439384" class="lazyload"></p><h4 id="3-4-3、拉取远程库分支到本地库"><a href="#3-4-3、拉取远程库分支到本地库" class="headerlink" title="3.4.3、拉取远程库分支到本地库"></a>3.4.3、拉取远程库分支到本地库</h4><p><strong>==语法：==</strong><code>git pull 别名 分支</code></p><p>我们在远程库进行 hello.txt 的文件修改</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/2f7f823dc35f464d8591adb8e6ee3589.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>然后在本地库将远程库的代码 拉取</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/c02d6dd060ef4f5d802587f19eb27c67.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="3-4-4、克隆远程仓库到本地"><a href="#3-4-4、克隆远程仓库到本地" class="headerlink" title="3.4.4、克隆远程仓库到本地"></a>3.4.4、克隆远程仓库到本地</h4><p><strong>==基本语法：==</strong><code>git clone 远程地址</code></p><p>我们另一台用户需要克隆我们的远程仓库到他的本地库，由于是使用一台电脑模拟，所以在克隆之前需要在 凭据管理器下删除我们之前的 gitee 凭据</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301201654630.png" alt="image-20220301201654630" class="lazyload"></p><p>我们新建一个文件夹 git-clone，然后在此文件夹下右键 git bash here，之后进行克隆</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f0de24081cb8468298818da0090ca174.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/b63acd2339054c87adc78969c3dfbfa8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h3 id="3-5-、解决冲突"><a href="#3-5-、解决冲突" class="headerlink" title="3.5 、解决冲突"></a>3.5 、解决冲突</h3><p>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</p><p><strong>==A上传后，B需要将github仓库中最新版本克隆到本地，修改后存入本地仓库，重新上传到远程仓库，以此处理冲突==</strong></p><p>冲突产生的原因：</p><ul><li>合并分支时，两个分支在==同一个文件的同一个位置==有两套完全不同的修改。</li><li>有两套完全不同的修改。 Git无法替我们决定使用哪一个。必须 人为决定新代码内容。</li></ul><p>例如，我们首先在 master 分支的倒数第二行进行修改，并将其添加到暂存区，再提交到本地库</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301212949170.png" alt="image-20220301212949170" class="lazyload"></p><p>接着，我们去 hot-fix 分支的倒数第一行进行修改，并将其添加到暂存区，再提交到本地库</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301213016560.png" alt="image-20220301213016560" class="lazyload"></p><p>之后我们在 master 分支上合并 hot-fix 分支，发现产生冲突</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301213056979.png" alt="image-20220301213056979" class="lazyload"></p><p>==<strong>解决冲突</strong>==</p><p>1.编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><ul><li>特殊符号：<code>&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> 当前分支的代码 <code>=======</code> 合并过来的代码 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;hot-fix</code></li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301213310313.png" alt="image-20220301213310313" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301213340290.png" alt="image-20220301213340290" class="lazyload"></p><p>2.删除完成之后保存，再次添加到暂存区，并再次提交到本地库(==注意：此时使用 git commit 命令时候不能带文件名==)</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301213419277.png" alt="image-20220301213419277" class="lazyload"></p><h3 id="3-6、邀请加入团队"><a href="#3-6、邀请加入团队" class="headerlink" title="3.6、邀请加入团队"></a>3.6、邀请加入团队</h3><h4 id="3-6-1、Gitee"><a href="#3-6-1、Gitee" class="headerlink" title="3.6.1、Gitee"></a>3.6.1、Gitee</h4><p><strong>==1.我们在 git-clone(假设这是大弟子令狐冲) 文件夹里面进行代码修改，修改完后添加到暂存区，再提交到本地库，之后 push 到我们的远程库==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/fcd65d8cddf14da69b9e89bced921cde.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f826652d1c04460e8a2543cf19079c54.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==2.我们在 git-demo 仓库点击管理 -&gt; 仓库成员管理 -&gt; 添加仓库成员 -&gt; 邀请用户==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/e7c1eb11a85e4c6faf2e38ac993fb310.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==3.我们可以在被邀请人账号里面进行“接受”==</strong></p><p><strong>==4.令狐成成为仓库开发者被拉入团队后，我们再次在令狐冲文件夹使用进行 push==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/fcd17c66c44e42cda4a835db8f007887.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==5.push 到远程库成功，我们在远程库查看==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/6cb4f3c9d6bc4e11a0a861cfa3e7ffcc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="3-6-2、Github"><a href="#3-6-2、Github" class="headerlink" title="3.6.2、Github"></a>3.6.2、Github</h4><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/7986520e610845179eadb4424b5c147c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==1.填入想要合作的人==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301202545506.png" alt="image-20220301202545506" class="lazyload"></p><p><strong>==2.复制地址并发给该用户==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/987a791e8a014f76b34a2c1dd304111f.png#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==3.在 atguigulinghuchong这个账号 中的 地址 栏 复制 收到邀请 的 链接 ，点击接受邀请。==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301202807955.png" alt="image-20220301202807955" class="lazyload"></p><h3 id="3-7-、跨团队协作"><a href="#3-7-、跨团队协作" class="headerlink" title="3.7 、跨团队协作"></a>3.7 、跨团队协作</h3><h4 id="3-7-1、Gitee"><a href="#3-7-1、Gitee" class="headerlink" title="3.7.1、Gitee"></a>3.7.1、Gitee</h4><p><strong>==1.将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败。==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301205138016.png" alt="image-20220301205138016" class="lazyload"></p><p><strong>==2.在东方不败的 Gitee账号里的地址栏复制收到的链接，然后点击 Fork将项目叉到自己的本地仓库==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/994733f225124666966699ce2a7787c6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/8b706d9a7ed6493dbf8c584515de1ed8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==3.接下来点击上方的 Pull Requests 请求，并创建一个新的请求 。==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/ec524bd1c8e7483db0776e34e4dcc24d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301205249906.png" alt="image-20220301205249906" class="lazyload"></p><p><strong>==4.合并之后我们在岳不群的 git-demo 下就可以看到东方不败的代码==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301205311045.png" alt="image-20220301205311045" class="lazyload"></p><h4 id="3-7-2、Github"><a href="#3-7-2、Github" class="headerlink" title="3.7.2、Github"></a>3.7.2、Github</h4><p><strong>==1.将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败。==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301205344644.png" alt="image-20220301205344644" class="lazyload"></p><p><strong>==2.在东方不败的 GitHub账号里的地址栏复制收到的链接，然后点击 Fork将项目叉到自己的本地仓库==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/1bc924d51bdc467884120b93fc15423d.png#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==3.东方不败就可以在线编辑叉取过来的文件。编辑完毕后，填写描述信息并点击左下角绿色按钮提交。==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301205507559.png" alt="image-20220301205507559" class="lazyload"></p><h3 id="3-8-、ssh免密登陆"><a href="#3-8-、ssh免密登陆" class="headerlink" title="3.8 、ssh免密登陆"></a>3.8 、ssh免密登陆</h3><h4 id="3-8-1、Gitee"><a href="#3-8-1、Gitee" class="headerlink" title="3.8.1、Gitee"></a>3.8.1、Gitee</h4><p><strong>==1.在 C盘 User 自己的账户下右键==</strong> git bash here，<code>ssh-keygen -t rsa -C 自己的邮箱签名</code></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301210436038.png" alt="image-20220301210436038" class="lazyload"></p><p><strong>==2.这样就会生成 .ssh 文件夹，里面有私钥和公钥==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301210504062.png" alt="image-20220301210504062" class="lazyload"></p><p><strong>==3.之后在 gitee 上添加公钥==</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301210533789.png" alt="image-20220301210533789" class="lazyload"></p><p><strong>==4.这样我们可以借助 ssh 链接来拉取和推送代码，并且不需要进行登录==</strong></p><h4 id="3-8-2、Github"><a href="#3-8-2、Github" class="headerlink" title="3.8.2、Github"></a>3.8.2、Github</h4><p>https协议仓库地址：<a href="https://github.com/itcast-frontEnd/git-demo.git">https://github.com/itcast-frontEnd/git-demo.git</a></p><p><img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\22.png"></p><p>生成秘钥：<code>ssh-keygen</code></p><p>秘钥存储目录：C:\Users\用户\.ssh</p><p>公钥名称：id_rsa.pub</p><p>私钥名称：id_rsa</p><p> <img src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\assets\23.png"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301210335696.png" alt="image-20220301210335696" class="lazyload"></p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220301210250996.png" alt="image-20220301210250996" class="lazyload"></p><h3 id="3-9-、GIT忽略清单"><a href="#3-9-、GIT忽略清单" class="headerlink" title="3.9 、GIT忽略清单"></a>3.9 、GIT忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。</p><p>git忽略清单文件名称：**.gitignore**</p><p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>]]></content>
      
      
      <categories>
          
          <category> 前后端交互 </category>
          
          <category> git版本控制 </category>
          
          <category> 代码托管平台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
            <tag> JS前后端交互 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“ Node.js 基础 ”</title>
      <link href="/2022/02/22/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92Node%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/22/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92Node%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：Node.js基础【概述、环境搭建、Node.js快速入门】，模块化开发【概述、系统模块、第三方模块（包）、package.json文件、Node.js模块加载机制】，服务器请求响应原理及HTTP协议</p><span id="more"></span><p><strong>Node.js 基础</strong></p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220219205205076.png" alt="image-20220219205205076" class="lazyload"><h2 id="一、Node-js基础"><a href="#一、Node-js基础" class="headerlink" title="一、Node.js基础"></a>一、Node.js基础</h2><h4 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h4><ul><li><p>Node 是一个基于 Chrome V8 引擎的 JavaScript 代码运行环境。</p></li><li><p>浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境</p></li><li><p>Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境</p></li><li><p>Node文档中文网：<a href="http://nodejs.cn/api/url.html#url_new_url_input_base">http://nodejs.cn/api/url.html#url_new_url_input_base</a></p></li></ul><p> <img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220220140200515.png" alt="image-20220220140200515" class="lazyload"></p><h4 id="1-2环境搭建"><a href="#1-2环境搭建" class="headerlink" title="1.2环境搭建"></a>1.2环境搭建</h4><p>Node.js运行环境安装： <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>PATH环境变量：设置好PATh变量，可以在任何目录下执行Node.js</p><h4 id="1-3Node-js快速入门"><a href="#1-3Node-js快速入门" class="headerlink" title="1.3Node.js快速入门"></a>1.3Node.js快速入门</h4><h5 id="1-3-1-Node-js组成"><a href="#1-3-1-Node-js组成" class="headerlink" title="1.3.1 Node.js组成"></a>1.3.1 Node.js组成</h5> <img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220220144149467.png" alt="image-20220220144149467" class="lazyload"><h5 id="1-3-2-Node-js全局对象global"><a href="#1-3-2-Node-js全局对象global" class="headerlink" title="1.3.2 Node.js全局对象global"></a>1.3.2 Node.js全局对象global</h5><p>在**==浏览器==<strong>中全局对象是</strong>==window==<strong>，在</strong>==Node==<strong>中全局对象是</strong>==global==**。</p><p>Node中全局对象下有以下方法，可以在任何地方使用，global可以省略。</p><ul><li>console.log()     在控制台中输出</li><li>setTimeout()     设置超时定时器</li><li>clearTimeout()  清除超时时定时器</li><li>setInterval()      设置间歇定时器</li><li>clearInterval()   清除间歇定时器</li></ul><h5 id="1-3-3-第一个Node程序"><a href="#1-3-3-第一个Node程序" class="headerlink" title="1.3.3 第一个Node程序"></a>1.3.3 第一个Node程序</h5><p>1.新建 app.js</p><p>2.输入代码块 <code>node-http-server</code>,自动生成 Node 结构（安装插件：Node-snippets就可以快捷生成）</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/684a92b73e7d4272b25c90a81f5c1426.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>3.在终端使用 <code>node app.js</code> 运行程序</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/2becf15aab2d49e99b732ac741b7e885.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>4.假如要停止我们的服务器，在终端处按 <code>ctrl + c</code> 停止服务器</p><h6 id="1-3-3-1解析第一个Node程序"><a href="#1-3-3-1解析第一个Node程序" class="headerlink" title="1.3.3.1解析第一个Node程序"></a>1.3.3.1解析第一个Node程序</h6><p>1.引入 http 模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br></code></pre></td></tr></table></figure><p>2.创建服务器</p><p>   接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 3000 端口。函数通过 request、response 参   数来接收和响应数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//表示引入http模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    request    获取客户端(浏览器)传过来的信息</span><br><span class="hljs-comment">    response   给浏览器响应信息</span><br><span class="hljs-comment">*/</span><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br><br>  <span class="hljs-comment">//发送响应头</span><br>  <span class="hljs-comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span><br>  response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=UTF-8&#x27;</span>&#125;);<br>    <br>  <span class="hljs-comment">//表示给我们页面上面输出一句话并且结束响应</span><br>  response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);  <span class="hljs-comment">//监听端口</span><br><br></code></pre></td></tr></table></figure><h2 id="二、JS模块化开发"><a href="#二、JS模块化开发" class="headerlink" title="二、JS模块化开发"></a>二、JS模块化开发</h2><h4 id><a href="#" class="headerlink" title></a><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/692d30934aa54ba685410b0589e93ea5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" class="lazyload"></h4><h3 id="1、JavaScript模块化"><a href="#1、JavaScript模块化" class="headerlink" title="1、JavaScript模块化"></a>1、JavaScript模块化</h3><p><strong>什么是模块化开发呢</strong>？</p><ul><li>事实上模块化开发最终的目的是将程序划分成一个个小的结构</li><li>这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构</li><li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用</li><li>也可以通过某种方式，导入另外结构中的变量、函数、对象等</li></ul><p>上面说提到的==结构==，就是==模块==；按照这种结构划分开发程序的过程，就是模块化开发的过程</p><h5 id="1-1、CommonJS"><a href="#1-1、CommonJS" class="headerlink" title="1.1、CommonJS"></a>1.1、CommonJS</h5><p>我们需要知道CommonJS是一个规范，最初提出来是在浏览器以外的地方使用，并且当时被命名为ServerJS，后来为了体现它的广泛性，修改为CommonJS，平时我们也会简称为CJS。</p><ul><li><p>Node是CommonJS在服务器端一个具有代表性的实现</p></li><li><p>Node中对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发</p></li><li><p>在Node中<strong>每一个js文件都是一个单独的模块</strong></p></li><li><p>这个模块中包括 <strong>CommonJS规范的核心变量</strong>：exports、module.exports、require</p></li><li><p>我们可以使用这些变量来方便的进行<strong>模块化开发</strong></p></li></ul><p>模块化的核心是导出和导入，Node中对其进行了实现：</p><ul><li><code>==exports==</code>和<code>==module.exports==</code>可以负责对模块中的内容进行导出</li><li><code>==require</code>== 函数可以帮助我们<strong>导入其他模块（自定义模块、系统模块、第三方库模块）中的内容</strong></li></ul><h5 id="1-2、自定义模块的规定"><a href="#1-2、自定义模块的规定" class="headerlink" title="1.2、自定义模块的规定"></a>1.2、自定义模块的规定</h5><ol><li>我们可以把公共的功能抽离成为一个单独的 js 文件作为一个模块，Node.js规定一个 <strong>JavaScript 文件</strong>就是一个模块，模块<strong>内部定义的变量和函数</strong>默认情况下<strong>外部无法得到</strong>。如果要让外部可以访问模块里面的方法或属性，就必须在模块里面通过==exports== 或者 ==module.exports== 暴露属性或者方法</li><li>在需要使用这些模块的文件中，通过 ==require== 的方式引入这个模块。这个时候就可以使用模块里面暴露的属性和方法</li></ol><p>注意：</p><ul><li>require 里面的路径要加 <strong>单引号</strong></li><li>require 里面引入的模块可以跟后缀 .js，也可以不跟后缀 .js</li><li>若我们要暴露的是对象(属性)，则建议使用 <code>module.exports</code> ;若我们要暴露的是方法，则建议使用<code>exports</code></li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/1159216f22304e7fa244dfe0dffb4d71.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/2e12889b045f4a568f62108615329d4e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><ul><li>我们以后的自定义模块都会放在 <code>node_modules</code> 文件夹下，此时引入不需要添加 <code>node_modules</code> 路径也可以引入</li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/dbf0d2802db6412da7ca275e84b6730c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="1-3、ES-Module"><a href="#1-3、ES-Module" class="headerlink" title="1.3、ES Module"></a>1.3、ES Module</h5><p>JavaScript没有模块化一直是它的痛点，所以才会产生我们前面学习的社区规范：CommonJS、AMD、CMD等，<br>所以在ES推出自己的模块化系统时，大家也是兴奋异常。</p><p>ES Module和CommonJS的模块化有一些不同之处：</p><ul><li>一方面它使用了import和export关键字</li><li>另一方面它采用编译期的静态分析，并且也加入了动态引用的方式</li></ul><p>ES Module模块采用export和import关键字来实现模块化</p><ul><li><code>export</code>负责将模块内的内容导出</li><li><code>import</code>负责从其他模块导入内容</li></ul><h5 id="1-4、export关键字"><a href="#1-4、export关键字" class="headerlink" title="1.4、export关键字"></a>1.4、export关键字</h5><p>export关键字将一个模块中的变量、函数、类等导出</p><ul><li><code>export</code> 指令用于导出变量，比如下面的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// info.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;why&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> height = <span class="hljs-number">1.88</span><br></code></pre></td></tr></table></figure><h5 id="1-5、导出函数或类"><a href="#1-5、导出函数或类" class="headerlink" title="1.5、导出函数或类"></a>1.5、导出函数或类</h5><p>上面我们主要是输出变量，也可以输出函数或者输出类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">content</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    &#125;<br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;在奔跑&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-6、export-default"><a href="#1-6、export-default" class="headerlink" title="1.6、export default"></a>1.6、export default</h5><ul><li>某些情况下，一个模块中包含某个功能，我们并不希望给这个功能命名，而是让导入者可以自己来命名</li><li>这个时候就可以使用 <code>export default</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// info.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;default function&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>我们来到 <code>main.js</code> 中，这样使用就可以了</p><ul><li><p>这里的 <code>myFunc</code> 是我自己命名的，你可以根据需要命名它对应的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> myFunc form <span class="hljs-string">&#x27;./info.js&#x27;</span><br><br><span class="hljs-title function_">myFunc</span>()<br></code></pre></td></tr></table></figure></li></ul></li><li><p>另外，需要注意：</p><ul><li><code>export default</code> 在同一个模块中，不允许同时存在多个</li></ul></li></ul><h5 id="1-7、ES6-import的使用"><a href="#1-7、ES6-import的使用" class="headerlink" title="1.7、ES6 import的使用"></a>1.7、ES6 import的使用</h5><p>我们使用 export 指令导出了模块对外提供的接口，下面我们就可以通过 <code>import</code> 命令来加载对应的这个模块了</p><ul><li><p>首先，我们需要在 HTML 代码中引入两个j文件，并且类型需要设置为 module</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src = <span class="hljs-string">&quot;info.js&quot;</span> type = <span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;main.js&quot;</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><code>import</code> 指令用于导入模块中的内容，比如 <code>main.js</code> 的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;name,age,height&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./info.js&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age,height);<br></code></pre></td></tr></table></figure><ul><li>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦<ul><li>p通过<code>*</code>可以导入模块中所有的export变量</li><li>p但是通常情况下我们需要给<code>*</code>起一个别名，方便后续的使用</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> info <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./info.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">name</span>,info.<span class="hljs-property">age</span>,info.<span class="hljs-property">height</span>);<br></code></pre></td></tr></table></figure><h3 id="2、系统模块（内置模块）"><a href="#2、系统模块（内置模块）" class="headerlink" title="2、系统模块（内置模块）"></a>2、系统模块（内置模块）</h3><h4 id="1-内置模块HTTP"><a href="#1-内置模块HTTP" class="headerlink" title="1.内置模块HTTP"></a>1.内置模块HTTP</h4><p>Node.js中，将很多的功能，划分为一个个 module(模块)。 Node.js 中的很多功能都是通过模块实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//表示引入http模块</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    request    获取客户端(浏览器)传过来的信息</span><br><span class="hljs-comment">    response   给浏览器响应信息</span><br><span class="hljs-comment">*/</span><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br><br>  <span class="hljs-comment">//发送响应头</span><br>  <span class="hljs-comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span><br>  response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=UTF-8&#x27;</span>&#125;);<br>    <br>  <span class="hljs-comment">//表示给我们页面上面输出一句话并且结束响应</span><br>  response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);  <span class="hljs-comment">//监听端口</span><br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/628bfc483126460983783db3097585e2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>那我们如果想在屏幕上输出汉字呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>) &#123;<br><br>    <span class="hljs-comment">//发送响应头</span><br>    response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);<br><br>    <span class="hljs-comment">//表示给我们页面上面输出一句话并且结束响应</span><br>    response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;你好 Nodejs&#x27;</span>);<br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h2&gt;你好 Nodejs&lt;/h2&gt;&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>); <span class="hljs-comment">//监听端口</span><br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/b215b40f3f514ba9ac4c6a46da657a26.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>如何解决 Preview 里面的乱码状态呢？只需要在<code>http.createServer</code>中添加下方代码即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;head&gt; &lt;meta charset=&#x27;UTF-8&#x27;&gt;&lt;/head&gt;&quot;</span>); <span class="hljs-comment">//解决乱码   </span><br></code></pre></td></tr></table></figure><h5 id="1-1、创建服务器"><a href="#1-1、创建服务器" class="headerlink" title="1.1、创建服务器"></a>1.1、创建服务器</h5><p>创建服务器对象，我们是通过 createServer 来完成的</p><ul><li>req：request请求对象，包含请求相关的信息</li><li>res：response响应对象，包含我们要发送给客户端的信息</li></ul><h5 id="1-2、监听主机和端口号"><a href="#1-2、监听主机和端口号" class="headerlink" title="1.2、监听主机和端口号"></a>1.2、监听主机和端口号</h5><p>通过listen方法来开启服务器，并且在某一个主机和端口上监听网络请求</p><p>listen函数有三个参数：</p><ul><li>端口port: 可以不传, 系统会默认分配端</li><li>主机host: 通常可以传入localhost、ip地址127.0.0.1,或者ip地址0.0.0.0，默认是0.0.0.0</li><li>回调函数：服务器启动成功时的回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 启动服务器,并且制定端口号和主机</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动成功~&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="1-3、request对象"><a href="#1-3、request对象" class="headerlink" title="1.3、request对象"></a>1.3、request对象</h5><p>在向服务器发送请求时，我们会携带很多信息，比如：</p><ul><li>本次请求的URL，服务器需要根据不同的URL进行不同的处理</li><li>本次请求的请求方式，比如GET、POST请求传入的参数和处理的方式是不同的</li><li>本次请求的 headers 中也会携带一些信息，比如客户端信息、接受数据的格式、支持的编码格式等</li></ul><p>这些信息，Node会帮助我们封装到一个request的对象中，我们可以直接来处理这个request对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">// 创建一个web服务器</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// request对象中封装了客户端给我们服务器传递过来的所有信息</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">url</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">method</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">headers</span>);<br><br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;Hello Server&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 启动服务器,并且制定端口号和主机</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>, <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;服务器启动成功~&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="1-4、URL的处理"><a href="#1-4、URL的处理" class="headerlink" title="1.4、URL的处理"></a>1.4、URL的处理</h5><p>客户端在发送请求时，会请求不同的数据，那么会传入不同的请求地址：</p><ul><li>比如<a href="http://localhost:8000/login">http://localhost:8000/login</a></li><li>比如<a href="http://localhost:8000/products">http://localhost:8000/products</a></li></ul><p>服务器端需要根据不同的请求地址，作出不同的响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建一个web服务器</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-comment">//最基本的使用方式</span><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;欢迎回来~&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/users&#x27;</span>) &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;用户列表~&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;错误请求, 检查~&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>那么如果用户发送的地址中还携带一些额外的参数呢？</p><p>比如：<a href="http://localhost:8000/login?name=why&amp;password=123">http://localhost:8000/login?name=why&amp;password=123</a></p><p>这个时候，url的值是 /login?name=why&amp;password=123</p><p>我们如何对它进行解析呢？使用**==内置模块url==**</p><h4 id="2-内置模块url"><a href="#2-内置模块url" class="headerlink" title="2.内置模块url"></a>2.内置模块url</h4><h5 id="2-1、旧版url-API"><a href="#2-1、旧版url-API" class="headerlink" title="2.1、旧版url API"></a>2.1、旧版url API</h5><p>我们来看一下 req 里面能够使用的东西。</p><ul><li>最重要的是 <code>req.url</code> 属性，表示用户的请求URL 地址。所有路由设计，都是通过 <code>req.url</code> 来实现的。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>) &#123;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">url</span>);<br><br><br>    <span class="hljs-comment">//发送响应头</span><br>    response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html;charset=&quot;UTF-8&quot;&#x27;</span> &#125;);<br><br>    <span class="hljs-comment">//表示给我们页面上面输出一句话并且结束响应</span><br>    response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;你好 Nodejs&#x27;</span>);<br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h2&gt;你好 Nodejs&lt;/h2&gt;&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>); <span class="hljs-comment">//监听端口</span><br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/48a3627399bb4de38a66913b5398f6c4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>这里注意一下输出是在 Nodejs 控制台输出，而不是在浏览器上输出。因为输出是在服务端，浏览器是客户端</p><ul><li>我们比较关心的不是拿到 URL，而是识别这个 URL。</li><li>识别 URL，下面的 url 模块</li></ul><p>旧版本 Node 的 url 用法如下：</p><table><thead><tr><th>url模块的使用</th><th>说明</th></tr></thead><tbody><tr><td>url.parse()</td><td>解析 url(第二个参数为true,可以将 query 里面的数据转换为对象)</td></tr><tr><td>url.format(urlObject)</td><td>是上面 url.parse() 操作的逆向操作</td></tr><tr><td>url.resolve(from,to)</td><td>添加或者替换地址</td></tr></tbody></table><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/8e85809e295b4784af684fbd95244a5b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><br><span class="hljs-keyword">var</span> api = <span class="hljs-string">&#x27;http://www.itying.com?name=zhangsan&amp;age=20&#x27;</span>;<br><br><span class="hljs-comment">//console.log(url.parse(api, true));</span><br><br><span class="hljs-keyword">var</span> getValue = url.<span class="hljs-title function_">parse</span>(api, <span class="hljs-literal">true</span>).<span class="hljs-property">query</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(getValue);<br><br><span class="hljs-comment">// ES6中模板字符串写法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;getValue.name&#125;</span>--年龄:<span class="hljs-subst">$&#123;getValue.age&#125;</span>`</span>);<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/b6598f22b5ee4da2b14242c0f832c93d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="2-2、新版url-API"><a href="#2-2、新版url-API" class="headerlink" title="2.2、新版url API"></a>2.2、新版url API</h5><p>==新版本 Node 的 url 用法如下：==</p><ul><li>new URL(input,[,base])<ul><li><code>input</code> 类型：String，要解析的绝对或相对的输入网址。如果 input 是相对的，则需要 base。如果 input 是绝对的，则忽略 base。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myURL = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;/foo&#x27;</span>, <span class="hljs-string">&#x27;https://example.org/&#x27;</span>);<br><span class="hljs-comment">// https://example.org/foo</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br><br><span class="hljs-keyword">const</span> myURL = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<br>    <span class="hljs-string">&quot;http://localhost:3000/p/a/t/h?name=zhangsan&amp;age=20#hash&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myURL);<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/a6b91ab91325402bbe93444b9b8bb3d9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="2-3、searchParams"><a href="#2-3、searchParams" class="headerlink" title="2.3、searchParams"></a>2.3、searchParams</h5><p>searchParams 可以获取到 url 参数的 value</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myURL = <span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&#x27;https://example.org/?abc=123&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myURL.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));<br><span class="hljs-comment">// 打印 123</span><br><br>myURL.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;xyz&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myURL.<span class="hljs-property">href</span>);<br><span class="hljs-comment">// 打印 https://example.org/?abc=123&amp;abc=xyz</span><br><br>myURL.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;abc&#x27;</span>);<br>myURL.<span class="hljs-property">searchParams</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myURL.<span class="hljs-property">href</span>);<br><span class="hljs-comment">// 打印 https://example.org/?a=b</span><br></code></pre></td></tr></table></figure><h4 id="3-内置模块fs"><a href="#3-内置模块fs" class="headerlink" title="3.内置模块fs"></a>3.内置模块fs</h4><p>fs：file system ，文件操作系统，是系统模块，直接引入即可使用.</p><p>文件系统的API非常的多，我们不可能，也没必要一个个去学习，更多的是使用是时候去查对应的API</p><h5 id="3-1、fs-stat🔥"><a href="#3-1、fs-stat🔥" class="headerlink" title="3.1、fs.stat🔥"></a>3.1、fs.stat🔥</h5><p>fs.stat ：检测是文件还是目录：</p><ul><li>第一个参数是 path ：路径</li><li>第二个参数是 callback：回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-comment">// 1. fs.stat   检测是文件还是目录</span><br>fs.<span class="hljs-title function_">stat</span>(<span class="hljs-string">&#x27;./html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`是文件:<span class="hljs-subst">$&#123;data.isFile()&#125;</span>`</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`是目录:<span class="hljs-subst">$&#123;data.isDirectory()&#125;</span>`</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-2、fs-mkdir🔥"><a href="#3-2、fs-mkdir🔥" class="headerlink" title="3.2、fs.mkdir🔥"></a>3.2、fs.mkdir🔥</h5><p>fs.mkdir()： 创建目录</p><ul><li>第一个参数 path：将要创建的目录路径</li><li>第二个参数 mode：目录权限(读写权限)，默认为777</li><li>第三个参数 callback：回调函数，传递异常参数 err</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;./css&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-3、fs-writeFile🔥"><a href="#3-3、fs-writeFile🔥" class="headerlink" title="3.3、fs.writeFile🔥"></a>3.3、fs.writeFile🔥</h5><p>fs.writeFile ：创建写入文件</p><ul><li>第一个参数 filename：文件名称</li><li>第二个参数 data：将要写入的内容，可以使用字符串或 buffer 数据</li><li>第三个参数 options：option 数组对象，包含<ul><li>encoding ：可选值，默认为 ‘utf8’，当 data 使用 buffer 时，该值应该为 ignored</li><li>mode：文件读写权限，默认为 438</li><li>flag ：默认为 ‘w’</li></ul></li><li>第四个参数 callback：回调函数，传递一个异常参数 err</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./html/index.html&#x27;</span>,<span class="hljs-string">&#x27;你好nodejs&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建写入文件成功&#x27;</span>);<br>&#125;)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./html/index.html&#x27;</span>,<span class="hljs-string">&#x27;你好nodejs 哈哈&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建写入文件成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：如果没有这个文件，则会新建一个文件，如果已经有这个文件，那么会覆盖这个文件里面的内容</p><h5 id="3-4、fs-appendFile"><a href="#3-4、fs-appendFile" class="headerlink" title="3.4、fs.appendFile"></a>3.4、fs.appendFile</h5><p>fs.appendFile 追加文件</p><ul><li>第一个参数 path：将要追加的文件路径</li><li>第二个参数 data：要追加的文件内容</li><li>第三个参数callback：回调函数，传递一个异常参数 err</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">appendFile</span>(<span class="hljs-string">&#x27;./css/base.css&#x27;</span>,<span class="hljs-string">&#x27;body&#123;color:red&#125;&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;appendFile 成功&#x27;</span>);<br><br>&#125;)<br><br><br> fs.<span class="hljs-title function_">appendFile</span>(<span class="hljs-string">&#x27;./css/base.css&#x27;</span>,<span class="hljs-string">&#x27;h3&#123;color:red&#125;\n&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;appendFile 成功&#x27;</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：如果这个文件不存在，则会新建文件，如果文件已经存在，则会在文件内容后面追加内容</p><h5 id="3-5、fs-readFile"><a href="#3-5、fs-readFile" class="headerlink" title="3.5、fs.readFile"></a>3.5、fs.readFile</h5><p>fs.readFile 读取文件：</p><ul><li>第一个参数路径 path：想要读取的文件的路径</li><li>第二个参数callback：回调函数，传递一个异常参数 err 和读取的文件数据 data，data类型是 Buffer</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./html/index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());  <span class="hljs-comment">//把Buffer 转化成string类型</span><br>&#125;)<br><br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./aaa/index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data.<span class="hljs-title function_">toString</span>());  <span class="hljs-comment">//把Buffer 转化成string类型</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-6、fs-readdir"><a href="#3-6、fs-readdir" class="headerlink" title="3.6、fs.readdir"></a>3.6、fs.readdir</h5><p>fs.readdir 读取目录：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">readdir</span>(<span class="hljs-string">&#x27;./html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-7、fs-rename"><a href="#3-7、fs-rename" class="headerlink" title="3.7、fs.rename"></a>3.7、fs.rename</h5><p>fs.rename ：重命名，功能：1、表示重命名 2、移动文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./css/aaa.css&#x27;</span>,<span class="hljs-string">&#x27;./css/index.css&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;重命名成功&#x27;</span>);<br><br>&#125;)<br><br><br>fs.<span class="hljs-title function_">rename</span>(<span class="hljs-string">&#x27;./css/index.css&#x27;</span>,<span class="hljs-string">&#x27;./html/index.css&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移动文件成功&#x27;</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-8、fs-rmdir"><a href="#3-8、fs-rmdir" class="headerlink" title="3.8、fs.rmdir"></a>3.8、fs.rmdir</h5><p>fs.rmdir 删除目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;./aaaa&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除目录成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：要删除目录之前需要先删除目录下的所有文件</p><h5 id="3-9、fs-unlink"><a href="#3-9、fs-unlink" class="headerlink" title="3.9、fs.unlink"></a>3.9、fs.unlink</h5><p>fs.unlink 删除文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">fs.<span class="hljs-title function_">unlink</span>(<span class="hljs-string">&#x27;./aaaa/index.html&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除文件成功&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-10、fs-createReadStream"><a href="#3-10、fs-createReadStream" class="headerlink" title="3.10、fs.createReadStream"></a>3.10、fs.createReadStream</h5><p>fs.createReadStream： 从文件流中读取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 以流的方式读取 data 目录下的 aaa.txt</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ReadStream</span> = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&quot;./data/aaa.txt&quot;</span>);<br><br><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-comment">// 通过 on 方法监听 data,表示我们读取到了这个数据</span><br><span class="hljs-title class_">ReadStream</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    str += data;<br>    count++;<br>&#125;)<br><br><span class="hljs-comment">// 通过 on 方法监听 end,表示我们读取完了这个数据</span><br><span class="hljs-title class_">ReadStream</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br>&#125;)<br><br><span class="hljs-comment">// 通过 on 方法监听 error,表示读取过程中的错误信息</span><br><span class="hljs-title class_">ReadStream</span>.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-11、fs-createWriteStream"><a href="#3-11、fs-createWriteStream" class="headerlink" title="3.11、fs.createWriteStream"></a>3.11、fs.createWriteStream</h5><p>fs.createWriteStream：写入文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500</span>;i++)&#123;<br><br>    str +=<span class="hljs-string">&#x27;我是从数据库获取的数据,我要保存起来&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 以流的方式写到 data目录下的 output.txt</span><br><span class="hljs-keyword">var</span> writeStream = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;/data/output.txt&#x27;</span>);<br><br><br>writeStream.<span class="hljs-title function_">write</span>(str); <br><br><span class="hljs-comment">//标记写入完成</span><br>writeStream.<span class="hljs-title function_">end</span>();<br>writeStream.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;finish&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入完成&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-12、管道流🔥"><a href="#3-12、管道流🔥" class="headerlink" title="3.12、管道流🔥"></a>3.12、管道流🔥</h5><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/8d67c441d7ce441aa8d096f73bb60126.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-comment">// 创建一个可读流</span><br><span class="hljs-keyword">var</span> readerStream = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;input.txt&#x27;</span>);<br><span class="hljs-comment">// 创建一个可写流</span><br><span class="hljs-keyword">var</span> readStream = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>)<br><span class="hljs-comment">// 管道读写操作</span><br><span class="hljs-comment">// 读取 input.txt 文件内容,并将内容写入到 output.txt 文件中</span><br>readStream.<span class="hljs-title function_">pipi</span>(writeStream);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;程序执行完毕。&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="4-内置模块PATH"><a href="#4-内置模块PATH" class="headerlink" title="4.内置模块PATH"></a>4.内置模块PATH</h4><h5 id="4-1、path常见的API"><a href="#4-1、path常见的API" class="headerlink" title="4.1、path常见的API"></a>4.1、path常见的API</h5><ul><li>从路径中获取信息<ul><li>dirname：获取文件的父文件夹</li><li>basename：获取文件名</li><li>extname：获取文件扩展名</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-comment">// 1.获取路径的信息</span><br><span class="hljs-keyword">const</span> filepath = <span class="hljs-string">&#x27;/User/why/abc.txt&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">dirname</span>(filepath)); <span class="hljs-comment">// /User/why</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">basename</span>(filepath)); <span class="hljs-comment">// abc.txt</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">extname</span>(filepath)); <span class="hljs-comment">// .txt</span><br></code></pre></td></tr></table></figure><ul><li>路径的拼接<ul><li>如果我们希望将多个路径进行拼接，但是不同的操作系统可能使用的是不同的分隔符</li><li>这个时候我们可以使用 <code>path.join</code> 函数</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2.join路径拼接</span><br><span class="hljs-keyword">const</span> basepath = <span class="hljs-string">&#x27;../User/why&#x27;</span>;<br><span class="hljs-keyword">const</span> filename = <span class="hljs-string">&#x27;./abc.txt&#x27;</span>;<br><span class="hljs-keyword">const</span> othername = <span class="hljs-string">&#x27;./why.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> filepath1 = path.<span class="hljs-title function_">join</span>(basepath, filename);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filepath1);     <span class="hljs-comment">// ..\User\why\abc.txt</span><br></code></pre></td></tr></table></figure><ul><li>将文件和某个文件夹拼接<ul><li>如果我们希望将某个文件和文件夹拼接，可以使用<code>path.resolve</code></li><li>resolve 函数会判断我们拼接的路径前面是否有 / 或 …/ 或 ./</li><li>如果有表示是一个绝对路径，会返回对应的拼接路径</li><li>如果没有，那么会和当前执行文件所在的文件夹进行路径的拼接</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> basepath = <span class="hljs-string">&#x27;../User/why&#x27;</span>;<br><span class="hljs-keyword">const</span> filename = <span class="hljs-string">&#x27;./abc.txt&#x27;</span>;<br><span class="hljs-keyword">const</span> othername = <span class="hljs-string">&#x27;./why.js&#x27;</span>;<br><span class="hljs-comment">// 3.resolve路径拼接</span><br><span class="hljs-comment">// resolve会判断拼接的路径字符串中,是否有以/或./或../开头的路径</span><br><span class="hljs-keyword">const</span> filepath2 = path.<span class="hljs-title function_">resolve</span>(basepath, filename, othername);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(filepath2);<br><span class="hljs-comment">// E:\Code\Node\NodeCodeWhy\User\why\abc.txt\why.js</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><br><span class="hljs-keyword">const</span> basepath2 = <span class="hljs-string">&#x27;/User/coderwhy&#x27;</span>;<br><span class="hljs-comment">// const filename2 = &#x27;/why/abc.txt&#x27;;              // E:\why\abc.txt</span><br><span class="hljs-comment">// const filename2 = &#x27;./why/abc.txt&#x27;;             // E:\User\coderwhy\why\abc.txt</span><br><span class="hljs-comment">// const filename2 = &#x27;why/abc.txt&#x27;;               // E:\User\coderwhy\why\abc.txt</span><br><br><span class="hljs-comment">// const filename2 = &#x27;../why/abc.txt&#x27;;            // E:\User\why\abc.txt</span><br><br><span class="hljs-keyword">const</span> result = path.<span class="hljs-title function_">resolve</span>(basepath2, filename2);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><h6 id="4-1-1、path-extname"><a href="#4-1-1、path-extname" class="headerlink" title="4.1.1、path.extname"></a>4.1.1、path.extname</h6><ul><li><code>path.extname()</code> 获取文件(可以是一个路径文件)的扩展名</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">extname</span>(<span class="hljs-string">&#x27;hello.md&#x27;</span>)); <span class="hljs-comment">// md</span><br><br><span class="hljs-comment">// 获取路径信息的扩展名</span><br><span class="hljs-keyword">let</span> strPath = <span class="hljs-string">&quot;http://www.xinhuanet.html&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-title function_">extname</span>(strPath)); <span class="hljs-comment">// html</span><br></code></pre></td></tr></table></figure><h6 id="4-1-2、path-resolve"><a href="#4-1-2、path-resolve" class="headerlink" title="4.1.2、path.resolve"></a>4.1.2、path.resolve</h6><ul><li><code>path.resolve([...paths])</code> 把一个路径或路径片段的序列解析为一个绝对路径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;/sxt&#x27;</span>, <span class="hljs-string">&#x27;qianduan&#x27;</span>, <span class="hljs-string">&#x27;zhongji&#x27;</span>];<br><span class="hljs-keyword">let</span> info1 = path.<span class="hljs-title function_">resolve</span>(...arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info1);<br><span class="hljs-comment">// D:\sxt\qianduan\zhongji</span><br></code></pre></td></tr></table></figure><p>给定的路径的序列是”从右往左”被处理的，后面每个 <code>path</code> 被依次解析，直到构造完成一个绝对路径。</p><h6 id="4-1-3、path-join"><a href="#4-1-3、path-join" class="headerlink" title="4.1.3、path.join"></a>4.1.3、path.join</h6><ul><li><code>path.join([...paths])</code> 方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">path.<span class="hljs-title function_">join</span>(__dirname,<span class="hljs-string">&#x27;./02art-template.js&#x27;</span>)<br><br><br>path.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/foo&#x27;</span>,<span class="hljs-string">&#x27;bar&#x27;</span>,<span class="hljs-string">&#x27;./baz&#x27;</span>);<br><span class="hljs-comment">// &#x27;foo/bar/baz&#x27;</span><br><br>path.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/foo&#x27;</span>,<span class="hljs-string">&#x27;bar&#x27;</span>,<span class="hljs-string">&#x27;/baz&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-comment">// &#x27;foo/bar&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>__dirname</code> 获得当前执行文件所在目录的完整目录名</li><li><code>__filename</code> 获得当前执行文件的带有完整绝对路径的文件名</li></ul><h3 id="3、第三方模块（包）"><a href="#3、第三方模块（包）" class="headerlink" title="3、第三方模块（包）"></a>3、第三方模块（包）</h3><h4 id="1-包管理工具npm"><a href="#1-包管理工具npm" class="headerlink" title="1.包管理工具npm"></a>1.包管理工具npm</h4><p>包管理工具npm</p><ul><li>Node Package Manager，也就是Node包管理器</li><li>但是目前已经不仅仅是Node包管理器了，在前端项目中我们也在使用它来管理依赖的包</li><li>比如express、koa、react、react-dom、axios、babel、webpack等等</li></ul><p>npm管理的包可以在哪里查看、搜索呢？</p><ul><li><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li><li>这是我们安装相关的npm包的官网</li></ul><p>完全符合 CommonJs 规范的包目录一般包含如下这些文件</p><ul><li>package.json ：包描述文件</li><li>bin：用于存放可执行二进制文件的目录</li><li>lib：用于存放 JavaScript 代码的目录</li><li>doc：用于存放文档的目录</li></ul><h5 id="1-0、npm-init-生成package-json"><a href="#1-0、npm-init-生成package-json" class="headerlink" title="1.0、npm init 生成package.json"></a>1.0、npm init 生成<a href="https://so.csdn.net/so/search?q=package&spm=1001.2101.3001.7020">package</a>.json</h5><p>package.json 定义了这个项目所需要的各种模块，以及项目的配置信息(比如名称、版本、许可证等元数据)</p><p>我们这里以引入并使用 MD5加密包来举例 package.json 的用法</p><p>1.首先在项目根路径下创建 package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm init  或者 npm init --yse<br></code></pre></td></tr></table></figure><p>2.去 <a href="https://www.npmjs.com/">www.npmjs.com</a> 搜索我们 MD5加密包</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/15a6506b29164d83a3e3ce3df04894a9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>3.在我们的根目录下打开 cmd 下载</p><p>我们使用 <code>npm install md5 --save</code> 下载，将 md5 写入 package.json</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/d755589913454069b54436686ba6e0c1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>4.使用 MD5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 加密 123456</span><br><span class="hljs-keyword">var</span> md5 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;md5&#x27;</span>);<br><span class="hljs-comment">// 实现 md5 加密的功能</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">md5</span>(<span class="hljs-string">&#x27;123456&#x27;</span>));<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/159fd19e59c847029b5b4d5a96fed601.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><ul><li>这样我们就实现了导模块并使用模块，此时查看我们的package.json 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mytest&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-string">&quot;index.js&quot;</span>,<br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;keywords&quot;</span>: [],<br>  <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;license&quot;</span>: <span class="hljs-string">&quot;ISC&quot;</span>,<br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;md5&quot;</span>: <span class="hljs-string">&quot;^2.3.0&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;     <br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>dependencies -&gt; 配置当前程序所依赖的其他包</li><li>devDependencie -&gt; 配置当前程序所依赖的其他包，比如一些工具之类的配置在这里</li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f1f58104610b4a46a6a7141b8f8a87b7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>dependencies 与 devDependencies 之间的区别？</p><ul><li>使用 npm install node_module –save 会自动更新 dependencies 字段值</li><li>使用 npm install node_module –save -dev 会自动更新 devDependencies 字段值</li></ul><h5 id="1-1、package-json🔥"><a href="#1-1、package-json🔥" class="headerlink" title="1.1、package.json🔥"></a>1.1、package.json🔥</h5><ul><li><p>package.json 是项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等。</p><p>package-lock.json文件的作用：</p><ul><li><p>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</p></li><li><p>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</p></li></ul></li><li><p>==<strong>每次创建新项目，记得先 npm init 生成package.json</strong>==🔥</p></li></ul><h5 id="1-2、package-json常见属性"><a href="#1-2、package-json常见属性" class="headerlink" title="1.2、package.json常见属性"></a>1.2、package.json常见属性</h5><p>必须填写的属性：name、version</p><ul><li>name 是项目的名称</li><li>version 是当前项目的版本号</li><li>description是描述信息，很多时候是作为项目的基本描述</li><li>author是作者相关信息（发布时用到）</li><li>license是开源协议（发布时用到）</li></ul><p><strong>private 属性</strong>：</p><ul><li>private属性记录当前的项目是否是私有的</li><li>当值为true时，npm是不能发布它的，这是防止私有项目或模块发布出去的方式</li></ul><p><strong>main 属性</strong>：</p><ul><li>设置程序的入口。</li></ul><p><strong>scripts 属性</strong>：</p><ul><li>scripts 属性用于配置一些脚本命令，以键值对的形式存在</li><li>配置后我们可以通过 npm run 命令的key来执行这个命令</li><li>npm start和npm run start的区别是什么?<ul><li>它们是等价的</li><li>对于常用的start、test、stop、restart可以省略掉run直接通过npm start等方式运行</li></ul></li></ul><p><strong>dependencies 属性</strong>：==项目依赖==</p><ul><li>dependencies 属性是指定无论开发环境还是生成环境都需要依赖的包</li><li>使用<strong>npm install</strong> 包名命令下载的文件会默认被添加到 <strong>package.json</strong> 文件的 <strong>dependencies</strong> 字段中</li><li>与之对应的是devDependencies</li></ul><p><strong>devDependencies 属性</strong>：==开发依赖==</p><ul><li><p>一些包在生成环境是不需要的，比如webpack、babel等</p></li><li><p>这个时候我们会通过npm install webpack –save-dev，将它安装到devDependencies属性中</p><p>那么在生成环境如何保证不安装这些包呢？</p></li><li><p>生成环境不需要安装时，我们需要通过npm install –production 来安装文件的依赖</p></li></ul><h5 id="1-3、版本管理的问题"><a href="#1-3、版本管理的问题" class="headerlink" title="1.3、版本管理的问题"></a>1.3、版本管理的问题</h5><p>我们会发现安装的依赖版本出现：^2.0.3或~2.0.3，这是什么意思呢？</p><p>我们这里解释一下^和~的区别：</p><ul><li>^x.y.z：表示x是保持不变的，y和z永远安装最新的版本</li><li>~x.y.z：表示x和y保持不变的，z永远安装最新的版本</li></ul><h5 id="1-4、npm-install-命令🔥"><a href="#1-4、npm-install-命令🔥" class="headerlink" title="1.4、npm install 命令🔥"></a>1.4、npm install 命令🔥</h5><p>安装npm包分两种情况：</p><ul><li>全局安装（global install）： <code>npm install ModuleName -g</code></li><li>项目（局部）安装（local install）： <code>npm install</code></li></ul><p>全局安装：</p><ul><li>全局安装是直接将某个包安装到全局</li></ul><p>但是很多人对全局安装有一些误会：</p><ul><li>通常使用npm全局安装的包都是一些工具包：yarn、webpack等</li><li>并不是类似于axios、express、koa等库文件</li><li>所以全局安装了之后并不能让我们在所有的项目中使用axios等库</li></ul><p>1.npm -v` 查看 npm 版本</p><p>2.使用 npm 命令安装模块 <code>npm install ModuleName</code></p><p>我们推荐安装模块后面加上 <code>--save</code>，这样可以安装模块并把模块写入 package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 如安装 jq 模块</span><br>npm install jquery --save<br></code></pre></td></tr></table></figure><p>3.卸载模块 <code>npm uninstall moduleName</code></p><p>4.查看当前目录下已安装的 <a href="https://so.csdn.net/so/search?q=node&spm=1001.2101.3001.7020">node</a> 包 <code>npm list</code></p><p>5.查看 模块 的版本 <code>npm info 模块</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 如查看 jquery 的版本</span><br>npm info 模块<br></code></pre></td></tr></table></figure><p>6.指定版本安装 <code>npm install jquery@1.8.0 --save</code> 🔥</p><h5 id="1-5、项目安装"><a href="#1-5、项目安装" class="headerlink" title="1.5、项目安装"></a>1.5、项目安装</h5><p>项目安装会在当前目录下生产一个node_modules 文件夹</p><p>局部安装分为开发时依赖和生产时依赖</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/38dde8775adb4645b8b1a754d58e6b87.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="1-6、npm-install-原理"><a href="#1-6、npm-install-原理" class="headerlink" title="1.6、npm install 原理"></a>1.6、npm install 原理</h5><p>执行npm install它背后帮助我们完成了什么操作？</p><p>我们会发现还有一个成为package-lock.json的文件，它的作用是什么？</p><p>从npm5开始，npm支持缓存策略（来自yarn的压力），缓存有什么作用呢？</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/3fb96d34ecb341449a1d35ca7434e768.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>npm install会检测是有package-lock.json文件：</p><ul><li><p>没有lock文件</p><ul><li>分析依赖关系，这是因为我们可能包会依赖其他的包，并且多个包之间会产生相同依赖的情况</li><li>从registry仓库中下载压缩包（如果我们设置了镜像，那么会从镜像服务器下载压缩包）</li><li>获取到压缩包后会对压缩包进行缓存（从npm5开始有的）</li><li>将压缩包解压到项目的node_modules文件夹中</li></ul></li><li><p>有lock文件</p><ul><li>检测lock中包的版本是否和package.json中一致<ul><li>不一致，那么会重新构建依赖关系，直接会走顶层的流程</li></ul></li><li>一致的情况下，会去优先查找缓存<ul><li>没有找到，会从registry仓库下载，直接走顶层流程</li><li>查找到，会获取缓存中的压缩文件，并且将压缩文件解压到node_modules文件夹中</li></ul></li></ul></li></ul><h5 id="1-7、package-lock-json"><a href="#1-7、package-lock-json" class="headerlink" title="1.7、package-lock.json"></a>1.7、package-lock.json</h5><p>package-lock.json文件解析：</p><ul><li>name：项目的名称</li><li>version：项目的版本</li><li>lockfileVersion：lock文件的版本</li><li>requires：使用requires来跟着模块的依赖关系</li><li>dependencies：项目的依赖</li></ul><h5 id="1-8、npm其他命令"><a href="#1-8、npm其他命令" class="headerlink" title="1.8、npm其他命令"></a>1.8、npm其他命令</h5><p>卸载某个依赖包：</p><ul><li>npm uninstall package</li><li>npm uninstall package –save-dev</li><li>npm uninstall package -D</li></ul><p>强制重新build</p><ul><li>npm rebuild</li></ul><p>清除缓存</p><ul><li>npm cache clean</li></ul><h5 id="1-9、cnpm工具"><a href="#1-9、cnpm工具" class="headerlink" title="1.9、cnpm工具"></a>1.9、cnpm工具</h5><p>查看npm镜像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm config get registry<br></code></pre></td></tr></table></figure><p>我们可以直接设置npm的淘宝镜像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm config set registry <span class="hljs-attr">https</span>:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>但是对于大多数人来说），并不希望将npm镜像修改了</p><ul><li>第一，不太希望随意修改npm原本从官方下来包的渠道</li><li>第二，担心某天淘宝的镜像挂了或者不维护了，又要改来改去</li></ul><p>这个时候，我们可以使用cnpm，并且将cnpm设置为淘宝的镜像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g cnpm --registry=<span class="hljs-attr">https</span>:<span class="hljs-comment">//registry.npm.taobao.org</span><br></code></pre></td></tr></table></figure><p>查看cnpm镜像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">cnpm config get registry<br></code></pre></td></tr></table></figure><h4 id="2-Nodejs工具（supervisor-和nodemon-相同作用"><a href="#2-Nodejs工具（supervisor-和nodemon-相同作用" class="headerlink" title="2.Nodejs工具（supervisor 和nodemon)相同作用"></a>2.Nodejs工具（supervisor 和nodemon)相同作用</h4><h5 id="2-1-supervisor"><a href="#2-1-supervisor" class="headerlink" title="2.1 supervisor"></a>2.1 supervisor</h5><p>supervisor 会不停的watch 你应用下面的所有文件，发现有文件被修改，就重新载入程序文件这样就实现了部署，==<strong>修改了程序文件后马上就能看到变更后的结果</strong>==。再也不用担心重启nodejs </p><p>1.首先安装 supervisor(在cmd控制台输入下方代码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">npm install -g supervisor<br></code></pre></td></tr></table></figure><p>2.使用 supervisor 代替 node 命令启动应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">supervisor app.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><h5 id="2-2-nodemon（用得多）"><a href="#2-2-nodemon（用得多）" class="headerlink" title="2.2 nodemon（用得多）"></a>2.2 nodemon（用得多）</h5><ul><li><strong>==nodemon 和 supervisor 的功能一样，两者安装一个即可==</strong></li><li>使用<code>npm install -g nodemon</code> 下载它（-g 是全局安装）</li><li>在命令行工具中用<code>nodemon</code>命令替代<code>node</code>命令执行文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">nodemon app.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><h5 id="2-3-第三方模块-nrm（切换下载地址）"><a href="#2-3-第三方模块-nrm（切换下载地址）" class="headerlink" title="2.3.第三方模块 nrm（切换下载地址）"></a>2.3.第三方模块 nrm（切换下载地址）</h5><p>rm ( npm registry manager )：npm下载地址切换工具</p><p>npm默认的下载地址在国外，国内下载速度慢</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20220221120222654.png" alt="image-20220221120222654" class="lazyload"></p><p>使用步骤</p><ol><li>使用npm install nrm –g 下载它</li><li>查询可用下载地址列表 nrm ls</li><li>切换npm下载地址 nrm use 下载地址名称</li></ol><h3 id="4、Node-js中模块的加载机制"><a href="#4、Node-js中模块的加载机制" class="headerlink" title="4、Node.js中模块的加载机制"></a>4、Node.js中模块的加载机制</h3><p><strong>4.1 模块查找规则-当模块拥有路径但没有后缀时</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./find.js&#x27;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./find&#x27;</span>);<br></code></pre></td></tr></table></figure><ol><li>require方法根据模块路径查找模块，如果是完整路径，直接引入模块。</li><li>如果模块后缀省略，先找同名JS文件再找同名JS文件夹</li><li>如果找到了同名文件夹，找文件夹中的index.js</li><li>如果文件夹中没有index.js就会去当前文件夹中的package.json文件中查找main选项中的入口文件</li><li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li></ol><p><strong>4.2 模块查找规则-当模块没有路径且没有后缀时</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;find&#x27;</span>);<br></code></pre></td></tr></table></figure><ol><li>Node.js会假设它是系统模块</li><li>Node.js会去node_modules文件夹中</li><li>首先看是否有该名字的JS文件</li><li>再看是否有该名字的文件夹</li><li>如果是文件夹看里面是否有index.js</li><li>如果没有index.js查看该文件夹中的package.json中的main选项确定模块入口文件</li><li>否则找不到报错</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前后端交互 </category>
          
          <category> 数据交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> node.js </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“jQuery基础语法和常用API”</title>
      <link href="/2022/02/08/jQuery%E5%9F%BA%E7%A1%80(1)/"/>
      <url>/2022/02/08/jQuery%E5%9F%BA%E7%A1%80(1)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：JQuery常用API【选择器、样式操作、效果、属性操作、内容文本值、元素操作、JQ尺寸、JQ位置】</p><span id="more"></span><h1 id="jQuery基础语法和常用API"><a href="#jQuery基础语法和常用API" class="headerlink" title="jQuery基础语法和常用API"></a>jQuery基础语法和常用API</h1><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/7b5a594dab4c4c9abcc42e1054e698e8.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="思维导图" class="lazyload"><h2 id="1、jQuery"><a href="#1、jQuery" class="headerlink" title="1、jQuery"></a>1、jQuery</h2><h3 id="1-0、JavaScript库"><a href="#1-0、JavaScript库" class="headerlink" title="1.0、JavaScript库"></a>1.0、JavaScript库</h3><ul><li><p>JavaScript 库：即 library，是一个==封装好====的特定的====集合==（方法和函数）。从封装一大堆函数的角度理解库，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等。</p></li><li><p>简单理解： 就是一个JS 文件，里面对我们原生js代码进行了封装，存放到里面。这样我们可以快速高效的使用这些封装好的功能了。</p></li><li><p>比如 jQuery，就是为了快速方便的操作DOM，里面基本都是函数（方法）。</p></li><li><p>jQuery 是一个快速、简洁的 JavaScript 库，其设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。</p></li><li><p>j 就是 JavaScript； Query 查询； 意思就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能。</p></li><li><p>jQuery 封装了 JavaScript 常用的功能代码，优化了 DOM 操作、事件处理、动画设计和 Ajax 交互。</p></li><li><p>学习jQuery本质： 就是学习调用这些函数（方法）。</p></li><li><p>jQuery 出现的目的是加快前端人员的开发速度，我们可以非常方便的调用和使用它，从而提高开发效率。</p></li></ul><h3 id="1-1、jQuery下载"><a href="#1-1、jQuery下载" class="headerlink" title="1.1、jQuery下载"></a>1.1、jQuery下载</h3><ul><li><p>官网: <a href="https://jquery.com/">https://jquery.com/</a></p></li><li><p>其余版本的下载：<a href="https://code.jquery.com/">https://code.jquery.com/</a></p><ul><li><p>1x ：兼容 IE 678 等低版本浏览器， 官网不再更新</p></li><li><p>2x ：不兼容 IE 678 等低版本浏览器， 官网不再更新</p></li><li><p>3x ：不兼容 IE 678 等低版本浏览器， 是官方主要更新维护的版本</p></li></ul></li></ul><p><strong>1.我们在使用之前要先下载 ，步骤如下，首先打开官网</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/fb31d5f2ca914bbca3c19e0381a18564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>2.打开官网，选择压缩的版本使用即可</strong></p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/bf941edc7f914098816ac512fbadbcbe.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"><p><strong>3.点击压缩版本进入：<code>ctrl+A</code> 全选， <code>ctrl+c</code> 复制</strong></p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/ab8086b9809f40ae9aa859c8e6a05cbf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"><p><strong>4.在vs中新建<code>jquery.min.js</code> 文件（此处任何名称均可，只要是js文件即可）</strong></p><p><strong>5.在html 文件进行引入即可</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src = <span class="hljs-string">&quot;jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-2、jQuery的入口函数"><a href="#1-2、jQuery的入口函数" class="headerlink" title="1.2、jQuery的入口函数"></a>1.2、jQuery的入口函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第一种方法 推荐</span><br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    ...   <span class="hljs-comment">// 此处是页面DOM加载完成的入口 </span><br>&#125;)<br><span class="hljs-comment">// 第二种方法</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    ... <span class="hljs-comment">//此处是页面DOM加载完成的入口</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>==等着 DOM 结构渲染完毕即可执行内部代码==，不必等到所有外部资源加载完毕，jQuery 帮我们完成了封装</li><li>相当于原生 js 中的 DOMContentLoaded</li><li>不同于原生 js 中的 load 事件是等页面文档、外部的 js 文件、css 文件、图片加载完毕才执行内部代码</li><li>更推荐使用第一种方式</li></ul><h3 id="1-3、jQuery的顶级对象"><a href="#1-3、jQuery的顶级对象" class="headerlink" title="1.3、jQuery的顶级对象$"></a>1.3、jQuery的顶级对象$</h3><ol><li>$ 是 jQuery 的别称，在代码中可以使用 jQuery 代替$</li><li>$ 是 jQuery 的顶级对象，相当于原生 JavaScript 中的 window。</li><li><strong>把元素利用$包装成jQuery对象</strong>，就可以调用jQuery的方法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. $ 是jQuery的别称（另外的名字）</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// $(function() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     alert(11)</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">jQuery</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// alert(11)</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&#x27;div&#x27;).hide();</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">jQuery</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">hide</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. $同时也是jQuery的 顶级对象</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-4、jQuery对象和DOM对象"><a href="#1-4、jQuery对象和DOM对象" class="headerlink" title="1.4、jQuery对象和DOM对象"></a>1.4、jQuery对象和DOM对象</h3><p><strong>1.DOM对象</strong>：用原生js获取过来的对象</p><p><strong>2.jQuery对象</strong>: 用jQuery方式获取过来的对象是jQuery对象。</p><p>​       ==本质：通过$把DOM元素进行了包装(伪数组形式存储)==</p><p>3.==jQuery对象只能使用jQuery方法，DOM对象则使用原生的JavaScript的属性和方法==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. DOM 对象:  用原生js获取过来的对象就是DOM对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> myDiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);   <span class="hljs-comment">// myDiv 是DOM对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> mySpan = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>); <span class="hljs-comment">// mySpan 是DOM对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(myDiv);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. jQuery对象:用jquery方式获取过来的对象是jQuery对象。 </span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//    本质:通过$把DOM元素进行了包装</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&#x27;div&#x27;</span>); <span class="hljs-comment">// $(&#x27;div&#x27;)是一个jQuery 对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&#x27;span&#x27;</span>); <span class="hljs-comment">// $(&#x27;span&#x27;)是一个jQuery 对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>($(<span class="hljs-string">&#x27;div&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. jQuery 对象只能使用 jQuery 方法，DOM 对象则使用原生的 JavaScirpt 属性和方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// myDiv.style.display = &#x27;none&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// myDiv.hide(); myDiv是一个dom对象不能使用 jquery里面的hide方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// $(&#x27;div&#x27;).style.display = &#x27;none&#x27;; 这个$(&#x27;div&#x27;)是一个jQuery对象不能使用原生js 的属性和方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="1-5、jQuery对象和DOM对象转化"><a href="#1-5、jQuery对象和DOM对象转化" class="headerlink" title="1.5、jQuery对象和DOM对象转化"></a>1.5、jQuery对象和DOM对象转化</h3><ul><li>DOM 对象与 jQuery 对象之间是可以相互转换的。</li><li>因为原生js 比 jQuery 更大，原生的一些属性和方法 jQuery没有给我们封装. 要想使用这些属性和方法需要把jQuery对象转换为DOM对象才能使用。</li></ul><h4 id="1-5-1、DOM-对象转换为-jQuery-对象"><a href="#1-5-1、DOM-对象转换为-jQuery-对象" class="headerlink" title="1.5.1、DOM 对象转换为 jQuery 对象"></a>1.5.1、DOM 对象转换为 jQuery 对象</h4><ul><li>语法：<code>$(DOM对象)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;div&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-5-2、jQuery-对象转换为-DOM-对象"><a href="#1-5-2、jQuery-对象转换为-DOM-对象" class="headerlink" title="1.5.2、jQuery 对象转换为 DOM 对象"></a>1.5.2、jQuery 对象转换为 DOM 对象</h4><ul><li>语法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 第一种方法</span><br>$(<span class="hljs-string">&#x27;div&#x27;</span>)[index]   index是索引号<br><span class="hljs-comment">// 第二种方法</span><br>$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">get</span>(index) index是索引号<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;mov.mp4&quot;</span> <span class="hljs-attr">muted</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. DOM对象转换为 jQuery对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// (1) 我们直接获取视频，得到就是jQuery对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// $(&#x27;video&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// (2) 我们已经使用原生js 获取过来就是DOM对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> myvideo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;video&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// $(myvideo).play();  jquery里面没有play 这个方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2.  jQuery对象转换为DOM对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// myvideo.play();</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&#x27;video&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">play</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&#x27;video&#x27;</span>).<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">play</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="2、j-Query常用API"><a href="#2、j-Query常用API" class="headerlink" title="2、j Query常用API"></a>2、j Query常用API</h2><h3 id="2-1、jQuery选择器"><a href="#2-1、jQuery选择器" class="headerlink" title="2.1、jQuery选择器"></a>2.1、jQuery选择器</h3><h4 id="2-1-0、jQuery基础选择器"><a href="#2-1-0、jQuery基础选择器" class="headerlink" title="2.1.0、jQuery基础选择器"></a>2.1.0、jQuery基础选择器</h4><p>原生 JS 获取元素方式很多，很杂，而且兼容性情况不一致，因此 jQuery 给我们做了封装，使获取元素统一标准。</p><p>语法：<code>$(&quot;选择器&quot;)</code> 里面选择器直接写CSS选择器即可，但是要加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.nav&quot;</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>ID选择器</td><td><code>$(&quot;#id&quot;)</code></td><td>获取指定ID的元素</td></tr><tr><td>全选选择器</td><td><code>$(&#39;*&#39;)</code></td><td>匹配所有元素</td></tr><tr><td>类选择器</td><td><code>$(&quot;.class&quot;)</code></td><td>获取同一类class的元素</td></tr><tr><td>标签选择器</td><td><code>$(&quot;.div&quot;)</code></td><td>获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td><code>$(&quot;div,p,li&quot;)</code></td><td>选取多个元素</td></tr><tr><td>交集选择器</td><td><code>$(&quot;li.current&quot;)</code></td><td>交集元素</td></tr></tbody></table><h4 id="2-1-1、jQuery层级选择器"><a href="#2-1-1、jQuery层级选择器" class="headerlink" title="2.1.1、jQuery层级选择器"></a>2.1.1、jQuery层级选择器</h4><table><thead><tr><th>名称</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>子代选择器</td><td><code>$(&quot;ul&gt;li&quot;)</code></td><td>使用&gt;号，获取亲儿子层级的选择器；注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td><code>$(&quot;ul li&quot;)</code></td><td>使用空格，代表后代选择器，获取 ul 下的所有 li 元素，包括孙子等</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span>我是nav div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ol 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ol 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ol 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ol 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul 的<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;.nav&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;ul li&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-1-2、知识铺垫"><a href="#2-1-2、知识铺垫" class="headerlink" title="2.1.2、知识铺垫"></a>2.1.2、知识铺垫</h4><p>jQuery 设置样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;属性&#x27;</span>,<span class="hljs-string">&#x27;值&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-1-3、jQuery隐式迭代"><a href="#2-1-3、jQuery隐式迭代" class="headerlink" title="2.1.3、jQuery隐式迭代"></a>2.1.3、jQuery隐式迭代</h4><ul><li>遍历内部DOM元素(伪数组形式存储)的过程就叫做 <strong>隐式迭代</strong></li><li>简单理解: 给匹配到的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>惊喜不，意外不<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>惊喜不，意外不<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>惊喜不，意外不<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>惊喜不，意外不<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>相同的操作<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>相同的操作<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>相同的操作<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 获取四个div元素 </span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 给四个div设置背景颜色为粉色 jquery对象不能使用style</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 隐式迭代就是把匹配的所有元素内部进行遍历循环，给每一个元素添加css这个方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="jQuery筛选选择器"><a href="#jQuery筛选选择器" class="headerlink" title="jQuery筛选选择器"></a>jQuery筛选选择器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 选取 ul 里面的 第一个 li</span><br>$(<span class="hljs-string">&quot;ul li:first&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);<br></code></pre></td></tr></table></figure><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>: first</td><td><code>$(&#39;li:first&#39;)</code></td><td>获取第一个li元素</td></tr><tr><td>: last</td><td><code>$(&#39;li:last&#39;)</code></td><td>获取最后一个li元素</td></tr><tr><td>: eq(index)</td><td><code>$(&quot;li:eq(2)&quot;)</code></td><td>获取到的li元素中，选择索引号为2的元素，索引号index从0开始</td></tr><tr><td>: odd</td><td><code>$(&quot;li:odd&quot;)</code></td><td>获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>: even</td><td><code>$(&quot;li:even&quot;)</code></td><td>获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;!-- 有序列表 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>多个里面筛选几个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 获取第一个li元素</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;ul li:first&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 获取索引号为2的li</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;ul li:eq(2)&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 获取索引号为奇数的li</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;ol li:odd&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;skyblue&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 获取索引号为偶数的li</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;ol li:even&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-jQuery筛选方法"><a href="#2-1-4-jQuery筛选方法" class="headerlink" title="2.1.4 jQuery筛选方法"></a>2.1.4 jQuery筛选方法</h4><table><thead><tr><th>语法</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>🔥parent()</td><td><code>$(&quot;li&quot;).parent();</code></td><td>查找父级，最近一级的父元素</td></tr><tr><td>🔥children(selector)</td><td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td><td>相当于<code>$(&quot;ul&gt;li&quot;)</code>,最近一级(亲儿子)</td></tr><tr><td>🔥find(selector)</td><td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td><td>相当于<code>$(&quot;ul li&quot;)</code> 后代选择器</td></tr><tr><td>🔥siblings(selector)</td><td><code>$(&quot;.first&quot;).siblings(&quot;li&quot;)</code></td><td>查找兄弟节点，<strong>不包括自己本身</strong></td></tr><tr><td>nextAll([expr])</td><td><code>$(&quot;.first&quot;).nextAll()</code></td><td>查找当前元素<strong>之后</strong>所有的同辈元素</td></tr><tr><td>prevtAll([expr])</td><td><code>$(&quot;.last&quot;).prevAll()</code></td><td>查找当前元素<strong>之前</strong>所有的同辈元素</td></tr><tr><td>hasClass(class)</td><td><code>$(&#39;div&#39;).hasClass(&quot;protected&quot;)</code></td><td>检查当前的元素是否含有某个特定的类，如果有，则返回true</td></tr><tr><td>🔥eq(index)</td><td><code>$(&quot;li&quot;).eq(2);</code></td><td>相当于<code>$(&quot;li:eq(2),index&quot;)</code>index从0开始</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yeye&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>儿子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是屁<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 注意一下都是方法 带括号</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. 父  parent()  返回的是 最近一级的父级元素 亲爸爸</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">parent</span>());</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. 子</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// (1) 亲儿子 children()  类似子代选择器  ul&gt;li</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;.nav&quot;).children(&quot;p&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// (2) 可以选里面所有的孩子 包括儿子和孙子  find() 类似于后代选择器</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;.nav&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>); </span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-1-5-jQuery排他思想"><a href="#2-1-5-jQuery排他思想" class="headerlink" title="2.1.5 jQuery排他思想"></a>2.1.5 jQuery排他思想</h4><ul><li>想要多选一的效果，排他思想：==当前元素设置样式，其余的兄弟元素清除样式==。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. 隐式迭代 给所有的按钮都绑定了点击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 2. 当前的元素变化背景颜色</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 3. 其余的兄弟去掉背景颜色 隐式迭代</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-1-6-jQuerty链式编程"><a href="#2-1-6-jQuerty链式编程" class="headerlink" title="2.1.6 jQuerty链式编程"></a>2.1.6 jQuerty链式编程</h4><p>链式编程是为了节省代码量，看起来更优雅。使用链式编程一定注意是哪个对象执行样式.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>快速<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. 隐式迭代 给所有的按钮都绑定了点击事件</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 2. 让当前元素颜色变为红色(点击哪个哪个就变为红色)</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// $(this).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 3. 让其余的兄弟元素不变色 </span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// $(this).siblings().css(&quot;color&quot;, &quot;&quot;);      </span></span></span><br><span class="language-javascript"><span class="language-xml">                </span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 链式编程完成上述功能</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="2-2、jQuery样式操作"><a href="#2-2、jQuery样式操作" class="headerlink" title="2.2、jQuery样式操作"></a>2.2、jQuery样式操作</h3><h4 id="2-2-1、jQuery修改样式css方法"><a href="#2-2-1、jQuery修改样式css方法" class="headerlink" title="2.2.1、jQuery修改样式css方法"></a>2.2.1、jQuery修改样式css方法</h4><p>jQuery 可以使用 css 方法来修改简单元素样式； 也可以操作类，修改多个样式</p><ol><li>参数只写属性名,则返回属性值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>);<br></code></pre></td></tr></table></figure><p>2.参数是属性名,属性值,逗号分隔,是设定一组样式。==属性需要加引号,值是数字可不加单位和引号==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-number">300</span>);<br></code></pre></td></tr></table></figure><p>3.参数可以是对象形式,方便设置多组样式。==属性名和属性值用冒号隔开,属性可以不用加引号==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">css</span>(&#123;<br>    <span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-comment">// 如果是复合属性则必须采取驼峰命名法，如果值不是数字，则需要加引号</span><br>    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;red&quot;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-2-2、jQuery设置类样式方法"><a href="#2-2-2、jQuery设置类样式方法" class="headerlink" title="2.2.2、jQuery设置类样式方法"></a>2.2.2、jQuery设置类样式方法</h4><p>作用等同于以前的 classList，可以操作类样式， ==注意操作类里面的参数不要加点==。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.添加类</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;current&quot;</span>);<br><br><span class="hljs-comment">// 2.移除类</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;current&quot;</span>);<br><br><span class="hljs-comment">// 3.切换类</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;current&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        div &#123;<br>            width: 150px;<br>            height: 150px;<br>            background-color: pink;<br>            margin: 100px auto;<br>            transition: all 0.5s;<br>        &#125;<br>        .current &#123;<br>            background-color: red;<br>            transform: rotate(360deg);<br>        &#125;<br>    &lt;/style&gt;<br>    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div class=&quot;current&quot;&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        $(function() &#123;<br>            // 1. 添加类 addClass()<br>            // $(&quot;div&quot;).click(function() &#123;<br>            //     // $(this).addClass(&quot;current&quot;);<br>            // &#125;);<br>            // 2. 删除类 removeClass()<br>            // $(&quot;div&quot;).click(function() &#123;<br>            //     $(this).removeClass(&quot;current&quot;);<br>            // &#125;);<br>            // 3. 切换类 toggleClass()<br>            $(&quot;div&quot;).click(function() &#123;<br>                $(this).toggleClass(&quot;current&quot;);<br>            &#125;);<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-2-3、jQuery类操作和className区别"><a href="#2-2-3、jQuery类操作和className区别" class="headerlink" title="2.2.3、jQuery类操作和className区别"></a>2.2.3、jQuery类操作和className区别</h4><ul><li>原生 JS 中的 className 会覆盖元素原先里面的类名</li><li>jQuery里面类操作只是对指定类进行操作，不影响原先的类名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one two&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// var one = document.querySelector(&quot;.one&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// one.className = &quot;two&quot;;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// $(&quot;.one&quot;).addClass(&quot;two&quot;);  这个addClass相当于追加类名 不影响以前的类名</span></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;.one&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;two&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="2-3、jQuery效果"><a href="#2-3、jQuery效果" class="headerlink" title="2.3、jQuery效果"></a>2.3、jQuery效果</h3><h4 id="2-3-1、jQuery显示与隐藏效果"><a href="#2-3-1、jQuery显示与隐藏效果" class="headerlink" title="2.3.1、jQuery显示与隐藏效果"></a>2.3.1、jQuery显示与隐藏效果</h4><p>jQuery 给我们封装了很多动画效果，最为常见的如下：</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/b357f95c4a3641139e56cae9212db87c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h6 id="①显示效果"><a href="#①显示效果" class="headerlink" title="①显示效果"></a>①显示效果</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 显示语法规范</span><br><span class="hljs-title function_">show</span>([speed,[easing],[fn]])       <span class="hljs-comment">//中括号表示参数都可以省略</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">show</span>();<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h6 id="②隐藏效果"><a href="#②隐藏效果" class="headerlink" title="②隐藏效果"></a>②隐藏效果</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 隐藏语法规范</span><br><span class="hljs-title function_">hide</span>([speed,[easing],[fn]])<br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">hide</span>();<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><h6 id="③切换效果"><a href="#③切换效果" class="headerlink" title="③切换效果"></a>③切换效果</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 切换语法规范</span><br><span class="hljs-title function_">toggle</span>([speed,[easing],[fn]])<br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">toggle</span>();<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>参数都可以省略， 无动画直接显示。</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。</li><li>easing：(Optional) 用来指定切换效果，默认是“swing”，可用参数“linear”。</li><li>fn: 回调函数，在动画完成时执行的函数，每个元素执行一次。</li></ul><p>建议：==平时一般不带参数，直接显示隐藏即可==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>隐藏<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">show</span>(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">hide</span>(<span class="hljs-number">1000</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    <span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">toggle</span>(<span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 一般情况下，我们都不加参数直接显示隐藏就可以了</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-3-2、jQuery滑动效果与事件切换"><a href="#2-3-2、jQuery滑动效果与事件切换" class="headerlink" title="2.3.2、jQuery滑动效果与事件切换"></a>2.3.2、jQuery滑动效果与事件切换</h4><h6 id="①下滑动"><a href="#①下滑动" class="headerlink" title="①下滑动"></a>①下滑动</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 下滑动</span><br><span class="hljs-title function_">slideDown</span>([speed,[easing],[fn]]) <br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">slideDown</span>();<br></code></pre></td></tr></table></figure><h6 id="②上滑动"><a href="#②上滑动" class="headerlink" title="②上滑动"></a>②上滑动</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 上滑动</span><br><span class="hljs-title function_">slideUp</span>([speed,[easing],[fn]]) <br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">slideUp</span>();<br></code></pre></td></tr></table></figure><h6 id="③滑动切换"><a href="#③滑动切换" class="headerlink" title="③滑动切换"></a>③滑动切换</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 滑动切换效果</span><br><span class="hljs-title function_">slideToggle</span>([speed,[easing],[fn]]) <br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">slideToggle</span>();<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>下拉滑动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>上拉滑动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>切换滑动<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 下滑动 slideDown()</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">slideDown</span>();</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 上滑动 slideUp()</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">slideUp</span>(<span class="hljs-number">500</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 滑动切换 slideToggle()</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">slideToggle</span>(<span class="hljs-number">500</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h6 id="④事件切换"><a href="#④事件切换" class="headerlink" title="④事件切换"></a>④事件切换</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">hover</span>([over,]out)<br></code></pre></td></tr></table></figure><ul><li>over: 鼠标移到元素上要触发的函数(相当于mouseenter)</li><li>out: 鼠标移出元素要触发的函数(相当于mouseleave)</li><li>如果只写一个函数，则鼠标经过和离开都会触发它</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br><span class="hljs-comment">// 第一个function是鼠标经过的函数</span><br><span class="hljs-comment">// 第二个function是鼠标离开的函数</span><br><span class="hljs-comment">// 如果hover只写一个函数,那么鼠标经过和鼠标离开都会触发这个函数</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">slideToggle</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-3-3、jQuery动画队列及其停止排队方法"><a href="#2-3-3、jQuery动画队列及其停止排队方法" class="headerlink" title="2.3.3、jQuery动画队列及其停止排队方法"></a>2.3.3、jQuery动画队列及其停止排队方法</h4><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行</p><h6 id="①停止排队"><a href="#①停止排队" class="headerlink" title="①停止排队"></a>①停止排队</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">stop</span>()<br></code></pre></td></tr></table></figure><ul><li>stop()方法用于停止动画或者效果</li><li>注意: stop() 写到动画或者效果的前面，相当于停止结束上一次的动画</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.nav&gt;li&quot;</span>).<span class="hljs-title function_">hover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// stop 方法必须写到动画的前面</span><br>    $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">stop</span>().<span class="hljs-title function_">slideToggle</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-3-4、jQuery淡入淡出以及突出效果"><a href="#2-3-4、jQuery淡入淡出以及突出效果" class="headerlink" title="2.3.4、jQuery淡入淡出以及突出效果"></a>2.3.4、jQuery淡入淡出以及突出效果</h4><h6 id="①淡入淡出切换"><a href="#①淡入淡出切换" class="headerlink" title="①淡入淡出切换"></a>①淡入淡出切换</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 淡入</span><br><span class="hljs-title function_">fadeIn</span>([speed,[easing],[fn]])<br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">fadeIn</span>();<br><br><span class="hljs-comment">// 淡出</span><br><span class="hljs-title function_">fadeOut</span>([speed,[easing],[fn]])<br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-property">fadeOut</span>;<br><br><span class="hljs-comment">// 淡入淡出切换</span><br><span class="hljs-title function_">fadeToggle</span>([speed,[easing],[fn]])<br></code></pre></td></tr></table></figure><h6 id="②渐进方式调整到指定的不透明度"><a href="#②渐进方式调整到指定的不透明度" class="headerlink" title="②渐进方式调整到指定的不透明度"></a>②渐进方式调整到指定的不透明度</h6><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改透明度   这个速度和透明度必须写</span><br><span class="hljs-title function_">fadeTo</span>(speed,opacity,[easing],[fn])<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>opacity ：==透明度必须写，取值 0~1 之间==</li><li>speed：三种预定速度之一的字符串(“slow”,“normal”, or “fast”)或表示动画时长的毫秒数值(如：1000)。==必须写==</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>淡入效果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>淡出效果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>淡入淡出切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>修改透明度<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 淡入 fadeIn()</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">fadeIn</span>(<span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 淡出 fadeOut()</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">fadeOut</span>(<span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 淡入淡出切换 fadeToggle()</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">fadeToggle</span>(<span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">//  修改透明度 fadeTo() 这个速度和透明度要必须写</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">fadeTo</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">0.5</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br><br></code></pre></td></tr></table></figure><h4 id="2-3-5、jQuery自定义动画animate方法"><a href="#2-3-5、jQuery自定义动画animate方法" class="headerlink" title="2.3.5、jQuery自定义动画animate方法"></a>2.3.5、jQuery自定义动画animate方法</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">animate</span>(params,[speed],[easing],[fn])<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li>params: ==想要更改的样式属性，以对象形式传递，必须写。 属性名可以不用带引号， 如果是复合属性则需要采取驼峰命名法 borderLeft==。其余参数都可以省略。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;<br>    &lt;style&gt;<br>        div &#123;<br>            position: absolute;<br>            width: 200px;<br>            height: 200px;<br>            background-color: pink;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;button&gt;动起来&lt;/button&gt;<br>    &lt;div&gt;&lt;/div&gt;<br>    &lt;script&gt;<br>        $(function() &#123;<br>            $(&quot;button&quot;).click(function() &#123;<br>                $(&quot;div&quot;).animate(&#123;<br>                    left: 500,<br>                    top: 300,<br>                    opacity: .4,<br>                    width: 500<br>                &#125;, 500);<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="2-4、jQuery属性操作"><a href="#2-4、jQuery属性操作" class="headerlink" title="2.4、jQuery属性操作"></a>2.4、jQuery属性操作</h3><h4 id="2-4-1、获取元素固有属性值prop"><a href="#2-4-1、获取元素固有属性值prop" class="headerlink" title="2.4.1、获取元素固有属性值prop()"></a>2.4.1、获取元素固有属性值prop()</h4><p>所谓元素固有属性就是元素本身自带的属性，比如 <code>&lt;a&gt;</code> 元素里面的 href ，比如 <code>&lt;input&gt;</code> 元素里面的 type。</p><p>语法：<code>prop(&quot;属性&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;属性&quot;</span>)<br>$(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;href&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="2-4-2、设置元素固有属性值"><a href="#2-4-2、设置元素固有属性值" class="headerlink" title="2.4.2、设置元素固有属性值"></a>2.4.2、设置元素固有属性值</h5><p>语法：<code>prop(&quot;属性&quot;,&quot;属性值&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;属性&quot;</span>,<span class="hljs-string">&quot;属性值&quot;</span>)<br>$(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;我们都挺好~&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="2-4-3、获取元素自定义属性值"><a href="#2-4-3、获取元素自定义属性值" class="headerlink" title="2.4.3、获取元素自定义属性值"></a>2.4.3、获取元素自定义属性值</h5><p>用户自己给元素添加的属性，我们称为自定义属性。 比如给 div 添加 index =“1”。</p><p>语法：<code>attr(&quot;属性&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;属性&quot;</span>)   <span class="hljs-comment">// 类似原生getAttribute()</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;index&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="2-4-4、设置元素自定义属性值"><a href="#2-4-4、设置元素自定义属性值" class="headerlink" title="2.4.4、设置元素自定义属性值"></a>2.4.4、设置元素自定义属性值</h5><p>语法：<code>attr(&quot;属性&quot;,&quot;属性值&quot;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;属性&quot;</span>,<span class="hljs-string">&quot;属性值&quot;</span>)  <span class="hljs-comment">//类似原生setAttribute()</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;index&quot;</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.itcast.cn&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;都挺好&quot;</span>&gt;</span>都挺好<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">checked</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">data-index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//1. element.prop(&quot;属性名&quot;) 获取元素固有的属性值</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;href&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;我们都挺好&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;checked&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// console.log($(&quot;div&quot;).prop(&quot;index&quot;));</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. 元素的自定义属性 我们通过 attr()</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;index&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;index&quot;</span>, <span class="hljs-number">4</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;data-index&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;uname&quot;</span>, <span class="hljs-string">&quot;andy&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;uname&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;index&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="2-4-5、数据缓存data"><a href="#2-4-5、数据缓存data" class="headerlink" title="2.4.5、数据缓存data()"></a>2.4.5、数据缓存data()</h5><p>data() 方法可以在指定的元素上存取数据,并不会修改DOM元素结构，一旦页面刷新，之前存放的数据都将被移除。</p><h6 id="①附加数据语法"><a href="#①附加数据语法" class="headerlink" title="①附加数据语法"></a>①附加数据语法</h6><ul><li>语法：<code>data(&quot;name&quot;,&quot;value&quot;)</code> 向被选元素附加数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;uname&quot;</span>,<span class="hljs-string">&quot;andy&quot;</span>);<br></code></pre></td></tr></table></figure><h6 id="②获取数据语法"><a href="#②获取数据语法" class="headerlink" title="②获取数据语法"></a>②获取数据语法</h6><ul><li>语法：<code>date(&quot;name&quot;)</code> 向被选元素获取数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;uname&quot;</span>);<br><span class="hljs-comment">// 这个方法获取data-index h5自定义属性，不用写 data- 返回的是数字型(2)</span><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;index&quot;</span>);<br></code></pre></td></tr></table></figure><p>同时，还可以读取H5自定义属性 data-index,得到的是数字型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 3. 数据缓存 data() 这个里面的数据是存放在元素的内存里面</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;uname&quot;</span>, <span class="hljs-string">&quot;andy&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;uname&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 这个方法获取data-index h5自定义属性 第一个 不用写data-  而且返回的是数字型</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">data</span>(<span class="hljs-string">&quot;index&quot;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="2-5、jQuery内容文本值"><a href="#2-5、jQuery内容文本值" class="headerlink" title="2.5、jQuery内容文本值"></a>2.5、jQuery内容文本值</h3><p>主要针对元素的<strong>内容</strong>还有<strong>表单的值</strong>操作</p><h4 id="2-5-1-普通元素内容html"><a href="#2-5-1-普通元素内容html" class="headerlink" title="2.5.1 普通元素内容html()"></a>2.5.1 普通元素内容html()</h4><p>相当于原生<strong>innerHTML</strong></p><p>语法：</p><ul><li>获取元素的内容：<code>html()</code></li><li>设置元素的内容：<code>html(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>();<br><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">// 获取过来的带的标签 &lt;span&gt;123&lt;/span&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-2、普通元素文本内容text"><a href="#2-5-2、普通元素文本内容text" class="headerlink" title="2.5.2、普通元素文本内容text()"></a>2.5.2、普通元素文本内容text()</h4><p>相当于原生<strong>innerText</strong></p><p>语法：</p><ul><li>获取元素的文本内容：<code>text()</code></li><li>设置元素的文本内容：<code>text(&quot;文本内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>();<br><br>$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">// 123  </span><br><span class="hljs-comment">// 获取过来的不带标签 123</span><br></code></pre></td></tr></table></figure><h4 id="2-5-3、获取设置表单值-val"><a href="#2-5-3、获取设置表单值-val" class="headerlink" title="2.5.3、获取设置表单值 val()"></a>2.5.3、获取设置表单值 val()</h4><p>语法：</p><ul><li>获取表单的的值：<code>val()</code></li><li>设置表单的值：<code>val(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>();<br><br>$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;请输入内容~~~&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入内容&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 获取设置元素内容 html()</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">html</span>());</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// $(&quot;div&quot;).html(&quot;123&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 获取设置元素文本内容 text()</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>());</span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;123&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 获取设置表单值 val()</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>());</span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;123&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-6、jQuery元素操作"><a href="#2-6、jQuery元素操作" class="headerlink" title="2.6、jQuery元素操作"></a>2.6、jQuery元素操作</h3><p>主要是<strong>遍历，创建，添加，删除元素</strong>操作</p><h4 id="2-6-1、遍历元素"><a href="#2-6-1、遍历元素" class="headerlink" title="2.6.1、遍历元素"></a>2.6.1、遍历元素</h4><p>jQuery隐式迭代是对同一类元素做了同样的操作，如果想要给同一类元素做不同操作，就需要用到遍历</p><h6 id="①语法一"><a href="#①语法一" class="headerlink" title="①语法一"></a>①语法一</h6><ul><li>语法一：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JS">$(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">index,domEle</span>)&#123;xxx;&#125;)<br></code></pre></td></tr></table></figure><ul><li>each()方法遍历匹配的每一个元素。主要用DOM处理。each每一个</li><li>里面的回调函数有2个参数: index是每个元素的索引号,==demEle是每个DOM元素==，不是jQuery对象</li><li>所以想要使用jQuery方法，==需要给这个dom元素转换为jquery对象 $(domEle)==</li></ul><h6 id="②语法二"><a href="#②语法二" class="headerlink" title="②语法二"></a>②语法二</h6><ul><li>语法二：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">each</span>(<span class="hljs-title class_">Object</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">index,element</span>)&#123;xxx;&#125;)<br></code></pre></td></tr></table></figure><ul><li>$.each() 方法可用于遍历任何对象，主要用于数据处理,比如数组,对象</li><li>里面的函数有2个参数: index 是每个元素的索引号,element遍历内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;div&quot;).css(&quot;color&quot;, &quot;red&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 如果针对于同一类元素做不同操作，需要用到遍历元素（类似for，但是比for强大）</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. each() 方法遍历元素 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>];</span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">i, domEle</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 回调函数第一个参数一定是索引号  可以自己指定索引号号名称</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// console.log(index);</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// console.log(i);</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 回调函数第二个参数一定是 dom元素对象 也是自己命名</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// console.log(domEle);</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// domEle.css(&quot;color&quot;); dom对象没有css方法</span></span></span><br><span class="language-javascript"><span class="language-xml">                $(domEle).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>, arr[i]);</span></span><br><span class="language-javascript"><span class="language-xml">                sum += <span class="hljs-built_in">parseInt</span>($(domEle).<span class="hljs-title function_">text</span>());</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. $.each() 方法遍历元素 主要用于遍历数据，处理数据</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $.each($(&quot;div&quot;), function(i, ele) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     console.log(i);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     console.log(ele);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $.each(arr, function(i, ele) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     console.log(i);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     console.log(ele);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">            $.<span class="hljs-title function_">each</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;andy&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-attr">age</span>: <span class="hljs-number">18</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">i, ele</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 输出的是 name age 属性名</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ele); <span class="hljs-comment">// 输出的是 andy  18 属性值</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-6-2、创建元素"><a href="#2-6-2、创建元素" class="headerlink" title="2.6.2、创建元素"></a>2.6.2、创建元素</h4><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);<br><span class="hljs-comment">// 动态创建一个li标签</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var li = $(&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;);<br>var div =$(&quot;&lt;div&gt;我是后来的div&lt;/div&gt;&quot;)<br></code></pre></td></tr></table></figure><h4 id="2-6-3、添加元素"><a href="#2-6-3、添加元素" class="headerlink" title="2.6.3、添加元素"></a>2.6.3、添加元素</h4><h6 id="①内部添加"><a href="#①内部添加" class="headerlink" title="①内部添加"></a>①内部添加</h6><p>语法：</p><ul><li>把内容放入匹配元素内部最后面：<code>element.append(&quot;内容&quot;)</code></li><li>把内容放入匹配元素内部最前面：<code>element.prepend(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.内部添加</span><br>element.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;内容&quot;</span>)<br>$(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">append</span>(li);<br><span class="hljs-comment">// 把内容放入匹配元素内部最后面，类似原生appendChild</span><br><br>element.<span class="hljs-title function_">prepend</span>(<span class="hljs-string">&quot;内容&quot;</span>)<br>$(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">prepend</span>(li);<br><span class="hljs-comment">// 把内容放入匹配元素内部最前面</span><br></code></pre></td></tr></table></figure><h6 id="②外部添加"><a href="#②外部添加" class="headerlink" title="②外部添加"></a>②外部添加</h6><p>语法：</p><ul><li>外部添加把内容放到目标元素后面：<code>element.after(&quot;内容&quot;)</code></li><li>外部添加把内容放到目标元素前面：<code>element.before(&quot;内容&quot;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.外部添加</span><br>element.<span class="hljs-title function_">after</span>(<span class="hljs-string">&quot;内容&quot;</span>);<br>$(<span class="hljs-string">&quot;.test&quot;</span>).<span class="hljs-title function_">after</span>(div);<br><span class="hljs-comment">// 把内容放入目标元素后面</span><br><br>element.<span class="hljs-title function_">before</span>(<span class="hljs-string">&quot;内容&quot;</span>);<br><span class="hljs-comment">// 把内容放入目标元素前面</span><br></code></pre></td></tr></table></figure><ul><li>==内部添加元素，生成之后，它们是父子关系==</li><li>==外部添加元素，生成之后，它们是兄弟关系==</li></ul><h4 id="2-6-4、删除元素"><a href="#2-6-4、删除元素" class="headerlink" title="2.6.4、删除元素"></a>2.6.4、删除元素</h4><p>语法：</p><ul><li>删除匹配的元素(本身)：element.remove()</li><li>删除匹配的元素集合中所有的子节点：element.empty()</li><li>清空匹配的元素内容：element.html(“”)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>element.<span class="hljs-title function_">remove</span>()      <span class="hljs-comment">//删除匹配的元素(本身)</span><br>$(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">remove</span>();<br><br><span class="hljs-number">2.</span>element.<span class="hljs-title function_">empty</span>()       <span class="hljs-comment">//删除匹配元素里面的子结点(孩子)</span><br>$(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">empty</span>();<br><br><span class="hljs-number">3.</span>element.<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&quot;</span>)      <span class="hljs-comment">//删除匹配元素里面的子结点(孩子)</span><br></code></pre></td></tr></table></figure><ul><li>==remove 删除元素本身==</li><li>==empt() 和 html(“”) 作用等价，都可以删除元素黎曼的内容，只不过 html 还可以设置内容。==</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>原先的li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>我是原先的div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. 创建元素</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;&lt;li&gt;我是后来创建的li&lt;/li&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. 添加元素</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// (1) 内部添加</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;ul&quot;).append(li);  内部添加并且放到内容的最后面 </span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">prepend</span>(li); <span class="hljs-comment">// 内部添加并且放到内容的最前面</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// (2) 外部添加</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> div = $(<span class="hljs-string">&quot;&lt;div&gt;我是后妈生的&lt;/div&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;.test&quot;).after(div);</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;.test&quot;</span>).<span class="hljs-title function_">before</span>(div);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 3. 删除元素</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;ul&quot;).remove(); 可以删除匹配的元素 自杀</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;ul&quot;).empty(); // 可以删除匹配的元素里面的子节点 孩子</span></span></span><br><span class="language-javascript"><span class="language-xml">            $(<span class="hljs-string">&quot;ul&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 可以删除匹配的元素里面的子节点 孩子</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="2-7、jQuery-尺寸"><a href="#2-7、jQuery-尺寸" class="headerlink" title="2.7、jQuery 尺寸"></a>2.7、jQuery 尺寸</h3><table><thead><tr><th>语法</th><th>用法</th></tr></thead><tbody><tr><td>width() / height()</td><td>取得匹配元素宽度和高度值，只算 width / height</td></tr><tr><td>innerWidth() / innerHeight()</td><td>取得匹配元素宽度和高度值，包含padding</td></tr><tr><td>outerWidth() / outerHeight()</td><td>取得匹配元素宽度和高度值，包含padding、border</td></tr><tr><td>outerWidth(true) / outerHeight(true)</td><td>取得匹配元素宽度和高度值，包含padding、border、margin</td></tr></tbody></table><ul><li>以上参数为空，则是获取相应值，返回的是数字型</li><li>如果参数为数字，则是修改相应值</li><li>参数可以不必写单位</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. width() / height() 获取设置元素 width和height大小 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">width</span>());</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;div&quot;).width(300);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. innerWidth() / innerHeight()  获取设置元素 width和height + padding 大小 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">innerWidth</span>());</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 3. outerWidth()  / outerHeight()  获取设置元素 width和height + padding + border 大小 </span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">outerWidth</span>());</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 4. outerWidth(true) / outerHeight(true) 获取设置 width和height + padding + border + margin</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">outerWidth</span>(<span class="hljs-literal">true</span>));</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="2-8、jQuery位置"><a href="#2-8、jQuery位置" class="headerlink" title="2.8、jQuery位置"></a>2.8、jQuery位置</h3><p>位置主要有三个： offset()、position()、scrollTop()/scrollLeft()</p><h4 id="2-8-1、offset-设置或获取元素偏移"><a href="#2-8-1、offset-设置或获取元素偏移" class="headerlink" title="2.8.1、offset() 设置或获取元素偏移"></a>2.8.1、offset() 设置或获取元素偏移</h4><p>1- offset() 方法设置或返回被选元素相对于<strong>文档</strong>的偏移坐标，<strong>跟父级没有关系</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">offset</span>();<br>$(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>;<br><br>$(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">offset</span>(&#123;<br>    <span class="hljs-attr">top</span>: <span class="hljs-number">200</span>,<br>    <span class="hljs-attr">left</span>: <span class="hljs-number">200</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>该方法有两个属性 left、top.<ul><li><code>offset().top</code>用于获取距离文档顶部的距离，</li><li><code>offset().left</code> 用于获取距离文档左侧的距离</li></ul></li><li>①可以设置元素的偏移：offset({ top: 10, left: 30 });</li></ul><h4 id="2-8-2、position-获取元素偏移"><a href="#2-8-2、position-获取元素偏移" class="headerlink" title="2.8.2、position()获取元素偏移"></a>2.8.2、position()获取元素偏移</h4><ul><li><p>position() 方法用于返回被选元素相对于<strong>带有定位的父级</strong>偏移坐标，如果父级都没有定位，则以文档为准</p></li><li><p>该方法有2个属性 left、top。</p><ul><li>offset().top`用于获取距离文档顶部的距离，</li><li><code>offset().left</code> 用于获取距离文档左侧的距离</li></ul></li><li><p>①可以设置元素的偏移：offset({ top: 10, left: 30 });</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">position</span>();<br><span class="hljs-comment">// 这个方法只能获取偏移，不能设置偏移</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. 获取设置距离文档的位置（偏移） offset</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">offset</span>());</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;.son&quot;).offset(&#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     top: 200,</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     left: 200</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. 获取距离带有定位父级位置（偏移） position   如果没有带有定位的父级，则以文档为准</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 这个方法只能获取不能设置偏移</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;.son&quot;</span>).<span class="hljs-title function_">position</span>());</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// $(&quot;.son&quot;).position(&#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     top: 200,</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     left: 200</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="2-8-3-scrollTop-scrollLeft-设置或获取元素被卷去的头部和左侧"><a href="#2-8-3-scrollTop-scrollLeft-设置或获取元素被卷去的头部和左侧" class="headerlink" title="2.8.3 scrollTop() / scrollLeft() 设置或获取元素被卷去的头部和左侧"></a>2.8.3 scrollTop() / scrollLeft() 设置或获取元素被卷去的头部和左侧</h4><ul><li><code>scrollTop()</code>方法设置或返回被选元素被卷去的头部。</li><li>不跟参数是获取，参数为不带单位的数字则是设置被卷去的头部。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 页面滚动事件</span><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs JS">&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            height: 2000px;<br>        &#125;<br>        .back &#123;<br>            position: fixed;<br>            width: 50px;<br>            height: 50px;<br>            background-color: pink;<br>            right: 30px;<br>            bottom: 100px;<br>            display: none;<br>        &#125;<br>        <br>        .container &#123;<br>            width: 900px;<br>            height: 500px;<br>            background-color: skyblue;<br>            margin: 400px auto;<br>        &#125;<br>    &lt;/style&gt;<br>    &lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;div class=&quot;back&quot;&gt;返回顶部&lt;/div&gt;<br>    &lt;div class=&quot;container&quot;&gt;<br>    &lt;/div&gt;<br>    &lt;script&gt;<br>        $(function() &#123;<br>            $(document).scrollTop(100);<br>            // 被卷去的头部 scrollTop()  / 被卷去的左侧 scrollLeft()<br>            // 页面滚动事件<br>            var boxTop = $(&quot;.container&quot;).offset().top;<br>            $(window).scroll(function() &#123;<br>                // console.log(11);<br>                console.log($(document).scrollTop());<br>                if ($(document).scrollTop() &gt;= boxTop) &#123;<br>                    $(&quot;.back&quot;).fadeIn();<br>                &#125; else &#123;<br>                    $(&quot;.back&quot;).fadeOut();<br>                &#125;<br>            &#125;);<br>            // 返回顶部<br>            $(&quot;.back&quot;).click(function() &#123;<br>                // $(document).scrollTop(0);<br>                $(&quot;body, html&quot;).stop().animate(&#123;<br>                    scrollTop: 0<br>                &#125;);<br>                // $(document).stop().animate(&#123;<br>                //     scrollTop: 0<br>                // &#125;); 不能是文档而是 html和body元素做动画<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jQuery基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础语法 </tag>
            
            <tag> jQuery </tag>
            
            <tag> APi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“JavaScript函数以及作用域 ”</title>
      <link href="/2022/02/01/JavaScript%EF%BC%882%EF%BC%89%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A1%A5%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>/2022/02/01/JavaScript%EF%BC%882%EF%BC%89%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8A%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%A1%A5%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（函数【函数使用、函数封装、函数参数、返回、函数之间相互调用】、作用域【全局作用域、局部作用域】、变量的作用域【全局变量、局部变量】、作用域链、预解析）</p><span id="more"></span><h1 id="JavaScript函数以及作用域"><a href="#JavaScript函数以及作用域" class="headerlink" title="JavaScript函数以及作用域"></a>JavaScript函数以及作用域</h1><h2 id="1、函数"><a href="#1、函数" class="headerlink" title="1、函数"></a>1、函数</h2><p><strong>函数概念：</strong></p><p>==函数：就是封装了一段<strong>可被重复调用执行的代码块</strong>。通过此代码块可以实现大量代码的重复使用。==</p><h3 id="1-1、函数的使用"><a href="#1-1、函数的使用" class="headerlink" title="1.1、函数的使用"></a>1.1、函数的使用</h3><p>函数在使用时分为两步：<strong>声明函数</strong>和<strong>调用函数</strong></p><h5 id="①声明函数"><a href="#①声明函数" class="headerlink" title="①声明函数"></a>①声明函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明函数</span><br><span class="hljs-keyword">function</span> 函数名()&#123;<br>     <span class="hljs-comment">//函数体代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>function 是声明函数的关键字,<strong>必须小写</strong></li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><h5 id="②调用函数"><a href="#②调用函数" class="headerlink" title="②调用函数"></a>②调用函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//调用函数</span><br>函数名(); <span class="hljs-comment">//通过调用函数名来执行函数体代码</span><br></code></pre></td></tr></table></figure><ul><li>调用的时候<strong>千万不要忘记添加小括号</strong></li><li>口诀：函数不调用，自己不执行</li></ul><p><strong>注意</strong>：声明函数本身并不会执行代码，只有调用函数时才会执行函数体代码。</p><h3 id="1-2、函数的封装"><a href="#1-2、函数的封装" class="headerlink" title="1.2、函数的封装"></a>1.2、函数的封装</h3><ul><li>函数的封装是把一个或者多个功能通过<strong>函数的方式</strong>封装起来，对外只提供一个简单的函数接口</li></ul><h3 id="1-3、函数的参数"><a href="#1-3、函数的参数" class="headerlink" title="1.3、函数的参数"></a>1.3、函数的参数</h3><h4 id="1-3-1、形参和实参"><a href="#1-3-1、形参和实参" class="headerlink" title="1.3.1、形参和实参"></a>1.3.1、形参和实参</h4><p><strong>在声明函数时</strong>，可以在函数名称后面的小括号中添加一些参数，这些参数被称为<strong>形参</strong>，而在<strong>调用该函数</strong>时，同样也需要传递相应的参数，这些参数被称为<strong>实参</strong>。</p><table><thead><tr><th>参数</th><th align="center">说明</th></tr></thead><tbody><tr><td><strong>形参</strong></td><td align="center"><strong>形</strong>式上的<strong>参</strong>数 <strong>函数定义</strong>的时候 传递的参数 当前并不知道是什么</td></tr><tr><td><strong>实参</strong></td><td align="center"><strong>实</strong>际上的<strong>参</strong>数 <strong>函数调用</strong>的时候 传递的参数 实参是传递给形参的</td></tr></tbody></table><p><strong>参数的作用</strong> : 在<strong>函数内部</strong>某些值不能固定，我们可以通过参数在<strong>调用函数时传递不同的值</strong>进去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 带参数的函数声明</span><br><span class="hljs-keyword">function</span> 函数名(形参<span class="hljs-number">1</span>, 形参<span class="hljs-number">2</span> , 形参<span class="hljs-number">3.</span>..) &#123; <span class="hljs-comment">// 可以定义任意多的参数，用逗号分隔</span><br>  <span class="hljs-comment">// 函数体</span><br>&#125;<br><span class="hljs-comment">// 带参数的函数调用</span><br>函数名(实参<span class="hljs-number">1</span>, 实参<span class="hljs-number">2</span>, 实参<span class="hljs-number">3.</span>..); <br></code></pre></td></tr></table></figure><p><strong>例如：利用函数求任意两个数的和</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getSum</span>(<span class="hljs-params">num1,num2</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1+num2)<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">//4</span><br><span class="hljs-title function_">getSum</span>(<span class="hljs-number">6</span>，<span class="hljs-number">5</span>) <span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><ul><li><p>函数调用的时候实参值是传递给形参的</p></li><li><p>形参简单理解为:<strong>不用声明的变量</strong></p></li><li><h6 id="实参和形参的多个参数之间用逗号-分隔，"><a href="#实参和形参的多个参数之间用逗号-分隔，" class="headerlink" title="实参和形参的多个参数之间用逗号(,)`分隔，"></a>实参和形参的多个参数之间用逗号(,)`分隔，</h6></li></ul><h4 id="1-3-2、形参和实参个数不匹配"><a href="#1-3-2、形参和实参个数不匹配" class="headerlink" title="1.3.2、形参和实参个数不匹配"></a>1.3.2、形参和实参个数不匹配</h4><table><thead><tr><th>参数个数</th><th align="center">说明</th></tr></thead><tbody><tr><td>实参个数等于形参个数</td><td align="center">输出正确结果</td></tr><tr><td>实参个数多于形参个数</td><td align="center">只取到形参的个数</td></tr><tr><td>实参个数小于形参个数</td><td align="center">多的形参定义为undefined，结果为NaN</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1 + num2);<br>&#125;<br>例：<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>);             <span class="hljs-comment">// 300，形参和实参个数相等，输出正确结果</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>, <span class="hljs-number">700</span>);   <span class="hljs-comment">// 500，实参个数多于形参，只取到形参的个数</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">200</span>);                  <span class="hljs-comment">// 实参个数少于形参，多的形参定义为undefined，结果为NaN</span><br></code></pre></td></tr></table></figure><p><strong>注意：在JavaScript中，形参的默认值是undefined</strong></p><h4 id="1-3-3、小结"><a href="#1-3-3、小结" class="headerlink" title="1.3.3、小结"></a>1.3.3、小结</h4><ul><li>函数可以带参数也可以不带参数</li><li>声明函数的时候，函数名括号里面的是形参，形参的默认值为 undefined</li><li>调用函数的时候，函数名括号里面的是实参</li><li>多个参数中间用逗号分隔</li><li>形参的个数可以和实参个数不匹配，但是结果不可预计，我们尽量要匹配</li></ul><h3 id="1-4、函数的返回值"><a href="#1-4、函数的返回值" class="headerlink" title="1.4、函数的返回值"></a>1.4、函数的返回值</h3><h4 id="1-4-1、return语句（函数返回具体值）"><a href="#1-4-1、return语句（函数返回具体值）" class="headerlink" title="1.4.1、return语句（函数返回具体值）"></a>1.4.1、return语句（函数返回具体值）</h4><p>有的时候，我们会希望函数将值返回给调用者，此时通过使用 return 语句就可以实现。</p><p>return 语句的语法格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-keyword">function</span> 函数名（）&#123;<br>    ...<br>    <span class="hljs-keyword">return</span>  需要返回的值;<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br>函数名();    <span class="hljs-comment">// 此时调用函数就可以得到函数体内return 后面的值</span><br></code></pre></td></tr></table></figure><ul><li>在使用 return 语句时，函数会停止执行，并返回指定的值</li><li>如果函数没有 return ，返回的值是 undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">666</span>;<br>&#125;<br><span class="hljs-comment">// 调用函数</span><br><span class="hljs-title function_">sum</span>();      <span class="hljs-comment">// 此时 sum 的值就等于666，因为 return 语句会把自身后面的值返回给调用者 </span><br></code></pre></td></tr></table></figure><h4 id="1-4-2、return-终止函数（returen后面不执行）"><a href="#1-4-2、return-终止函数（returen后面不执行）" class="headerlink" title="1.4.2、return 终止函数（returen后面不执行）"></a>1.4.2、return 终止函数（returen后面不执行）</h4><p>return 语句之后的代码不被执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1，num2</span>)&#123;<br>    <span class="hljs-comment">//函数体</span><br>    <span class="hljs-keyword">return</span> num1 + num2; <span class="hljs-comment">// 注意：return 后的代码不执行</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我不会被执行，因为前面有 return&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> resNum = <span class="hljs-title function_">add</span>(<span class="hljs-number">21</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span><br><span class="hljs-title function_">alert</span>(resNum);          <span class="hljs-comment">// 27</span><br></code></pre></td></tr></table></figure><h4 id="1-4-3、return-的返回值"><a href="#1-4-3、return-的返回值" class="headerlink" title="1.4.3、return 的返回值"></a>1.4.3、return 的返回值</h4><p>return <strong>只能返回一个值</strong>。如果用逗号隔开多个值，<strong>以最后一个为准</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1，num2</span>)&#123;<br>    <span class="hljs-comment">//函数体</span><br>    <span class="hljs-keyword">return</span> num1,num2;<br>&#125;<br><span class="hljs-keyword">var</span> resNum = <span class="hljs-title function_">add</span>(<span class="hljs-number">21</span>,<span class="hljs-number">6</span>); <span class="hljs-comment">// 调用函数，传入两个实参，并通过 resNum 接收函数返回值</span><br><span class="hljs-title function_">alert</span>(resNum);          <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h4 id="1-4-4、小结"><a href="#1-4-4、小结" class="headerlink" title="1.4.4、小结"></a>1.4.4、小结</h4><p>函数都是有返回值的</p><ol><li>如果有 return ，则返回 return 后面的值</li><li>如果没有 return，则返回 undefined</li></ol><h4 id="1-4-5、区别"><a href="#1-4-5、区别" class="headerlink" title="1.4.5、区别"></a>1.4.5、区别</h4><p><strong>break、continue、return 的区别</strong></p><p>break ： 结束当前循环体(如 for、while)<br>continue ：跳出本次循环，继续执行下次循环(如for、while)<br>return ：不仅可以退出循环，还能够返回 return 语句中的值，同时还可以结束当前的函数体内的代码</p><h4 id="1-4-6、练习"><a href="#1-4-6、练习" class="headerlink" title="1.4.6、练习"></a>1.4.6、练习</h4><p><strong>1.利用函数求任意两个数的最大值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMax</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> num1 &gt; num2 ? num1 : num2;  <span class="hljs-comment">//三元表达式 条件表达式结果为真 则返回表达式1的值</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMax</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//结果为2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getMax</span>(<span class="hljs-number">11</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">//结果为11</span><br></code></pre></td></tr></table></figure><p><strong>2.求数组 [5,2,99,101,67,77] 中的最大数值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义一个获取数组中最大数的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getMaxFromArr</span>(<span class="hljs-params">numArray</span>)&#123;<br>    <span class="hljs-keyword">var</span> maxNum = numArray[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; numArray.<span class="hljs-property">length</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(numArray[i]&gt;maxNum)&#123;<br>            maxNum = numArray[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxNum;<br>&#125;<br><span class="hljs-keyword">var</span> arrNum = [<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">99</span>,<span class="hljs-number">101</span>,<span class="hljs-number">67</span>,<span class="hljs-number">77</span>];<br><span class="hljs-keyword">var</span> maxN = <span class="hljs-title function_">getMaxFromArr</span>(arrNum);  <span class="hljs-comment">//这个实参是个数组</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;最大值为&#x27;</span> + maxN);<br></code></pre></td></tr></table></figure><p><strong>3.创建一个函数，实现两个数之间的加减乘除运算，并将结果返回</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入第一个数&#x27;</span>));<br><span class="hljs-keyword">var</span> b = <span class="hljs-built_in">parseFloat</span>(<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入第二个数&#x27;</span>));<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">a,b</span>)&#123;   <span class="hljs-comment">//函数定义两数之间的运算规则</span><br>    <span class="hljs-keyword">var</span> arr = [a + b, a - b, a * b, a / b];<br>    <span class="hljs-keyword">return</span> arr;   <span class="hljs-comment">//return返回值为数组</span><br>&#125;<br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">count</span>(a,b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br></code></pre></td></tr></table></figure><h3 id="1-5、arguments的使用"><a href="#1-5、arguments的使用" class="headerlink" title="1.5、arguments的使用"></a>1.5、arguments的使用</h3><p>当我们不确定有多少个参数传递的时候，可以用 arguments 来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个内置对象。所有函数都内置了一个 arguments 对象，arguments 对象中存储了传递的所有实参。</p><ul><li><strong>arguments</strong>存放的是传递过来的实参</li><li><strong>arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点</strong></li></ul><p> ①：具有 length 属性</p><p> ②：按索引方式储存数据</p><p> ③：不具有数组的 push , pop 等方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 函数声明</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>);  <span class="hljs-comment">//里面存储了所有传递过来的实参</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrguments.<span class="hljs-property">length</span>); <span class="hljs-comment">// 3</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrguments[<span class="hljs-number">2</span>]); <span class="hljs-comment">// 3</span><br>&#125;<br><span class="hljs-comment">// 函数调用</span><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>例如：利用函数求任意个数的最大值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">maxValue</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> max = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (max &lt; <span class="hljs-variable language_">arguments</span>[i]) &#123;<br>            max = <span class="hljs-variable language_">arguments</span>[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">maxValue</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>)); <span class="hljs-comment">// 9</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">maxValue</span>(<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>)); <span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h4 id="函数调用另外一个函数"><a href="#函数调用另外一个函数" class="headerlink" title="函数调用另外一个函数"></a>函数调用另外一个函数</h4><p>因为每个函数都是独立的代码块，用于完成特殊任务，因此经常会用到函数相互调用的情况。具体演示在下面的函数练习中会有。</p><h3 id="1-6、函数练习"><a href="#1-6、函数练习" class="headerlink" title="1.6、函数练习"></a>1.6、函数练习</h3><p><strong>1.利用函数封装方式，翻转任意一个数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">var</span> newArr = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        newArr[newArr.<span class="hljs-property">length</span>] = arr[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;<br><span class="hljs-keyword">var</span> arr1 = <span class="hljs-title function_">reverse</span>([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1);<br></code></pre></td></tr></table></figure><p><strong>2.利用函数封装方式，对数组排序 – 冒泡排序</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123; <br>            <span class="hljs-keyword">var</span> temp = arr[j];<br>            arr[j] = arr[j + <span class="hljs-number">1</span>]; <br>            arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.输入一个年份，判断是否是闰年（闰年：能被4整除并且不能被100整数，或者能被400整除）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRun</span>(<span class="hljs-params">year</span>) &#123;<br>     <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;<br>     <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> === <span class="hljs-number">0</span>) &#123;<br>        flag = <span class="hljs-literal">true</span>;<br>     &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isRun</span>(<span class="hljs-number">2010</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isRun</span>(<span class="hljs-number">2012</span>));<br></code></pre></td></tr></table></figure><p><strong>4.用户输入年份，输出当前年份2月份的天数，如果是闰年，则2月份是 29天， 如果是平年，则2月份是 28天</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">backDay</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> year = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请您输入年份:&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRun</span>(year)) &#123; <span class="hljs-comment">//调用函数需要加小括号</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你输入的&#x27;</span> + year + <span class="hljs-string">&#x27;是闰年，2月份有29天&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您输入的&#x27;</span> + year + <span class="hljs-string">&#x27;不是闰年，2月份有28天&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title function_">backDay</span>();<br><span class="hljs-comment">//判断是否是闰年的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isRun</span>(<span class="hljs-params">year</span>) &#123;<br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> === <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> !== <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> === <span class="hljs-number">0</span>) &#123;<br>        flag = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-7、函数的两种声明方式"><a href="#1-7、函数的两种声明方式" class="headerlink" title="1.7、函数的两种声明方式"></a>1.7、函数的两种声明方式</h3><h4 id="1-7-1、自定义函数方式-命名函数"><a href="#1-7-1、自定义函数方式-命名函数" class="headerlink" title="1.7.1、自定义函数方式(命名函数)"></a>1.7.1、自定义函数方式(命名函数)</h4><p>利用函数关键字 function 自定义函数方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明定义方式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;...&#125;<br><span class="hljs-comment">// 调用  </span><br><span class="hljs-title function_">fn</span>();  <br></code></pre></td></tr></table></figure><ol><li><strong>因为有名字，所以也被称为命名函数</strong></li><li><strong>调用函数的代码既可以放到声明函数的前面，也可以放在声明函数的后</strong></li></ol><h4 id="1-7-2、函数表达式方式-匿名函数"><a href="#1-7-2、函数表达式方式-匿名函数" class="headerlink" title="1.7.2、函数表达式方式(匿名函数)"></a>1.7.2、函数表达式方式(匿名函数)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span><br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125;;<br><span class="hljs-comment">// 调用的方式，函数调用必须写到函数体下面</span><br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><ul><li>因为函数没有名字，所以也称为<strong>匿名函数</strong></li><li>这个fn 里面存储的是一个函数</li><li><strong>函数调用的代码必须写到函数体后面</strong></li></ul><h2 id="2、作用域"><a href="#2、作用域" class="headerlink" title="2、作用域"></a>2、作用域</h2><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的<strong>可用性的代码范围</strong>就是这个名字的<strong>作用域</strong>。作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><p>JavaScript (ES6前) 中的作用域有两种：</p><ul><li>全局作用域</li><li>局部作用域(函数作用域)</li></ul><h3 id="2-1、全局作用域"><a href="#2-1、全局作用域" class="headerlink" title="2.1、全局作用域"></a>2.1、全局作用域</h3><p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p><h3 id="2-2、局部（函数）作用域"><a href="#2-2、局部（函数）作用域" class="headerlink" title="2.2、局部（函数）作用域"></a>2.2、局部（函数）作用域</h3><p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域</p><h3 id="2-3、JS-没有块级作用域"><a href="#2-3、JS-没有块级作用域" class="headerlink" title="2.3、JS 没有块级作用域"></a>2.3、JS 没有块级作用域</h3><ul><li>快作用域由 <code>&#123;&#125;</code> 包括</li><li>在其他编程语言中（如 java、c#等），在 if 语句、循环语句中创建的变量，仅仅只能在本 if 语句、本循环语句中使用，如下面的Java代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    int num = <span class="hljs-number">123</span>;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(num);<span class="hljs-comment">// 123</span><br>&#125;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(num);<span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>JS 中没有块级作用域(在ES6之前)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    int num = <span class="hljs-number">123</span>;<br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(num);<span class="hljs-comment">// 123</span><br>&#125;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(num);<span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><h2 id="3、变量的作用域"><a href="#3、变量的作用域" class="headerlink" title="3、变量的作用域"></a>3、变量的作用域</h2><p>在JavaScript中，根据作用域的不同，变量可以分为两种：</p><ul><li>全局变量</li><li>局部变量</li></ul><h3 id="3-1、全局变量"><a href="#3-1、全局变量" class="headerlink" title="3.1、全局变量"></a>3.1、全局变量</h3><p>在全局作用域下声明的变量叫做全局变量（<strong>在函数外部定义的变量</strong>）</p><ul><li>全局变量在代码的任何位置都可以使用</li><li>在全局作用域下 var 声明的变量 是全局变量</li><li>特殊情况下，在函数内不使用 var 声明的变量也是全局变量（不建议使用）</li></ul><h3 id="3-2、局部变量"><a href="#3-2、局部变量" class="headerlink" title="3.2、局部变量"></a>3.2、局部变量</h3><p>在局部作用域下声明的变量叫做局部变量（<strong>在函数内部定义的变量</strong>）</p><ul><li>局部变量只能在该函数内部使用</li><li>在函数内部 var 声明的变量是局部变量</li><li>函数的<strong>形参</strong>实际上就是<strong>局部变量</strong></li></ul><h3 id="3-3、区别"><a href="#3-3、区别" class="headerlink" title="3.3、区别"></a>3.3、区别</h3><ul><li>全局变量：在任何一个地方都可以使用，只有在浏览器关闭时才会被销毁，因此比较占内存</li><li>局部变量：只在函数内部使用，当其所在的代码块被执行时，会被初始化；当代码块运行结束后，就会被销毁，因此更节省内存空间</li></ul><h2 id="4、作用域链"><a href="#4、作用域链" class="headerlink" title="4、作用域链"></a>4、作用域链</h2><ol><li>只要是代码，就至少有一个作用域</li><li>写在函数内部的叫局部作用域</li><li>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</li><li>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域链</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 作用域链: 内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值，这种结构我们称为作用域链表</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>funtion <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//外部函数</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>; <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">//内部函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);  <span class="hljs-comment">// 20 ,一级一级访问</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>作用域链：采取<strong>就近原则</strong>的方式来查找变量最终的值。</li></ul><h2 id="5、预解析"><a href="#5、预解析" class="headerlink" title="5、预解析"></a>5、预解析</h2><p>首先来看几段代码和结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);  <span class="hljs-comment">// 结果是多少？</span><br><span class="hljs-comment">//会报错 num is undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);  <span class="hljs-comment">// 结果是多少？</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;   <br><span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 命名函数(自定义函数方式):若我们把函数调用放在函数声明上面</span><br><span class="hljs-title function_">fn</span>();<span class="hljs-comment">//11</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;11&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 匿名函数(函数表达式方式):若我们把函数调用放在函数声明上面</span><br><span class="hljs-title function_">fn</span>();<br><span class="hljs-keyword">var</span>  fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;22&#x27;</span>); <span class="hljs-comment">// 报错</span><br>&#125;<br><span class="hljs-comment">//相当于执行了以下代码</span><br><span class="hljs-keyword">var</span> fn;<br><span class="hljs-title function_">fn</span>();      <span class="hljs-comment">//fn没赋值，没这个，报错</span><br><span class="hljs-keyword">var</span>  fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;22&#x27;</span>); <span class="hljs-comment">//报错</span><br>&#125;<br></code></pre></td></tr></table></figure><p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步：<strong>预解析和代码执行。</strong></p><ul><li><strong>预解析</strong>：js引擎会把js里面所有的 <strong>var</strong> 还有 <strong>function</strong> 提升到当前作用域的最前面</li><li><strong>代码执行</strong>：从上到下执行JS语句</li></ul><p>预解析只会发生在通过 var 定义的变量和 function 上。学习预解析能够让我们知道<strong>为什么在变量声明之前访问变量的值是 undefined</strong>，<strong>为什么在函数声明之前就可以调用函数。</strong></p><h3 id="5-1、变量预解析-变量提升"><a href="#5-1、变量预解析-变量提升" class="headerlink" title="5.1、变量预解析(变量提升)"></a>5.1、变量预解析(变量提升)</h3><p>变量预解析也叫做变量提升、函数提升</p><p>变量提升: 变量的声明会被提升到<strong>当前作用域</strong>的最上面，变量的赋值不会提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);  <span class="hljs-comment">// 结果是多少？</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;   <br><span class="hljs-comment">// undefined</span><br><br><span class="hljs-comment">//相当于执行了以下代码</span><br><span class="hljs-keyword">var</span> num;<span class="hljs-comment">// 变量声明提升到当前作用域最上面</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>num = <span class="hljs-number">10</span>;<span class="hljs-comment">// 变量的赋值不会提升</span><br></code></pre></td></tr></table></figure><h3 id="5-2、函数预解析-函数提升"><a href="#5-2、函数预解析-函数提升" class="headerlink" title="5.2、函数预解析(函数提升)"></a>5.2、函数预解析(函数提升)</h3><p>函数提升： 函数的声明会被提升到<strong>当前作用域</strong>的最上面，但是不会调用函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fn</span>();<span class="hljs-comment">//11</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;11&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3、解决函数表达式声明调用问题"><a href="#5-3、解决函数表达式声明调用问题" class="headerlink" title="5.3、解决函数表达式声明调用问题"></a>5.3、解决函数表达式声明调用问题</h3><p>对于函数表达式声明调用需要记住：<strong>函数表达式调用必须写在函数声明的下面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 匿名函数(函数表达式方式):若我们把函数调用放在函数声明上面</span><br><span class="hljs-title function_">fn</span>();<br><span class="hljs-keyword">var</span>  fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;22&#x27;</span>); <span class="hljs-comment">// 报错</span><br>&#125;<br><br><span class="hljs-comment">//相当于执行了以下代码</span><br><span class="hljs-keyword">var</span> fn;<br><span class="hljs-title function_">fn</span>();      <span class="hljs-comment">//fn没赋值，没这个，报错</span><br><span class="hljs-keyword">var</span>  fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;22&#x27;</span>); <span class="hljs-comment">//报错</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4、预解析练习"><a href="#5-4、预解析练习" class="headerlink" title="5.4、预解析练习"></a>5.4、预解析练习</h3><p>预解析部分十分重要，可以通过下面4个练习来理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 练习1</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">fun</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-comment">// 最终结果是 undefined</span><br></code></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> num;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    num = <span class="hljs-number">20</span>;<br>&#125;<br>num = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">fun</span>();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 练习2</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<span class="hljs-comment">//20</span><br>&#125;<br><span class="hljs-title function_">fn</span>();<br><span class="hljs-comment">// 最终结果是 undefined 20</span><br></code></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> num;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>    <span class="hljs-keyword">var</span> num = <span class="hljs-number">20</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);<br>&#125;<br>num = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 练习3</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">18</span>;<br><span class="hljs-title function_">f1</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">9</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> b;<br>    <span class="hljs-keyword">var</span> a<br>    b = <span class="hljs-number">9</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//undefined</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//9</span><br>    a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>&#125;<br>a = <span class="hljs-number">18</span>;<br><span class="hljs-title function_">f1</span>();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 练习4</span><br><span class="hljs-title function_">f1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = b = c = <span class="hljs-number">9</span>;<br>    <span class="hljs-comment">// 相当于 var a = 9; b = 9;c = 9;  b和c的前面没有var声明,当全局变量看</span><br>    <span class="hljs-comment">// 集体声明 var a = 9,b = 9,c = 9;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码相当于执行了以下操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a;<br>    a = b = c = <span class="hljs-number">9</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//9</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//9</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">//9</span><br>&#125;<br><span class="hljs-title function_">f1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);<span class="hljs-comment">//9</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//9</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//报错 a是局部变量</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数 </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“JavaScript基础语法”</title>
      <link href="/2022/01/22/JavaScript%EF%BC%881%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/22/JavaScript%EF%BC%881%EF%BC%89%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（JS概念与组成、JS格式规范、JS基本语法【输入、输出、变量、数据类型、数据类型转换、运算符、流程控制】、断点调试、循环、数组）</p><span id="more"></span><h1 id="JavaScript基础语法"><a href="#JavaScript基础语法" class="headerlink" title="JavaScript基础语法"></a>JavaScript基础语法</h1><h2 id="初识JavaScirpt"><a href="#初识JavaScirpt" class="headerlink" title="初识JavaScirpt"></a>初识JavaScirpt</h2><ul><li>JavaScript 是世界上最流行的语言之一，是一种运行在客户端的脚本语言 （Script 是脚本的意思）</li><li>脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行</li><li>现在也可以基于 Node.js 技术进行服务器端编程</li></ul><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/575f5e51a4f644b7b315887d2f07c97d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"><h3 id="浏览器执行JS简介"><a href="#浏览器执行JS简介" class="headerlink" title="浏览器执行JS简介"></a>浏览器执行JS简介</h3><p>浏览器分成两部分：渲染引擎和 JS 引擎</p><ul><li>渲染引擎：用来解析HTML与CSS，俗称内核，比如 chrome 浏览器的 blink ，老版本的 webkit</li><li>JS 引擎：也称为 JS 解释器。 用来读取网页中的JavaScript代码，对其处理后运行，比如 chrome 浏览器的 V8</li></ul><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/6626246651a048ab94cff1c8afe62fc2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"><h3 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h3><p>JavaScript 包括 ==ECMAScript、DOM、BOM==</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/a9331f588aa54d43b22ae207249f0e1f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h4><p><strong>ECMAScript</strong> 是由ECMA 国际（ 原欧洲计算机制造商协会）进行标准化的一门编程语言，这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMAScript 语言的实现和扩展。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/931cd1c9d4fd44e9b547284a635daa26.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p><strong>==ECMAScript：ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。==</strong></p><h4 id="🔥DOM文档对象模型"><a href="#🔥DOM文档对象模型" class="headerlink" title="🔥DOM文档对象模型"></a>🔥DOM文档对象模型</h4><p><strong>文档对象模型</strong>（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p><h4 id="🔥BOM浏览器对象模型"><a href="#🔥BOM浏览器对象模型" class="headerlink" title="🔥BOM浏览器对象模型"></a>🔥BOM浏览器对象模型</h4><p><strong>BOM</strong> (Browser Object Model，简称BOM) 是指浏览器对象模型，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p><h2 id="1、JS初体验（格式）"><a href="#1、JS初体验（格式）" class="headerlink" title="1、JS初体验（格式）"></a>1、JS初体验（格式）</h2><h3 id="1-1、行内式JS"><a href="#1-1、行内式JS" class="headerlink" title="1.1、行内式JS"></a>1.1、行内式JS</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;点我试试&quot;</span> onclink=<span class="hljs-string">&quot;javascript:alert(&#x27;Hello World&#x27;)&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><ol><li>可以将单行或少量JS代码写在HTML标签的事件属性中(以on开头的属性)，如： onclink</li><li>注意单双引号的使用：在HTML中我们推荐使用双引号，JS中我们推荐使用单引号</li><li>可读性差，在 HTML 中编入 JS 大量代码时，不方便阅读</li><li>特殊情况下使用</li></ol><h3 id="1-2、内嵌式JS（常用）"><a href="#1-2、内嵌式JS（常用）" class="headerlink" title="1.2、内嵌式JS（常用）"></a>1.2、内嵌式JS（常用）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>     <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>可以将多行JS代码写到<code>&lt;script&gt;</code>标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul><h3 id="1-3、外部JS（常用）"><a href="#1-3、外部JS（常用）" class="headerlink" title="1.3、外部JS（常用）"></a>1.3、外部JS（常用）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;my.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol><li>利于HTML页面代码结构化，把单独JS代码独立到HTML页面之外，既美观，又方便</li><li>引用外部JS文件的script标签中间不可以写代码</li><li>适合于JS代码量比较大的情况</li></ol><h2 id="2、JS基本语法"><a href="#2、JS基本语法" class="headerlink" title="2、JS基本语法"></a>2、JS基本语法</h2><h3 id="2-1、注释"><a href="#2-1、注释" class="headerlink" title="2.1、注释"></a>2.1、注释</h3><h4 id="2-1-1、单行注释"><a href="#2-1-1、单行注释" class="headerlink" title="2.1.1、单行注释"></a>2.1.1、单行注释</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  单行注释</span><br></code></pre></td></tr></table></figure><ul><li>==快捷键<code>ctrl + /</code>==</li></ul><h4 id="2-1-2、多行注释"><a href="#2-1-2、多行注释" class="headerlink" title="2.1.2、多行注释"></a>2.1.2、多行注释</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span>    <br></code></pre></td></tr></table></figure><ul><li>快捷键 `==shift + alt + a==</li><li>vscode中修改快捷键方式：vscode➡ 首选项按钮➡ 键盘快捷方式 ➡ 查找原来的快捷键➡ 修改为新的快捷键➡ 回车确认</li></ul><h3 id="2-2、输入输出语句"><a href="#2-2、输入输出语句" class="headerlink" title="2.2、输入输出语句"></a>2.2、输入输出语句</h3><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg);</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg);</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info);</td><td>浏览看弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><ul><li><code>alert()</code> 主要用来显示消息给用户</li><li><code>console.log()</code> 用来给程序员看自己运行时的消息</li></ul><h3 id="2-3、变量"><a href="#2-3、变量" class="headerlink" title="2.3、变量"></a>2.3、变量</h3><ul><li>变量是用于存放数据的<strong>容器</strong>，我们通过<strong>变量名</strong>获取数据，甚至数据可以修改</li><li><strong>本质：变量是程序在内存</strong>中申请的一块用来存放数据的空间</li></ul><h4 id="2-3-1、变量初始化"><a href="#2-3-1、变量初始化" class="headerlink" title="2.3.1、变量初始化"></a>2.3.1、变量初始化</h4><ol><li>var是一个JS关键字，用来声明变量(variable变量的意思)。使用该关键字声明变量后，计算机会自动为变量分配内存空间。</li><li>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明变量同时赋值为18</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>; <br><span class="hljs-comment">//同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>, address =<span class="hljs-string">&#x27;火影村&#x27;</span>,salary = <span class="hljs-number">15000</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-2、声明变量特殊情况"><a href="#2-3-2、声明变量特殊情况" class="headerlink" title="2.3.2、声明变量特殊情况"></a>2.3.2、声明变量特殊情况</h4><table><thead><tr><th>情况</th><th>说明</th><th>结果</th></tr></thead><tbody><tr><td>var age; console.log(age);</td><td>只声明，不赋值</td><td>undefined</td></tr><tr><td>console.log(age)</td><td>不声明 不赋值 直接使用</td><td>报错</td></tr><tr><td>age = 10;console.log(age);</td><td>不声明 只赋值</td><td>10</td></tr></tbody></table><h4 id="2-3-3、变量的命名规范"><a href="#2-3-3、变量的命名规范" class="headerlink" title="2.3.3、变量的命名规范"></a>2.3.3、变量的命名规范</h4><ol><li>由字母(A-Z,a-z)，数字(0-9)，下划线(_)，美元符号($)组成，如:usrAge,num01,__name</li><li>严格区分大小写。 var app; 和 var App; 是两个变量</li><li>不能以数字开头。</li><li>不能是关键字，保留字。例如：var,for,while</li><li>遵循驼峰命名法。首字母小写，后面单词的首字母需要大写。myFirstName</li><li>推荐翻译网站：有道 爱词霸</li></ol><h3 id="2-4、数据类型"><a href="#2-4、数据类型" class="headerlink" title="2.4、数据类型"></a>2.4、数据类型</h3><p><strong>JavaScript</strong> <strong>是一种弱类型或者说动态语言。</strong>这意味着不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;  <span class="hljs-comment">//这是一个数字型</span><br><span class="hljs-keyword">var</span> areYouOk = <span class="hljs-string">&#x27;使得&#x27;</span>;<span class="hljs-comment">//这是一个字符串</span><br></code></pre></td></tr></table></figure><ul><li>在代码运行时，变量的数据类型是由 JS引擎 ==根据 = 右边变量值的数据类型来判断== 的，运行完毕之后， 变量就确定了数据类型。</li><li>==JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型==</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">6</span>;<span class="hljs-comment">//x为数字</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;Bill&quot;</span>;<span class="hljs-comment">//x为字符串</span><br></code></pre></td></tr></table></figure><p>JS 把数据类型分为两类：</p><ul><li>基本数据类型(==Number,String,Boolean,Undefined,Null==)</li><li>复杂数据类型(==Object==)</li></ul><h4 id="2-4-1、基本数据类型"><a href="#2-4-1、基本数据类型" class="headerlink" title="2.4.1、基本数据类型"></a>2.4.1、基本数据类型</h4><table><thead><tr><th>简单数据类型</th><th>说明</th><th>默认值</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Number</td><td>数字型，包含整型值和浮点型值，如21，0.21</td><td>0</td><td></td><td></td><td></td></tr><tr><td>Boolean</td><td>布尔值类型，如true，false ，等价于1和0</td><td>false</td><td></td><td></td><td></td></tr><tr><td>Undefined</td><td>var a; 声明了变量a但是没有赋值，此时a=undefined</td><td>undefined（未定义的）</td><td></td><td></td><td></td></tr><tr><td>string</td><td>字符串类型，如“张三”</td><td>“”</td><td></td><td></td><td></td></tr><tr><td>Null</td><td>var a = null;声明了变量a为空值</td><td>null</td><td></td><td></td><td></td></tr></tbody></table><h4 id="2-4-2、数字型-Number"><a href="#2-4-2、数字型-Number" class="headerlink" title="2.4.2、数字型==Number=="></a>2.4.2、数字型==Number==</h4><p>JavaScript 数字类型既可以用来保存整数值，也可以保存小数(浮点数）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">12</span>;<span class="hljs-comment">//整数</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Age</span> = <span class="hljs-number">21.3747</span>;<span class="hljs-comment">//小数</span><br></code></pre></td></tr></table></figure><h5 id="2-4-2-1、数字型进制"><a href="#2-4-2-1、数字型进制" class="headerlink" title="2.4.2.1、数字型进制"></a>2.4.2.1、数字型进制</h5><p>最常见的进制有二进制、八进制、十进制、十六进制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.八进制数字序列范围：0~7</span><br><span class="hljs-keyword">var</span> num1 = <span class="hljs-number">07</span>; <span class="hljs-comment">//对应十进制的7</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Num2</span> = <span class="hljs-number">019</span>;<span class="hljs-comment">//对应十进制的19</span><br><span class="hljs-keyword">var</span> num3 = <span class="hljs-number">08</span>;<span class="hljs-comment">//对应十进制的8</span><br><br><span class="hljs-comment">// 2.十六进制数字序列范围：0~9以及A~F</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">0xA</span>;<br></code></pre></td></tr></table></figure><ul><li><strong>在JS中八进制前面加0，十六进制前面加 0x</strong></li></ul><h5 id="①数字型范围"><a href="#①数字型范围" class="headerlink" title="①数字型范围"></a>①数字型范围</h5><ul><li>JS中数值的最大值：<code>Number.MAX_VALUE</code></li><li>JS中数值的最小值：<code>Number.MIN_VALUE</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">consol.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>);<br>consol.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MIN_VALUE</span>);<br></code></pre></td></tr></table></figure><h5 id="②数字型的三个特殊值"><a href="#②数字型的三个特殊值" class="headerlink" title="②数字型的三个特殊值"></a>②数字型的三个特殊值</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">Infinity</span>); <span class="hljs-comment">//Infinity(无穷大)</span><br><span class="hljs-title function_">alert</span>(-<span class="hljs-title class_">Infinity</span>); <span class="hljs-comment">//-Infinity(无穷小)</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-title class_">NaN</span>);       <span class="hljs-comment">//NaN - Not a Number ,代表任何一个非数值</span><br></code></pre></td></tr></table></figure><ul><li>==Infinity== ，代表无穷大，大于任何数值</li><li>==-Infinity== ，代表无穷小，小于任何数值</li><li>==Nan== ，Not a Number，代表一个非数值</li></ul><h5 id="③isNaN"><a href="#③isNaN" class="headerlink" title="③isNaN"></a>③isNaN</h5><p>这个方法用来判断非数字，并且返回一个值，如果是数字返回的是false，如果不是数字返回的是true</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/54b996bc0fb74c7fa6b23b55e891bcde.png#pic_center" alt="在这里插入图片描述" class="lazyload"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> userAge = <span class="hljs-number">21</span>;<br><span class="hljs-keyword">var</span> isOk = <span class="hljs-title function_">isNan</span>(userAge);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isOk);<span class="hljs-comment">//false,21不是一个非数字</span><br><br><span class="hljs-keyword">var</span> userName = <span class="hljs-string">&quot;andy&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isNan</span>(userName));<span class="hljs-comment">//true,&quot;andy&quot;是一个非数字</span><br></code></pre></td></tr></table></figure><h4 id="2-4-3、字符串型String"><a href="#2-4-3、字符串型String" class="headerlink" title="2.4.3、字符串型String"></a>2.4.3、字符串型String</h4><p>字符串型可以是引号中的任意文本，其语法为 “<strong>双引号</strong>” 和 “<strong>单引号</strong>’’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&quot;我爱北京天安门~&quot;</span>;<span class="hljs-comment">//使用双引号表示字符串</span><br><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&#x27;我爱北京&#x27;</span>;  <span class="hljs-comment">//使用单引号表示字符串</span><br></code></pre></td></tr></table></figure><p>因为 HTML 标签里面的属性使用的是双引号，JS 这里我们更推荐<strong>使用单引号</strong>。</p><h5 id="①字符串引号嵌套"><a href="#①字符串引号嵌套" class="headerlink" title="①字符串引号嵌套"></a>①字符串引号嵌套</h5><p>JS可以用 <strong>单引号嵌套双引号</strong>，或者用 <strong>双引号嵌套单引号</strong>（<strong>外双内单，外单内双</strong>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> strMsg =<span class="hljs-string">&#x27;我是一个“高富帅”&#x27;</span> <span class="hljs-comment">//可以用 &#x27; &#x27; 包含 &quot; &quot;</span><br><span class="hljs-keyword">var</span> strMsg2 =<span class="hljs-string">&quot;我是&#x27;高富帅&#x27;&quot;</span> <span class="hljs-comment">//可以用&quot; &quot;  包含  &#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="②字符串转义符"><a href="#②字符串转义符" class="headerlink" title="②字符串转义符"></a>②字符串转义符</h5><p>类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符。</p><p>转义符都是 \ 开头的，常用的转义符及其说明如下：</p><table><thead><tr><th>转义符</th><th>解释说明</th></tr></thead><tbody><tr><td>\n</td><td>换行符，n是newline</td></tr><tr><td>\ \</td><td>斜杠\</td></tr><tr><td>\ ’</td><td>’ 单引号</td></tr><tr><td>\ ‘’</td><td>‘’ 双引号</td></tr><tr><td>\ t</td><td>tab 缩进</td></tr><tr><td>\ b</td><td>空格，b是blank的意思</td></tr></tbody></table><h5 id="③字符串长度"><a href="#③字符串长度" class="headerlink" title="③字符串长度"></a>③字符串长度</h5><p>字符串是由若干字符组成的，这些字符的数量就是字符串的长度。通过字符串的 ==length== 属性可以获取整个字符串的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//通过字符串的length属性可以获取整个字符串的长度</span><br><span class="hljs-keyword">var</span> strMsg = <span class="hljs-string">&quot;我是高富帅！&quot;</span>;<br><span class="hljs-title function_">alert</span>(strMsg.<span class="hljs-property">length</span>);     <span class="hljs-comment">//显示6</span><br></code></pre></td></tr></table></figure><h5 id="④字符串的拼接"><a href="#④字符串的拼接" class="headerlink" title="④字符串的拼接"></a>④字符串的拼接</h5><ul><li>多个字符串之间可以使用 + 进行拼接，其拼接方式为 <strong>字符串 + 任何类型 = 拼接之后的新字符串</strong></li><li>拼接前会把与字符串相加的任何类型转成字符串，再拼接成一个新的字符串</li></ul><p><strong>注意</strong>：字符串 + 任何类型 =拼接之后的新字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1 字符串相加</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;World&#x27;</span>);  <span class="hljs-comment">//hello World</span><br><br><span class="hljs-comment">//2 数值字符串相加</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;100&#x27;</span> + <span class="hljs-string">&#x27;100&#x27;</span>); <span class="hljs-comment">//100100</span><br><br><span class="hljs-comment">//3 数值字符串+数值</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;12&#x27;</span>+<span class="hljs-number">12</span>); <span class="hljs-comment">//1212</span><br><br><span class="hljs-comment">//4 数值+数值</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">12</span>+<span class="hljs-number">12</span>); <span class="hljs-comment">//24</span><br></code></pre></td></tr></table></figure><ul><li>==<code>+</code> 号总结口诀：🌏数值相加，字符相连🌏==</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span>  age = <span class="hljs-number">18</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我今年&#x27;</span>+age+<span class="hljs-string">&#x27;岁&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我今年&#x27;</span>+age+<span class="hljs-string">&#x27;岁&#x27;</span>);  <span class="hljs-comment">//引引加加，最终也是上面的形式</span><br></code></pre></td></tr></table></figure><h5 id="⑤字符串拼接加强"><a href="#⑤字符串拼接加强" class="headerlink" title="⑤字符串拼接加强"></a>⑤字符串拼接加强</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Pink老师&#x27;</span> + <span class="hljs-number">18</span>);<span class="hljs-comment">//只要有字符就会相连</span><br><span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-comment">// console.log(&#x27;Pink老师age岁了&#x27;);//这样不行,会输出 &quot;Pink老师age岁了&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Pink老师&#x27;</span> + age); <span class="hljs-comment">// Pink老师18</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Pink老师&#x27;</span> + age + <span class="hljs-string">&#x27;岁啦&#x27;</span>);<span class="hljs-comment">// Pink老师18岁啦</span><br></code></pre></td></tr></table></figure><ul><li>我们经常会将字符串和变量来拼接，因为变量可以很方便地修改里面的值</li><li>变量是不能添加引号的，因为加引号的变量会变成字符串</li><li>如果变量两侧都有字符串拼接，口诀==🌏“引引加加 ”，删掉数字🌏==变量写加中间</li></ul><h4 id="2-4-4、布尔型-Boolean"><a href="#2-4-4、布尔型-Boolean" class="headerlink" title="2.4.4、布尔型==Boolean=="></a>2.4.4、布尔型==Boolean==</h4><ul><li>布尔类型有两个值：true 和 false ，其中 true 表示真（对），而 false 表示假（错）。</li><li>布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag + <span class="hljs-number">1</span>); <span class="hljs-comment">// 2 true当加法来看当1来看，flase当0来看</span><br></code></pre></td></tr></table></figure><h4 id="2-4-5、undefined未定义"><a href="#2-4-5、undefined未定义" class="headerlink" title="2.4.5、undefined未定义"></a>2.4.5、undefined未定义</h4><ul><li>一个<strong>声明后没有被赋值</strong>的变量会有一个默认值 undefined ( 如果进行相连或者相加时，注意结果）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 如果一个变量声明未赋值，就是undefined 未定义数据类型</span><br><span class="hljs-keyword">var</span> str;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">var</span> variable = <span class="hljs-literal">undefined</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(variable + <span class="hljs-string">&#x27;Pink&#x27;</span>); <span class="hljs-comment">//undefinedPink</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(variable + <span class="hljs-number">18</span>); <span class="hljs-comment">//NaN </span><br></code></pre></td></tr></table></figure><p>1.undefined 和 字符串 相加，会拼接字符串</p><p>2.undefined 和 数字相加，最后结果是<strong>NaN</strong></p><h4 id="2-4-6、空值-null"><a href="#2-4-6、空值-null" class="headerlink" title="2.4.6、空值==null=="></a>2.4.6、空值==null==</h4><ul><li>一个声明变量给 null 值，里面存的值为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> space = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(space + <span class="hljs-string">&#x27;pink&#x27;</span>); <span class="hljs-comment">//nullpink</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">llog</span>(space + <span class="hljs-number">1</span>); <span class="hljs-comment">// 1 </span><br></code></pre></td></tr></table></figure><h4 id="2-4-7、typeof"><a href="#2-4-7、typeof" class="headerlink" title="2.4.7、typeof"></a>2.4.7、typeof</h4><ul><li>==typeof== 可用来获取检测变量的数据类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">18</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> num) <span class="hljs-comment">// 结果 number  </span><br></code></pre></td></tr></table></figure><p>不同类型的返回值</p><table><thead><tr><th>类型</th><th>例</th><th>结果</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>string</td><td>typeof “小白”</td><td>“string”</td><td></td><td></td><td></td></tr><tr><td>number</td><td>typeof 18</td><td>“number”</td><td></td><td></td><td></td></tr><tr><td>boolean</td><td>typeof true</td><td>“boolean”</td><td></td><td></td><td></td></tr><tr><td>undefined</td><td>typeof undefined</td><td>“undefined”</td><td></td><td></td><td></td></tr><tr><td>null</td><td>typeof null</td><td>“object”</td><td></td><td></td><td></td></tr></tbody></table><h4 id="2-4-8、字面量"><a href="#2-4-8、字面量" class="headerlink" title="2.4.8、字面量"></a>2.4.8、字面量</h4><p>字面量是在源代码中一个固定值的表示法，通俗来说，就是字面量表示如何表达这个值。</p><ul><li>数字字面量：8，9，10</li><li>字符串字面量：‘大前端’，‘后端’</li><li>布尔字面量：true、false</li></ul><p>通过控制台的颜色判断属于哪种数据类型</p><table><thead><tr><th>黑色</th><th>字符串</th></tr></thead><tbody><tr><td>蓝色</td><td>数值</td></tr><tr><td>灰色</td><td>undefined 和 null</td></tr></tbody></table><h3 id="2-5、数据类型转换"><a href="#2-5、数据类型转换" class="headerlink" title="2.5、数据类型转换"></a>2.5、数据类型转换</h3><p>使用表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进行加法运算，而需要转换变量的数据类型。通俗来说，<strong>就是把一种数据类型的变量转换成另外一种数据类型</strong>。</p><p>我们通常会实现3种方式的转换：</p><ul><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ul><h4 id="①转换为字符串型"><a href="#①转换为字符串型" class="headerlink" title="①转换为字符串型"></a>①转换为字符串型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num = 1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num = 1; alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num =1; alert(num+“我是字符串”);</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.把数字型转换为字符串型 toString()  变量.toString()</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> str = num.<span class="hljs-title function_">toString</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><br><span class="hljs-comment">//2.强制转换</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">String</span>(num));<br></code></pre></td></tr></table></figure><ul><li>==toString() 和 String() 使用方式不一样==</li><li>三种转换方式，我们更喜欢用第三种加号拼接字符串转换方式，这一方式也称为隐士转换</li></ul><h4 id="②转换为数字型"><a href="#②转换为数字型" class="headerlink" title="②转换为数字型"></a>②转换为数字型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>parselnt(string)函数</strong></td><td>将string类型转成整数数值型</td><td>parselnt(‘78’)</td></tr><tr><td><strong>parseFloat(string)函数</strong></td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js 隐式转换(- * /)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.parseInt()</span><br><span class="hljs-keyword">var</span> age =<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄&#x27;</span>);<br>consolo.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(age));  <span class="hljs-comment">//数字型18</span><br>consolo.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));  <span class="hljs-comment">//3取整</span><br>consolo.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;3.94&#x27;</span>));  <span class="hljs-comment">//3,不会四舍五入</span><br>consolo.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;120px&#x27;</span>));  <span class="hljs-comment">//120,会去掉单位</span><br><br><span class="hljs-comment">// 2.parseFloat()</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;3.14&#x27;</span>));  <span class="hljs-comment">//3.14</span><br>consolo.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;120px&#x27;</span>));  <span class="hljs-comment">//120,会去掉单位</span><br><br><br><span class="hljs-comment">// 3.利用Number(变量)</span><br><span class="hljs-keyword">var</span> str =<span class="hljs-string">&#x27;123&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(str));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;12&#x27;</span>));   <br><br><span class="hljs-comment">// 4.利用了算术运算 - * /   隐式转换</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;12&#x27;</span>-<span class="hljs-number">0</span>);  <span class="hljs-comment">// 12</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span> - <span class="hljs-string">&#x27;120&#x27;</span>);  <span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;123&#x27;</span> * <span class="hljs-number">1</span>);  <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><p>1.注意 parseInt 和 parseFloat ，这两个是重点</p><p>2.隐式转换是我们在进行算数运算的时候，JS自动转换了数据类型</p><h4 id="③转换为布尔型"><a href="#③转换为布尔型" class="headerlink" title="③转换为布尔型"></a>③转换为布尔型</h4><table><thead><tr><th>方法</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table><ul><li>代表空，否定的值会被转换为false，如 ’ ’ , 0, NaN , null , undefined</li><li>其余的值都会被被转换为true</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>));  <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;小白&#x27;</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Boolean</span>(<span class="hljs-number">12</span>));   <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="2-6、运算符"><a href="#2-6、运算符" class="headerlink" title="2.6、运算符"></a>2.6、运算符</h3><p>运算符（operator）也被称为<strong>操作符</strong>，是用于实现赋值、比较和执行算数运算等功能的符号</p><p>avaScript 中常用的运算符有：</p><ul><li>算数运算符</li><li>递增和递减运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><h4 id="2-6-1、算术运算符"><a href="#2-6-1、算术运算符" class="headerlink" title="2.6.1、算术运算符"></a>2.6.1、算术运算符</h4><p>概念：算术运算使用的符号，用于执行两个变量或值的算术运算。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 20 =30</td></tr><tr><td>-</td><td>减</td><td>10 - 20 =-10</td></tr><tr><td>*</td><td>乘</td><td>10 * 20 =200</td></tr><tr><td>/</td><td>除</td><td>10 / 20 =0.5</td></tr><tr><td>%</td><td>取余数（取模）</td><td>返回出发的余数 9 % 2 =1</td></tr></tbody></table><h4 id="2-6-2、浮点数的精度问题"><a href="#2-6-2、浮点数的精度问题" class="headerlink" title="2.6.2、浮点数的精度问题"></a>2.6.2、浮点数的精度问题</h4><p>浮点数值的最高精度是17位小数，但在进行算数计算时其精确度远远不如整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-number">0.1</span> +<span class="hljs-number">0.2</span>; <span class="hljs-comment">//结果不是0.3，0.30000000000000004</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0.07</span> * <span class="hljs-number">100</span>); <span class="hljs-comment">//结果不是7，而是7.000000000000001</span><br></code></pre></td></tr></table></figure><p><strong>所以不要直接判断两个浮点数是否相等</strong></p><h4 id="2-6-3、递增和递减运算符"><a href="#2-6-3、递增和递减运算符" class="headerlink" title="2.6.3、递增和递减运算符"></a>2.6.3、递增和递减运算符</h4><p>递增（++）</p><p>递减（- -）</p><p>放在变量前面时，我们称为<strong>前置递增(递减)运算符</strong></p><p>放在变量后面时，我们称为<strong>后置递增(递减)运算符</strong></p><p><strong>注意</strong>：递增和递减运算符必须和变量配合使用。</p><h5 id="①前置递增运算符"><a href="#①前置递增运算符" class="headerlink" title="①前置递增运算符"></a>①前置递增运算符</h5><p>++num num = num + 1</p><p>使用口诀:<strong>==先自加，后返回值==</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br>alert (++num + <span class="hljs-number">10</span>); <span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><p>先自加 10+1=11，返回11，此时num=11</p><h5 id="②后置递增运算符"><a href="#②后置递增运算符" class="headerlink" title="②后置递增运算符"></a>②后置递增运算符</h5><p>num ++ num = num +1</p><p>==使用口诀:<strong>先返回原值，后自加</strong>==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">10</span> + num++); <span class="hljs-comment">// 20</span><br></code></pre></td></tr></table></figure><h5 id="③小结"><a href="#③小结" class="headerlink" title="③小结"></a>③小结</h5><ul><li>前置递增和后置递增运算符可以简化代码的编写，让变量的值 + 1 比以前写法更简单</li><li>单独使用时，运行结果相同，与其他代码联用时，执行结果会不同</li><li>开发时，大多使用后置递增/减，并且代码独占一行</li></ul><h4 id="2-6-4、比较-关系-运算符"><a href="#2-6-4、比较-关系-运算符" class="headerlink" title="2.6.4、比较(关系)运算符"></a>2.6.4、比较(关系)运算符</h4><p>比较运算符是<strong>两个数据进行比较时所使用的运算符</strong>，比较运算后，会<strong>返回一个布尔值</strong>(true / false)作为比较运算的结果。</p><table><thead><tr><th>运算符名称</th><th>说明</th><th>案例</th><th>结果</th><th></th><th></th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1 &lt; 2</td><td>true</td><td></td><td></td></tr><tr><td>&gt;</td><td>大于号</td><td>1 &gt; 2</td><td>false</td><td></td><td></td></tr><tr><td>&gt;=</td><td>大于等于号(大于或者等于)</td><td>2 &gt;= 2</td><td>true</td><td></td><td></td></tr><tr><td>&lt;=</td><td>小于等于号(小于或者等于)</td><td>3 &lt;= 2</td><td>false</td><td></td><td></td></tr><tr><td>==</td><td>判等号(会转型)</td><td>37 == 37</td><td>true</td><td></td><td></td></tr><tr><td>!=</td><td>不等号</td><td>37 != 37</td><td>false</td><td></td><td></td></tr><tr><td>===</td><td>全等 要求值和数据类型都一致</td><td>37 === ‘37’</td><td>false</td><td></td><td></td></tr><tr><td>① ==小结==</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>符号</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>把右边给左边</td></tr><tr><td>==</td><td>判断</td><td>判断两边值是否相等(注意此时有隐士转换)</td></tr><tr><td>===</td><td>全等</td><td>判断两边的值和数据类型是否完全相同</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">18</span> == <span class="hljs-string">&#x27;18&#x27;</span>);<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">18</span> === <span class="hljs-string">&#x27;18&#x27;</span>);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h4 id="2-6-5、逻辑运算符"><a href="#2-6-5、逻辑运算符" class="headerlink" title="2.6.5、逻辑运算符"></a>2.6.5、逻辑运算符</h4><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值</p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称”与” and</td><td>true &amp;&amp; false</td></tr><tr><td>||</td><td>“逻辑或”，简称”或” or</td><td>true || false</td></tr><tr><td>！</td><td>“逻辑非”，简称”非” not</td><td>！true</td></tr></tbody></table><p>逻辑与：两边都是 true才返回 true，否则返回 false</p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/27faf833bca6432ab3edc64aeef5733c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"><p>逻辑或：两边都为 false 才返回 false，否则都为true</p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/8477f4ed90c646a492d4815ea476f3dc.png#pic_center" alt="在这里插入图片描述" class="lazyload"><p>逻辑非：逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> isOk = !<span class="hljs-literal">true</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(isOk);  <span class="hljs-comment">// false</span><br><span class="hljs-comment">//逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false</span><br></code></pre></td></tr></table></figure><h5 id="2-6-5-1、短路运算-逻辑中断"><a href="#2-6-5-1、短路运算-逻辑中断" class="headerlink" title="2.6.5.1、短路运算(逻辑中断)"></a>2.6.5.1、短路运算(逻辑中断)</h5><p>短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值</p><h6 id="①逻辑与"><a href="#①逻辑与" class="headerlink" title="①逻辑与"></a>①逻辑与</h6><ul><li>语法：==表达式1 &amp;&amp; 表达式2==</li><li>如果第一个表达式的值为真，则返回表达式2</li><li>如果第一个表达式的值为假，则返回表达式1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span>);   <span class="hljs-comment">//456</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">456</span>);     <span class="hljs-comment">//0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> &amp;&amp; <span class="hljs-number">456</span> &amp;&amp; <span class="hljs-number">789</span>);  <span class="hljs-comment">//789</span><br></code></pre></td></tr></table></figure><h6 id="②逻辑或"><a href="#②逻辑或" class="headerlink" title="②逻辑或"></a>②逻辑或</h6><ul><li>语法：==表达式1 || 表达式2==</li><li>如果第一个表达式的值为真，则返回表达式1</li><li>如果第一个表达式的值为假，则返回表达式2</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || <span class="hljs-number">456</span>); <span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span> || <span class="hljs-number">456</span>);   <span class="hljs-comment">//456</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || <span class="hljs-number">456</span> || <span class="hljs-number">789</span>);  <span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span> || num++);<br><span class="hljs-comment">// 先返回在加，相当于 (123 || 0)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);    <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><h4 id="2-6-6、赋值运算符"><a href="#2-6-6、赋值运算符" class="headerlink" title="2.6.6、赋值运算符"></a>2.6.6、赋值运算符</h4><p>概念：用来把数据赋值给变量的运算符。</p><table><thead><tr><th>赋值运算符</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td><td>var usrName = ‘我是值’</td></tr><tr><td>+= ，-=</td><td>加，减一个数后再赋值</td><td>var age = 10； age+=5；//15</td></tr><tr><td>*=，/=，%=</td><td>成，除，取模后再赋值</td><td>var age = 2; age*=5; //10</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">10</span>;<br>age += <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age + 5;</span><br>age -= <span class="hljs-number">5</span>;  <span class="hljs-comment">// 相当于 age = age - 5;</span><br>age *= <span class="hljs-number">10</span>; <span class="hljs-comment">// 相当于 age = age * 10;</span><br></code></pre></td></tr></table></figure><h4 id="2-6-7、运算符优先级"><a href="#2-6-7、运算符优先级" class="headerlink" title="2.6.7、运算符优先级"></a>2.6.7、运算符优先级</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>++ – ！</td></tr><tr><td>3</td><td>算数运算符</td><td><strong>先 * / 后 + -</strong></td></tr><tr><td>4</td><td>关系运算符</td><td><strong>&gt;, &gt;= , &lt; , &lt;=</strong>,</td></tr><tr><td>5</td><td>相等运算符</td><td>，！=，=，！==</td></tr><tr><td>6</td><td>逻辑运算符</td><td><strong>先 &amp;&amp; 后 ||（先与后或）</strong></td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>，</td></tr></tbody></table><p>==1.一元运算符里面的<strong>逻辑非</strong>优先级很高==</p><p>==2.<strong>逻辑与</strong> 比 <strong>逻辑或</strong> 优先级高==</p><p>3.练习题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">console.log( 4 &gt;= 6 || &#x27;人&#x27; != &#x27;阿凡达&#x27; &amp;&amp; !(12 * 2 == 144) &amp;&amp; true)// true<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">3</span> &gt; <span class="hljs-number">5</span> &amp;&amp; <span class="hljs-number">2</span> &lt; <span class="hljs-number">7</span> &amp;&amp; <span class="hljs-number">3</span> == <span class="hljs-number">4</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//false </span><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">3</span> &lt;= <span class="hljs-number">4</span> || <span class="hljs-number">3</span> &gt; <span class="hljs-number">1</span> || <span class="hljs-number">3</span> != <span class="hljs-number">2</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">var</span> c = <span class="hljs-number">2</span> === <span class="hljs-string">&quot;2&quot;</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c);  <span class="hljs-comment">//false</span><br><br><span class="hljs-keyword">var</span> d = !c || b &amp;&amp; a ;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h3 id="2-7、流程控制"><a href="#2-7、流程控制" class="headerlink" title="2.7、流程控制"></a>2.7、流程控制</h3><p>流程控制主要有三种结构，分别是顺序结构、分支结构和循环结构，这三种结构代表三种代码执行的顺序</p><h4 id="2-7-1、分支结构"><a href="#2-7-1、分支结构" class="headerlink" title="2.7.1、分支结构"></a>2.7.1、分支结构</h4><p>JS 语言提供了两种分支结构语句：<strong>JS 语句</strong> <strong>switch语句</strong></p><h5 id="①if语句"><a href="#①if语句" class="headerlink" title="①if语句"></a>①if语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 条件成立执行代码，否则什么也不做</span><br><span class="hljs-keyword">if</span> (条件表达式) &#123;<br>    <span class="hljs-comment">//条件成立执行的代码语句</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例：进入网吧</strong></p><p>逻辑：弹出一个输入框，要求用户输入年龄，如果年龄大于等于 18 岁，允许进网吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> usrAge = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入您的年龄:&#x27;</span>);<br><span class="hljs-keyword">if</span>(usrAge &gt;= <span class="hljs-number">18</span>)<br>&#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您的年龄合法，欢迎来到老子网吧享受学习的乐趣！&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②if-else-语句"><a href="#②if-else-语句" class="headerlink" title="②if else 语句"></a>②if else 语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 条件成立，执行if里面代码，否则执行else里面的代码</span><br><span class="hljs-keyword">if</span>(条件表达式)<br>&#123;<br>    <span class="hljs-comment">//[如果]条件成立执行的代码</span><br>&#125;<br><span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">//[否则]执行的代码</span><br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>案例：判断闰年</strong></p><p>逻辑：接收用户输入的年份，如果是闰年就弹出闰年，否则弹出是平年</p><p><strong>算法</strong>：能被4整除且不能整除100的为闰年（如2004年就是闰年，1901年不是闰年）或者能够被 400 整除的就是闰年</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> year = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入年份&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> !=<span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> ==<span class="hljs-number">0</span>)<br>&#123;<br>   <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;这个年份是闰年&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;这个年份是平年&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="③if-else-if-语句"><a href="#③if-else-if-语句" class="headerlink" title="③if else if 语句"></a>③if else if 语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">1</span>)<br>&#123;<br>  语句<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">2</span>)<br>&#123;<br>   语句<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">3</span>)<br>&#123;<br>  语句<span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>   <span class="hljs-comment">//上述条件都不成立执行此处代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>**案例:**接收用户输入的分数，根据分数输出对应的等级字母 A、B、C、D、E</p><p>其中：</p><p>90分(含)以上 ，输出：A</p><p>80分(含)~ 90 分(不含)，输出：B</p><p>70分(含)~ 80 分(不含)，输出：C</p><p>60分(含)~ 70 分(不含)，输出：D</p><p>60分(不含) 以下，输出： E</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> score = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请您输入分数:&#x27;</span>);<br>       <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;宝贝，你是我的骄傲&#x27;</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;宝贝，你已经很出色了&#x27;</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你要继续加油喽&#x27;</span>);<br>       &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;孩子，你很危险&#x27;</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;可以再努力点吗，你很棒，但还不够棒&#x27;</span>);<br>       &#125;<br></code></pre></td></tr></table></figure><h4 id="2-7-2、三元表达式"><a href="#2-7-2、三元表达式" class="headerlink" title="2.7.2、三元表达式"></a>2.7.2、三元表达式</h4><ul><li>语法结构 : ==表达式1 ? 表达式2 : 表达式3==</li><li>执行思路</li></ul><p>如果表达式1为true，则返回表达式2的值,如果表达式1为false，则返回表达式3的值</p><p><strong>案例：数字补0</strong></p><p>用户输入数字，如果数字小于10，则在前面补0，比如01，09，</p><p>如果数字大于10，则不需要补，比如20</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> figuer = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入0~59之间的一个数字&#x27;</span>);<br>        <span class="hljs-keyword">var</span> result = figuer &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&#x27;0&#x27;</span> + figuer : figue<br>        <span class="hljs-title function_">alert</span>(result);<br></code></pre></td></tr></table></figure><h4 id="2-7-3、switch"><a href="#2-7-3、switch" class="headerlink" title="2.7.3、switch"></a>2.7.3、switch</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-attr">value1</span>:<br>     <span class="hljs-comment">//表达式等于 value1 时要执行的代码</span><br>     <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-attr">value2</span>:<br>     <span class="hljs-comment">//表达式等于value2 时要执行的代码</span><br>     <span class="hljs-keyword">break</span>;<br>  <span class="hljs-attr">default</span>:<br>     <span class="hljs-comment">//表达式不等于任何一个value时要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>switch ：开关 转换 ， case ：小例子 选项</li><li>关键字 switch 后面括号内可以是表达式或值， 通常是一个变量</li><li>关键字 ==case== , 后跟一个选项的表达式或值，后面跟一个冒号</li><li>switch 表达式的值会与结构中的 case 的值做比较</li><li>如果存在匹配全等(===) ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</li><li>如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</li><li>执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 用户在弹出框里面输入一个水果，如果有就弹出该水果的价格， 如果没有该水果就弹出“没有此水果”</span><br>        <span class="hljs-keyword">var</span> fruit = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请您输入查询的苹果&#x27;</span>);<br>        <span class="hljs-keyword">switch</span> (fruit) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;苹果&#x27;</span>:<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;苹果的价格为3.5元/千克&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;香蕉&#x27;</span>:<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;香蕉的价格为3元/千克&#x27;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-attr">default</span>:<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;没有这种水果&#x27;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><h2 id="3、断点调试"><a href="#3、断点调试" class="headerlink" title="3、断点调试"></a>3、断点调试</h2><ol><li><p>浏览器中按 F12–&gt; sources –&gt;找到需要调试的文件–&gt;在程序的某一行设置断点(在行数点一下)</p></li><li><p>刷新浏览器</p></li><li><p>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用</p></li><li><p>F11: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化</p></li></ol><h2 id="4、循环"><a href="#4、循环" class="headerlink" title="4、循环"></a>4、循环</h2><h3 id="4-1、for循环"><a href="#4-1、for循环" class="headerlink" title="4.1、for循环"></a>4.1、for循环</h3><p>在程序中，一组被重复执行的语句被称之为<strong>循环体</strong>，能否继续重复执行，取决于循环的<strong>终止条件</strong>。由循环体及循环的终止条件组成的语句，被称之为<strong>循环语句</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(初始化变量;条件表达式;操作表达式)<br>&#123;<br>   <span class="hljs-comment">//循环体</span><br>&#125;<br></code></pre></td></tr></table></figure><p>==<strong>例子：</strong>==</p><p>1.输入10句”娘子晚安哈！”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//基本写法</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; i++  )<br>    &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;娘子晚安哈&#x27;</span>);<br>    &#125;<br><span class="hljs-comment">// 用户输入次数</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入次数:&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i&lt;= num ;i++)<br>    &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;娘子晚安哈&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>2.求1-100之间所有整数的累加和</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 求1-100所以的整数和</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> sum = sum + i;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);<br></code></pre></td></tr></table></figure><p><strong>3.求1-100之间所有数的平均值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">// 3.求1-100之间所有数的平均值</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> sum = sum + i;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum / <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>4.求1-100之间所有偶数和奇数的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//    4.求1-100之间所有偶数和奇数的和</span><br><span class="hljs-keyword">var</span> sum1 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> sum2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        sum1 = sum1 + i;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        sum2 = sum2 + i;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;偶数和为&#x27;</span> + sum1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;奇数和为&#x27;</span> + sum2);<br></code></pre></td></tr></table></figure><p>5.求1-100之间所有能被3整除的数字的和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 5.求1-100之间所有能被3整除的数字的和</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>        sum += i;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sum);<br></code></pre></td></tr></table></figure><p>6.要求用户输入班级人数，之后依次输入每个学生的成绩，最后打印出该班级总的成绩以及平均成绩。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入班级总的人数:&#x27;</span>); <span class="hljs-comment">// num 班级总的人数</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>; <span class="hljs-comment">// 总成绩</span><br><span class="hljs-keyword">var</span> average = <span class="hljs-number">0</span>; <span class="hljs-comment">// 平均成绩</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++) &#123;<br>     <span class="hljs-keyword">var</span> score = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入第&#x27;</span> + i + <span class="hljs-string">&#x27;个学生的成绩&#x27;</span>);<br>    <span class="hljs-comment">//这里接收的是str，必须转换为数值</span><br>     sum = sum + <span class="hljs-built_in">parseFloat</span>(score);         <br>&#125;<br>average = sum / num;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;班级总的成绩是：&#x27;</span> + sum);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;班级总的平均成绩是：&#x27;</span> + average);<br></code></pre></td></tr></table></figure><p><strong>7.一行打印5个星星</strong></p><p>我们采取追加字符串的方式，这样可以打印到控制台上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> star = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>     star += <span class="hljs-string">&#x27;☆&#x27;</span>;<br> &#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(star);<br></code></pre></td></tr></table></figure><h3 id="4-2、双重for循环"><a href="#4-2、双重for循环" class="headerlink" title="4.2、双重for循环"></a>4.2、双重for循环</h3><p><strong>循环嵌套</strong>是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，这样的 for 循环语句我们称之为双重for循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(外循环的初始;外循环的条件;外形循环的操作表达式)&#123;<br>    <span class="hljs-keyword">for</span>(内循环的初始;内循环的条件;内循环的操作表达式)&#123;<br>        需执行的代码;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内层循环可以看做外层循环的语句</li><li>内层循环执行的顺序也要遵循 for 循环的执行顺序</li><li>外层循环执行一次，内层循环要执行全部次数</li></ul><h5 id="①打印五行五列星星"><a href="#①打印五行五列星星" class="headerlink" title="①打印五行五列星星"></a>①打印五行五列星星</h5><p>核心：</p><ul><li>内层循环负责一行打印五个星星</li><li>外层循环负责打印五行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> star = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">5</span>;j++)<br>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>   &#123;<br>     star += <span class="hljs-string">&#x27;☆&#x27;</span><br>   &#125;<br>    <span class="hljs-comment">//每次满5个星星就加一次换行</span><br>    star +=<span class="hljs-string">&#x27;\n&#x27;</span>  <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(star);<br><br></code></pre></td></tr></table></figure><h5 id="②打印n行n列的星星"><a href="#②打印n行n列的星星" class="headerlink" title="②打印n行n列的星星"></a>②打印n行n列的星星</h5><p>要求用户输入行数和列数，之后在控制台打印出用户输入行数和列数的星星</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> star = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">var</span> row = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入行数&#x27;</span>);<br><span class="hljs-keyword">var</span> col = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入列数&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span>; j &lt;= col; j++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= row; i++) &#123;<br>        star += <span class="hljs-string">&#x27;☆&#x27;</span>;<br>    &#125;<br>    star += <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(star);<br><br></code></pre></td></tr></table></figure><h5 id="③打印倒三角形"><a href="#③打印倒三角形" class="headerlink" title="③打印倒三角形"></a>③打印倒三角形</h5><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/737dd2f352e74767bb8f2a89e6539061.png#pic_center" alt="在这里插入图片描述" class="lazyload"></p><ul><li>一共有10行，但是每行的星星个数不一样，因此需要用到双重 for 循环</li><li>外层的 for 控制行数 i ，循环10次可以打印10行</li><li>内层的 for 控制每行的星星个数 j</li><li>核心算法： 每一行星星的个数： j = i ; j &lt;= 10; j++</li><li>每行打印完毕后，都需要重新换一行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> star = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">var</span> row = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入行数&#x27;</span>);<br><span class="hljs-keyword">var</span> col = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入列数&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= row; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = i; j &lt;= col; j++) &#123;<br>        star += <span class="hljs-string">&#x27;☆&#x27;</span>;<br>    &#125;<br>    star += <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(star);<br></code></pre></td></tr></table></figure><h3 id="4-3、while循环"><a href="#4-3、while循环" class="headerlink" title="4.3、while循环"></a>4.3、while循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span>(条件表达式)&#123;<br>  <span class="hljs-comment">//循环体代码</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>执行思路：</p></li><li><p>先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码</p></li><li><p>执行循环体代码</p></li><li><p>循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束</p></li></ul><p><strong>注意</strong>：</p><ul><li>使用 while 循环时一定要注意，它必须要有退出条件，否则会称为死循环</li><li>while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码</li></ul><h5 id="①打印人的一生"><a href="#①打印人的一生" class="headerlink" title="①打印人的一生"></a>①打印人的一生</h5><p>从1岁到99岁</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (age &lt;= <span class="hljs-number">100</span>) &#123;<br>    age++;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;您今年&#x27;</span> + age + <span class="hljs-string">&#x27;岁了&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="②计算-1-100-之间所有整数的和"><a href="#②计算-1-100-之间所有整数的和" class="headerlink" title="②计算 1 ~ 100 之间所有整数的和"></a>②计算 1 ~ 100 之间所有整数的和</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> figure = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (figure &lt;= <span class="hljs-number">100</span>) &#123;<br>            sum += figure;<br>            figure++;<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-100的整数和为&#x27;</span> + sum);<br></code></pre></td></tr></table></figure><h3 id="4-4、do-while循环"><a href="#4-4、do-while循环" class="headerlink" title="4.4、do while循环"></a>4.4、do while循环</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">do &#123;<br>  //循环体代码-条件表达式为true的时候重复执行循环一代码<br>&#125;while(条件表达式);<br></code></pre></td></tr></table></figure><p>执行思路：</p><ol><li>先执行一次循环体代码</li><li>再执行表达式，如果结果为true，则继续执行循环体代码，如果为false，则退出循环，继续执行后面的代码</li><li>先执行再判断循环体，<strong>所以dowhile循环语句至少会执行一次循环体代码</strong></li></ol><p><strong>需求：弹出一个提示框， 你爱我吗？ 如果输入我爱你，就提示结束，否则，一直询问</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">var</span> love = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;你爱我吗？&#x27;</span>);<br>&#125; <span class="hljs-keyword">while</span> (love != <span class="hljs-string">&#x27;我爱你&#x27;</span>);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-5、-continue-关键字"><a href="#4-5、-continue-关键字" class="headerlink" title="4.5、==continue== 关键字"></a>4.5、==continue== 关键字</h3><p>==continue== 关键字用于<strong>立即跳出本次循环，继续下一次循环</strong>（本次循环体中 continue 之后的代码就会少执行一次）。</p><p>例如，吃5个包子，第3个有虫子，就扔掉第3个，继续吃第4个第5个包子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这个包子有虫子，扔掉&#x27;</span>);<br>     <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳出本次循环，跳出的是第3次循环 </span><br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6、-break-关键字"><a href="#4-6、-break-关键字" class="headerlink" title="4.6、==break==关键字"></a>4.6、==break==关键字</h3><p>break 关键字用于<strong>立即跳出整个循环</strong></p><p>例如，吃5个包子，吃到第3个发现里面有半个虫子，其余的也不吃了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123;<br>       <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 直接退出整个for 循环，跳到整个for下面的语句</span><br>   &#125;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我正在吃第&#x27;</span> + i + <span class="hljs-string">&#x27;个包子呢&#x27;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="5、数组"><a href="#5、数组" class="headerlink" title="5、数组"></a>5、数组</h2><p>数组(Array)是指一组数据的集合，其中的每个数据被称作元素，在数组中可以存放任意类型的元素。数组是一种将一组数据存储在单个变量名下的优雅方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//普通变量一次只能存储一个值</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//数组一次可以存储多个值</span><br><span class="hljs-keyword">var</span> arr =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h3 id="5-1、创建数组"><a href="#5-1、创建数组" class="headerlink" title="5.1、创建数组"></a>5.1、创建数组</h3><p>JavaScript 中创建数组有两种方式：</p><ul><li>利用 new 创建数组</li><li>利用数组字面量创建数组</li></ul><h5 id="①利用-new-创建数组"><a href="#①利用-new-创建数组" class="headerlink" title="①利用 new 创建数组"></a>①利用 new 创建数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 数组名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(); <span class="hljs-comment">//创建一个新的空数组</span><br></code></pre></td></tr></table></figure><ul><li>这种方式暂且了解，等学完对象再看</li><li>注意 <code>Array()</code>，A要大写</li></ul><h5 id="②利用数组字面量创建数组"><a href="#②利用数组字面量创建数组" class="headerlink" title="②利用数组字面量创建数组"></a>②利用数组字面量创建数组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.利用数组字面量方式创建空的数组 </span><br><span class="hljs-keyword">var</span> 数组名 =[];<br><span class="hljs-comment">// 2.使用数组字面量方式创建带初始值的数组</span><br><span class="hljs-keyword">var</span> 数组名 =[<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-string">&#x27;小黄&#x27;</span>,<span class="hljs-string">&#x27;瑞奇&#x27;</span>];<br><span class="hljs-comment">// 3.数组中可以存放任意类型的数据，例如字符串，数字，布尔值等</span><br><span class="hljs-keyword">var</span> arrStus =[<span class="hljs-string">&#x27;小白&#x27;</span>，<span class="hljs-number">12</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">28.9</span>];<br></code></pre></td></tr></table></figure><ul><li>数组的字面量是方括号 <code>[]</code></li><li>声明数组并赋值称为数组的初始化</li><li>这种字面量方式也是我们以后最多使用的方式</li></ul><h3 id="5-2、数组的索引（下标）"><a href="#5-2、数组的索引（下标）" class="headerlink" title="5.2、数组的索引（下标）"></a>5.2、数组的索引（下标）</h3><p>索引 (下标) ：用来访问数组元素的序号（数组下标从 0 开始）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义数组</span><br><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-comment">//获取数组中的第2个元素</span><br><span class="hljs-title function_">alert</span>(arrStus[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h3 id="5-3、遍历数组"><a href="#5-3、遍历数组" class="headerlink" title="5.3、遍历数组"></a>5.3、遍历数组</h3><p>我们可以通过 for 循环索引遍历数组中的每一项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数组索引访问数组中的元素</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">0</span>]) <span class="hljs-comment">// red</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">1</span>]) <span class="hljs-comment">// green</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">2</span>]) <span class="hljs-comment">// blue</span><br><br><span class="hljs-comment">// for循环遍历数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrStus[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4、数组的长度"><a href="#5-4、数组的长度" class="headerlink" title="5.4、数组的长度"></a>5.4、数组的长度</h3><p>使用“数组名.length”可以访问数组元素的数量（数组长度）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arrStus = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-title function_">alert</span>(arrStus.<span class="hljs-property">length</span>);  <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>此处数组的长度是<strong>数组元素的个数</strong> ，不要和<strong>数组的索引号</strong>混淆</li><li>当我们数组里面的元素个数发生了变化，这个 length 属性跟着一起变化</li></ul><h3 id="5-5、-案例"><a href="#5-5、-案例" class="headerlink" title="5.5、==案例=="></a>5.5、==案例==</h3><p><strong>1.请将 [“关羽”,“张飞”,“马超”,“赵云”,“黄忠”,“刘备”,“姜维”]; 数组里的元素依次打印到控制台</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-string">&quot;马超&quot;</span>,<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-string">&quot;黄忠&quot;</span>,<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-string">&quot;姜维&quot;</span>]; <br><span class="hljs-comment">// 遍历  从第一个到最后一个</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++ )  &#123; <br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( arr[i] );<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>2.求数组 [2,6,1,7, 4] 里面所有元素的和以及平均值</strong></p><ul><li>①声明一个求和变量 sum。</li><li>①遍历这个数组，把里面每个数组元素加到 sum 里面。</li><li>①用求和变量 sum 除以数组的长度就可以得到数组的平均值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> average = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    sum += arr[i];<br>&#125;<br>average = sum / i; <span class="hljs-comment">//此时i为5</span><br><span class="hljs-comment">//      average = sum / arr.length;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;和为&#x27;</span> + sum);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;平均值为&#x27;</span> + average);<br></code></pre></td></tr></table></figure><p><strong>3.求数组[2,6,1,77,52,25,7]中的最大值</strong></p><ul><li>①声明一个保存最大元素的变量 max。</li><li>②默认最大值可以取数组中的第一个元素。</li><li>③遍历这个数组，把里面每个数组元素和 max 相比较。</li><li>④如果这个数组元素大于max 就把这个数组元素存到 max 里面，否则继续下一轮比较。</li><li>⑤最后输出这个 max。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">52</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">var</span> max = arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">var</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (max &lt; arr[i]) &#123;<br>                temp = max;<br>                max = arr[i];<br>                arr[i] = temp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;最大值为&#x27;</span> + max);<br><br><br>方法二：<br><br><span class="hljs-keyword">var</span> arrNum = [<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">77</span>,<span class="hljs-number">52</span>,<span class="hljs-number">25</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> maxNum = arrNum[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 用来保存最大元素,默认最大值是数组中的第一个元素</span><br><span class="hljs-comment">// 从0 开始循环数组里的每个元素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt; arrNum.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-comment">// 如果数组里当前循环的元素大于 maxNum，则保存这个元素和下标</span><br>    <span class="hljs-keyword">if</span>(arrNum[i] &gt; maxNum)&#123;<br>        maxNum = arrNum[i]; <span class="hljs-comment">// 保存数值到变量 maxNum</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 里面的元素转换为字符串</strong></p><p>思路：就是把里面的元素相加就好了，但是注意保证是字符相加</p><ul><li>①需要一个新变量 str 用于存放转换完的字符串。</li><li>②遍历原来的数组，分别把里面数据取出来，加到字符串变量 str 里面。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>];<br><span class="hljs-keyword">var</span> str =<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++)&#123;<br>    str += arr[i];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><span class="hljs-comment">// redgreenbluepink</span><br></code></pre></td></tr></table></figure><p><strong>5.将数组 [‘red’, ‘green’, ‘blue’, ‘pink’] 转换为字符串，并且用 | 或其他符号分割</strong></p><ul><li>①需要一个新变量用于存放转换完的字符串 str。</li><li>①遍历原来的数组，分别把里面数据取出来，加到字符串里面。</li><li>①同时在后面多加一个分隔符。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>];<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">var</span> separator = <span class="hljs-string">&#x27;|&#x27;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>   str += arr[i] + separator;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><span class="hljs-comment">// red|green|blue|pink</span><br><br></code></pre></td></tr></table></figure><h3 id="5-6、数组中新增元素"><a href="#5-6、数组中新增元素" class="headerlink" title="5.6、数组中新增元素"></a>5.6、数组中新增元素</h3><h5 id="①通过修改-length-长度新增数组元素"><a href="#①通过修改-length-长度新增数组元素" class="headerlink" title="①通过修改 length 长度新增数组元素"></a>①通过修改 length 长度新增数组元素</h5><ul><li>可以通过修改 length 长度来实现数组扩容的目的</li><li>length 属性是可读写的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>];<br>arr.<span class="hljs-property">length</span> = <span class="hljs-number">7</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">4</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">5</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">6</span>]);<br></code></pre></td></tr></table></figure><p>其中索引号是 4，5，6 的空间没有给值，就是声明变量未给值，默认值就是 <strong>undefined</strong></p><h5 id="②通过修改数组索引新增数组元素"><a href="#②通过修改数组索引新增数组元素" class="headerlink" title="②通过修改数组索引新增数组元素"></a>②通过修改数组索引新增数组元素</h5><ul><li>可以通过修改数组索引的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li><li>这种方式也是我们最常用的一种方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>];<br>arr[<span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;hotpink&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><h3 id="5-7、数组中新增元素"><a href="#5-7、数组中新增元素" class="headerlink" title="5.7、数组中新增元素"></a>5.7、数组中新增元素</h3><p>1.新建一个数组，里面存放10个整数（ 1~10）， 要求使用循环追加的方式输出： [1,2,3,4,5,6,7,8,9,10]</p><p>①使用循环来追加数组。<br>②声明一个空数组 arr。<br>③循环中的计数器 i 可以作为数组元素存入。<br>由于数组的索引号是从0开始的， 因此计数器从 0 开始更合适，存入的数组元素要+1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>    arr[i] = i + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><p><strong>2.将数组 [2, 0, 6, 1, 77, 0, 52, 0, 25, 7] 中大于等于 10 的元素选出来，放入新数组</strong></p><ul><li>①声明一个新的数组用于存放新数据。</li><li>②遍历原来的数组，找出大于等于 10 的元素。</li><li>③依次追加给新数组 newArr。</li></ul><p>实现代码1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-comment">// 定义一个变量 用来计算 新数组的索引号</span><br><span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">// 给新数组</span><br>        newArr[j] = arr[i];<br>        <span class="hljs-comment">// 索引号 不断自加</span><br>        j++;<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><p>实现代码2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">// 给新数组</span><br>        newArr[newArr.<span class="hljs-property">length</span>] = arr[i];<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><h3 id="5-8、删除指定数组元素"><a href="#5-8、删除指定数组元素" class="headerlink" title="5.8、删除指定数组元素"></a>5.8、删除指定数组元素</h3><p><strong>将数组[2, 0, 6, 1, 77, 0, 52, 0, 25, 7]中的 0 去掉后，形成一个不包含 0 的新数组。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;arr.<span class="hljs-property">length</span>; i++)&#123;<br>    <span class="hljs-keyword">if</span>(arr[i] != <span class="hljs-number">0</span>)&#123;<br>        newArr[newArr.<span class="hljs-property">length</span>] = arr[i];<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//老师代码</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">77</span>, <span class="hljs-number">0</span>, <span class="hljs-number">52</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> newArr = [];   <span class="hljs-comment">// 空数组的默认的长度为 0 </span><br><span class="hljs-comment">// 定义一个变量 i 用来计算新数组的索引号</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-comment">// 找出大于 10 的数</span><br>    <span class="hljs-keyword">if</span> (arr[i] != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 给新数组</span><br>        <span class="hljs-comment">// 每次存入一个值，newArr长度都会 +1  </span><br>        newArr[newArr.<span class="hljs-property">length</span>] = arr[i];<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><h3 id="5-9、翻转数组"><a href="#5-9、翻转数组" class="headerlink" title="5.9、翻转数组"></a>5.9、翻转数组</h3><p><strong>将数组 [‘red’, ‘green’, ‘blue’, ‘pink’, ‘purple’] 的内容反过来存放</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 把旧数组索引号的第4个取过来(arr.length - 1),给新数组索引号第0个元素(newArr.length)</span><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>,<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;pink&#x27;</span>,<span class="hljs-string">&#x27;purple&#x27;</span>];<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = arr.<span class="hljs-property">length</span> -<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>    newArr[newArr.<span class="hljs-property">length</span>] = arr[i];<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><h3 id="5-10、数组排序"><a href="#5-10、数组排序" class="headerlink" title="5.10、数组排序"></a>5.10、数组排序</h3><p>冒泡排序</p><p>将数组 [5, 4, 3, 2, 1]中的元素按照从小到大的顺序排序，输出： 1，2，3，4，5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>; i++)&#123; <span class="hljs-comment">//外层循环管趟数，5个数共交换4躺</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt;= arr.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>; j++)&#123;<br>        <span class="hljs-comment">//里层循环管每一趟交换的次数</span><br>        <span class="hljs-comment">//前一个和后面一个数组元素相比较</span><br>        <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-keyword">var</span> temp = arr[j];<br>            arr[j] = arr[j+<span class="hljs-number">1</span>];<br>            arr[j+<span class="hljs-number">1</span>] = temp;<br>        &#125;  <br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“JavaScript DOM(API) ”</title>
      <link href="/2022/01/05/Java%20Script%20DOM%20%20(API)/"/>
      <url>/2022/01/05/Java%20Script%20DOM%20%20(API)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（DOM概述、元素获取、事件基础、元素操作、节点操作、DOM核心操作【增删改查等】、事件高级）</p><span id="more"></span><h1 id="JavaScript-の-DOM-API"><a href="#JavaScript-の-DOM-API" class="headerlink" title="JavaScript の DOM(API)"></a>JavaScript の DOM(API)</h1><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f073657f05c248ffa8056bf437e66edb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="思维导图" class="lazyload"></p><h2 id="1、DOM简介"><a href="#1、DOM简介" class="headerlink" title="1、DOM简介"></a>1、DOM简介</h2><h4 id="1-1、什么是DOM"><a href="#1-1、什么是DOM" class="headerlink" title="1.1、什么是DOM"></a>1.1、什么是DOM</h4><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口，W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/fc42557d25be4683881c2f0f231bc778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><ul><li>文档：一个页面就是一个文档，DOM中使用doucument来表示</li><li>元素：页面中的所有标签都是元素，DOM中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表</li></ul><p>DOM 把以上内容都看做是<strong>对象</strong></p><h2 id="2、获取元素"><a href="#2、获取元素" class="headerlink" title="2、获取元素"></a>2、获取元素</h2><h4 id="2-1、如何获取页面元素"><a href="#2-1、如何获取页面元素" class="headerlink" title="2.1、如何获取页面元素"></a>2.1、如何获取页面元素</h4><p>DOM在我们实际开发中主要用来操作元素。</p><p>我们如何来获取页面中的元素呢?</p><p>获取页面中的元素可以使用以下几种方式:</p><ul><li>根据 ID 获取</li><li>根据标签名获取</li><li>通过 HTML5 新增的方法获取</li><li>特殊元素获取</li></ul><h4 id="2-2、根据ID获取"><a href="#2-2、根据ID获取" class="headerlink" title="2.2、根据ID获取"></a>2.2、根据ID获取</h4><p>使用 <code>getElementByld()</code> 方法可以获取带ID的元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">doucument.<span class="hljs-title function_">getElementByld</span>(<span class="hljs-string">&#x27;id名&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用 <code>console.dir()</code> 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p><p><strong>示例</strong>：</p><div id="time">2019-9-9</div><script>    // 1.因为我们文档页面从上往下加载，所以得先有标签，所以script写在标签下面    // 2.get 获得 element 元素 by 通过 驼峰命名法    // 3.参数 id是大小写敏感的字符串    // 4.返回的是一个元素对象    var timer = document.getElementById('time');    console.log(timer);    // 5. console.dir 打印我们的元素对象，更好的查看里面的属性和方法    console.dir(timer);</script><h4 id="2-3、根据标签名获取"><a href="#2-3、根据标签名获取" class="headerlink" title="2.3、根据标签名获取"></a>2.3、根据标签名获取</h4><p>根据<strong>标签名</strong>获取，使用 <code>getElementByTagName()</code> 方法可以返回带有指定标签名的<strong>对象的集合</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">doucument.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;标签名&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li><li>得到元素对象是动态的</li><li>返回的是获取过来元素对象的集合，以伪数组的形式存储</li><li>如果获取不到元素，则返回为空的伪数组(因为获取不到对象)</li></ul><p><strong>例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，应是等你好久<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，应是等你好久<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，应是等你好久<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，应是等你好久<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，应是等你好久<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1.返回的是获取过来元素对象的集合 以伪数组的形式存储</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis[<span class="hljs-number">0</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 2.依次打印,遍历</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; lis.<span class="hljs-property">length</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis[i]);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 3.如果页面中只有 1 个 li，返回的还是伪数组的形式</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 4.如果页面中没有这个元素，返回的是空伪数组</span></span></span><br><span class="language-javascript"><span class="language-xml">&lt;/script</span></span><br></code></pre></td></tr></table></figure><h4 id="2-4、根据标签名获取"><a href="#2-4、根据标签名获取" class="headerlink" title="2.4、根据标签名获取"></a>2.4、根据标签名获取</h4><p>还可以根据标签名获取某个元素（父元素）内部所有指定标签名的子元素,获取的时候不包括父元素自己</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;标签名&#x27;</span>)<br>ol.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：父元素必须是单个对象(必须指明是哪一个元素对象)，获取的时候不包括父元素自己</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-comment">//element.getElementsByTagName(&#x27;标签名&#x27;); 父元素必须是指定的单个元素</span><br>    <span class="hljs-keyword">var</span> ol = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ol&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>));<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="2-5、通过H5新增方法获取（重点）"><a href="#2-5、通过H5新增方法获取（重点）" class="headerlink" title="2.5、通过H5新增方法获取（重点）"></a>2.5、通过H5新增方法获取（重点）</h4><h5 id="①getElementsByClassName"><a href="#①getElementsByClassName" class="headerlink" title="①getElementsByClassName"></a>①getElementsByClassName</h5><p>根据类名返回元素对象合集</p><ul><li><code>document.getElementsByClassName(&#39;类名&#39;)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;类名&#x27;</span>); <br></code></pre></td></tr></table></figure><h5 id="②document-querySelector"><a href="#②document-querySelector" class="headerlink" title="②document.querySelector"></a>②document.querySelector</h5><p>根据指定选择器返回第一个元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;选择器&#x27;</span>);<br><span class="hljs-comment">// 切记里面的选择器需要加符号 </span><br><span class="hljs-comment">// 类选择器.box </span><br><span class="hljs-comment">// id选择器 #nav</span><br><span class="hljs-keyword">var</span> firstBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="③document-querySelectorAll"><a href="#③document-querySelectorAll" class="headerlink" title="③document.querySelectorAll"></a>③document.querySelectorAll</h5><p>根据指定选择器返回所有元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;选择器&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注意：querySelector<code>和</code>querySelectorAll<code>里面的选择器需要加符号,比如:</code>document.querySelector(‘#nav’)</p><h5 id="④例子"><a href="#④例子" class="headerlink" title="④例子"></a>④例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span><br>    <span class="hljs-keyword">var</span> boxs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;box&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(boxs);<br>    <span class="hljs-comment">// 2. querySelector 返回指定选择器的第一个元素对象  切记 里面的选择器需要加符号 .box  #nav</span><br>    <span class="hljs-keyword">var</span> firstBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstBox);<br>    <span class="hljs-keyword">var</span> nav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#nav&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nav);<br>    <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(li);<br>    <span class="hljs-comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span><br>    <span class="hljs-keyword">var</span> allBox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.box&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(allBox);<br>    <span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lis);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="2-6、获取特殊元素"><a href="#2-6、获取特殊元素" class="headerlink" title="2.6、获取特殊元素"></a>2.6、获取特殊元素</h4><h5 id="①获取body元素"><a href="#①获取body元素" class="headerlink" title="①获取body元素"></a>①获取body元素</h5><p>返回body元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br></code></pre></td></tr></table></figure><h5 id="②获取html元素"><a href="#②获取html元素" class="headerlink" title="②获取html元素"></a>②获取html元素</h5><p>返回html元素对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>;<br></code></pre></td></tr></table></figure><h2 id="3、事件基础（重点）"><a href="#3、事件基础（重点）" class="headerlink" title="3、事件基础（重点）"></a>3、事件基础（重点）</h2><h4 id="3-1、事件概述"><a href="#3-1、事件概述" class="headerlink" title="3.1、事件概述"></a>3.1、事件概述</h4><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： 触发— 响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><h4 id="3-2、事件三要素"><a href="#3-2、事件三要素" class="headerlink" title="3.2、事件三要素"></a>3.2、事件三要素</h4><ol><li>事件源(谁)</li><li>事件类型(什么事件)</li><li>事件处理程序(做啥)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 点击一个按钮，弹出对话框</span><br>    <span class="hljs-comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span><br>    <span class="hljs-comment">//(1) 事件源 事件被触发的对象   谁  按钮</span><br>    <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);<br>    <span class="hljs-comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span><br>    <span class="hljs-comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span><br>    btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;点秋香&#x27;</span>);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-3、执行事件的步骤"><a href="#3-3、执行事件的步骤" class="headerlink" title="3.3、执行事件的步骤"></a>3.3、执行事件的步骤</h4><ol><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 执行事件步骤</span><br>    <span class="hljs-comment">// 点击div 控制台输出 我被选中了</span><br>    <span class="hljs-comment">// 1. 获取事件源</span><br>    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    <span class="hljs-comment">// 2.绑定事件 注册事件</span><br>    <span class="hljs-comment">// div.onclick </span><br>    <span class="hljs-comment">// 3.添加事件处理程序 </span><br>    div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我被选中了&#x27;</span>);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-4、鼠标事件"><a href="#3-4、鼠标事件" class="headerlink" title="3.4、鼠标事件"></a>3.4、鼠标事件</h4><table><thead><tr><th align="left">鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td align="left">onclick</td><td>鼠标点击左键触发</td></tr><tr><td align="left">onmouseover</td><td>鼠标经过触发</td></tr><tr><td align="left">onmouseout</td><td>鼠标离开触发</td></tr><tr><td align="left">onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td align="left">onblur</td><td>失去鼠标焦点触发</td></tr><tr><td align="left">onmousemove</td><td>鼠标移动触发</td></tr><tr><td align="left">onmouseup</td><td>鼠标弹起触发</td></tr><tr><td align="left">onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h2 id="4、操作元素"><a href="#4、操作元素" class="headerlink" title="4、操作元素"></a>4、操作元素</h2><p>JavaScript 的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容 、属性等。注意以下都是属性</p><h4 id="4-1、改变元素内容（innerText和innerHTML区别）"><a href="#4-1、改变元素内容（innerText和innerHTML区别）" class="headerlink" title="4.1、改变元素内容（innerText和innerHTML区别）"></a>4.1、改变元素内容（innerText和innerHTML区别）</h4><p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-property">innerText</span><br></code></pre></td></tr></table></figure><p>起始位置到终止位置的全部内容，包括HTML标签，同时保留空格和换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-property">innerHTML</span><br></code></pre></td></tr></table></figure><p><strong>演示区别</strong>：</p><body><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    我是文字</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// innerText 和 innerHTML的区别 </span><br>    <span class="hljs-comment">// 1. innerText 不识别html标签,去除空格和换行</span><br>    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>    div.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;<br>    <span class="hljs-comment">// 2. innerHTML 识别html标签 保留空格和换行的</span><br>    div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;<br>    <span class="hljs-comment">// 这两个属性是可读写的  可以获取元素里面的内容</span><br>    <span class="hljs-keyword">var</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">innerText</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">innerHTML</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></body><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211103163205537.png" alt="image-20211103163205537" class="lazyload"></p><h4 id="4-2、改变元素属性"><a href="#4-2、改变元素属性" class="headerlink" title="4.2、改变元素属性"></a>4.2、改变元素属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// img.属性</span><br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;xxx&quot;</span>;<br><br>input.<span class="hljs-property">value</span> = <span class="hljs-string">&quot;xxx&quot;</span>;<br>input.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;xxx&quot;</span>;<br>input.<span class="hljs-property">checked</span> = <span class="hljs-string">&quot;xxx&quot;</span>;<br>input.<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span> / <span class="hljs-literal">false</span>;<br>input.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span> / <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><h4 id="4-3、改变样式属性"><a href="#4-3、改变样式属性" class="headerlink" title="4.3、改变样式属性"></a>4.3、改变样式属性</h4><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p><ul><li>行内样式操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// element.style</span><br>div.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;<br>div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;250px&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>类名样式操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// element.className</span><br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>JS里面的样式采取驼峰命名法，比如 fontSize ，backgroundColor</li><li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class 因为是个保留字，因此使用className来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol><body><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;文本&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> test = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    test.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.style.backgroundColor = &#x27;purple&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.style.color = &#x27;#fff&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.style.fontSize = &#x27;25px&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.style.marginTop = &#x27;100px&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 让我们当前元素的类名改为了 change    </span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this.className = &#x27;change&#x27;;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;first change&#x27;</span>;&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>​    </p></body><p></p><h4 id="4-4、总结"><a href="#4-4、总结" class="headerlink" title="4.4、总结"></a>4.4、总结</h4><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f6835ead437948e3804c4432ceb812ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="4-5、排他思想（全部清除-再设置选中部分）"><a href="#4-5、排他思想（全部清除-再设置选中部分）" class="headerlink" title="4.5、排他思想（全部清除 再设置选中部分）"></a>4.5、排他思想（全部清除 再设置选中部分）</h4><p>如果有同一组元素，我们相要某一个元素实现某种样式，需要用到循环的排他思想算法：</p><ol><li>所有元素全部清除样式（干掉其他人）</li><li>给当前元素设置样式 （留下我自己）</li><li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮5<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 获取所有按钮元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            btns[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btns.<span class="hljs-property">length</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    btns[i].<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//2. 首先先排除其他人，然后才设置自己的样式 这种排除其他人的思想我们成为排他思想</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/c4ab0beac7444b208441727a380b437e.gif#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h4 id="4-6、自定义属性"><a href="#4-6、自定义属性" class="headerlink" title="4.6、自定义属性"></a>4.6、自定义属性</h4><h5 id="4-6-1、获取属性值"><a href="#4-6-1、获取属性值" class="headerlink" title="4.6.1、获取属性值"></a>4.6.1、获取属性值</h5><ul><li>获取内置属性值(元素本身自带的属性)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.属性;<br></code></pre></td></tr></table></figure><ul><li>获取自定义的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;属性&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="4-6-2、设置属性值"><a href="#4-6-2、设置属性值" class="headerlink" title="4.6.2、设置属性值"></a>4.6.2、设置属性值</h5><ul><li>设置内置属性值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.属性 = <span class="hljs-string">&#x27;值&#x27;</span>;<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>主要设置自定义的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;属性&#x27;</span>);<br></code></pre></td></tr></table></figure><p>4.6.3、移除属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">element.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&#x27;属性&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 获取元素的属性值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// (1) element.属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">id</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//(2) element.getAttribute(&#x27;属性&#x27;)  get得到获取 attribute 属性的意思 我们程序员自己添加的属性我们称为自定义属性 index</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;id&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 设置元素属性值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// (1) element.属性= &#x27;值&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;test&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;navs&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span></span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>, <span class="hljs-number">2</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;footer&#x27;</span>); <span class="hljs-comment">// class 特殊  这里面写的就是class 不是className</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3 移除属性 removeAttribute(属性)    </span></span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&#x27;index&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="4-7、H5自定义属性"><a href="#4-7、H5自定义属性" class="headerlink" title="4.7、H5自定义属性"></a>4.7、H5自定义属性</h4><p>自定义属性目的：</p><ul><li>保存并保存数据，有些数据可以保存到页面中而不用保存到数据库中</li><li>有些自定义属性很容易引起歧义，不容易判断到底是内置属性还是自定义的，所以H5有了规定</li></ul><h5 id="4-7-1-设置H5自定义属性"><a href="#4-7-1-设置H5自定义属性" class="headerlink" title="4.7.1 设置H5自定义属性"></a>4.7.1 设置H5自定义属性</h5><p>H5规定自定义属性 <code>data-</code>开头作为属性名并赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div data-index = <span class="hljs-string">&quot;1&quot;</span>&gt;&lt;/&gt;<br><span class="hljs-comment">// 或者使用JavaScript设置</span><br>div.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h5 id="4-7-2-获取H5自定义属性"><a href="#4-7-2-获取H5自定义属性" class="headerlink" title="4.7.2 获取H5自定义属性"></a>4.7.2 获取H5自定义属性</h5><ul><li>兼容性获取 <code>element.getAttribute(&#39;data-index&#39;)</code></li><li>H5新增的：<code>element.dataset.index</code> 或<code>element.dataset[&#39;index&#39;]</code> IE11才开始支持</li></ul><body><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div getTime=<span class="hljs-string">&quot;20&quot;</span> data-index=<span class="hljs-string">&quot;2&quot;</span> data-list-name=<span class="hljs-string">&quot;andy&quot;</span>&gt;&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;getTime&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    div.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;data-time&#x27;</span>, <span class="hljs-number">20</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-index&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-list-name&#x27;</span>));</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>.<span class="hljs-property">index</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;index&#x27;</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>.<span class="hljs-property">listName</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>[<span class="hljs-string">&#x27;listName&#x27;</span>]);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></body><h2 id="5、节点操作"><a href="#5、节点操作" class="headerlink" title="5、节点操作"></a>5、节点操作</h2><h4 id="5-1、节点概述"><a href="#5-1、节点概述" class="headerlink" title="5.1、节点概述"></a>5.1、节点概述</h4><p>网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f176c025b5ff43468d53ed4d49259812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>一般的，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p><ul><li>元素节点：nodeType 为1</li><li>属性节点：nodeType 为2</li><li>文本节点：nodeType 为3(文本节点包括文字、空格、换行等)</li></ul><p>我们在实际开发中，节点操作主要操作的是<strong>元素节点</strong></p><p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是<strong>父子兄层级关系</strong>。</p><h4 id="5-2、父级节点"><a href="#5-2、父级节点" class="headerlink" title="5.2、父级节点"></a>5.2、父级节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-property">parentNode</span><br></code></pre></td></tr></table></figure><ul><li><code>parentNode</code>属性可以返回某节点的父结点，注意是最近的一个父结点</li><li>如果指定的节点没有父结点则返回null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    &lt;!-- 节点的优点 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;erweima&quot;</span>&gt;</span>×<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 父节点 parentNode</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> erweima = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(erweima.<span class="hljs-property">parentNode</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="5-3、子结点"><a href="#5-3、子结点" class="headerlink" title="5.3、子结点"></a>5.3、子结点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentNode.<span class="hljs-title function_">childNodes</span>(标准)<br></code></pre></td></tr></table></figure><ul><li><code>parentNode.childNodes</code> 返回包含指定节点的子节点的集合，该集合为即时更新的集合</li><li>返回值包含了所有的子结点，包括元素节点，文本节点等</li><li>如果只想要获得里面的元素节点，则需要专门处理。所以我们一般不提倡使用<code>childNodes</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentNode.<span class="hljs-title function_">children</span>(非标准)<br></code></pre></td></tr></table></figure><ul><li><code>parentNode.children</code> 是一个只读属性，返回所有的子元素节点</li><li>它只返回子元素节点，其余节点不返回 （<strong>这个是我们重点掌握的</strong>）</li><li>虽然 children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// DOM 提供的方法（API）获取</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> lis = ul.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">childNodes</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">childNodes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">nodeType</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">childNodes</span>[<span class="hljs-number">1</span>].<span class="hljs-property">nodeType</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ul.<span class="hljs-property">children</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="5-3-1、第一个子结点"><a href="#5-3-1、第一个子结点" class="headerlink" title="5.3.1、第一个子结点"></a>5.3.1、第一个子结点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentNode.<span class="hljs-property">firstChild</span><br></code></pre></td></tr></table></figure><ul><li><code>firstChild</code> 返回第一个子节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><h5 id="5-3-2、最后一个子结点"><a href="#5-3-2、最后一个子结点" class="headerlink" title="5.3.2、最后一个子结点"></a>5.3.2、最后一个子结点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentNode.<span class="hljs-property">lastChild</span><br></code></pre></td></tr></table></figure><ul><li><code>lastChild</code> 返回最后一个子节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ol = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ol&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">firstChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">lastChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">firstElementChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">lastElementChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);<span class="hljs-comment">//第一个子元素节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[ol.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);<span class="hljs-comment">//最后一个子元素节点</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/dde9c5a059d34c8da3641043a4ecb7df.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="5-3-3、第一个子结点-兼容性"><a href="#5-3-3、第一个子结点-兼容性" class="headerlink" title="5.3.3、第一个子结点(兼容性)"></a>5.3.3、第一个子结点(兼容性)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentNode.<span class="hljs-property">firstElementChild</span><br></code></pre></td></tr></table></figure><ul><li><code>firstElementChild</code> 返回第一个子节点，找不到则返回null</li><li>有兼容性问题，IE9以上才支持</li></ul><h5 id="5-3-4、最后一个子结点-兼容性"><a href="#5-3-4、最后一个子结点-兼容性" class="headerlink" title="5.3.4、最后一个子结点(兼容性)"></a>5.3.4、最后一个子结点(兼容性)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">parentNode.<span class="hljs-property">lastElementChild</span><br></code></pre></td></tr></table></figure><ul><li><code>lastElementChild</code> 返回最后一个子节点，找不到则返回null</li><li>有兼容性问题，IE9以上才支持</li></ul><h5 id="5-3-5、解决方案"><a href="#5-3-5、解决方案" class="headerlink" title="5.3.5、解决方案"></a>5.3.5、解决方案</h5><p>实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p><ul><li>如果想要第一个子元素节点，可以使用 <code>parentNode.chilren[0]</code></li><li>如果想要最后一个子元素节点，可以使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数组元素个数减1 就是最后一个元素的索引号</span><br>parentNode.<span class="hljs-property">chilren</span>[parentNode.<span class="hljs-property">chilren</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是li4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ol = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ol&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1.firstChild 获取第一个子结点的，包含文本结点和元素结点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">firstChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 返回的是文本结点 #text(第一个换行结点)</span></span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">lastChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 返回的是文本结点 #text(最后一个换行结点)</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. firstElementChild 返回第一个子元素结点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">firstElementChild</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &lt;li&gt;我是li1&lt;/li&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">        </span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 第2个方法有兼容性问题，需要IE9以上才支持</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3.实际开发中，既没有兼容性问题，又返回第一个子元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &lt;li&gt;我是li1&lt;/li&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[<span class="hljs-number">3</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &lt;li&gt;我是li4&lt;/li&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 当里面li个数不唯一时候，需要取到最后一个结点时这么写</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ol.<span class="hljs-property">children</span>[ol.<span class="hljs-property">children</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="5-4、兄弟节点"><a href="#5-4、兄弟节点" class="headerlink" title="5.4、兄弟节点"></a>5.4、兄弟节点</h4><h5 id="5-4-1、下一个兄弟节点"><a href="#5-4-1、下一个兄弟节点" class="headerlink" title="5.4.1、下一个兄弟节点"></a>5.4.1、下一个兄弟节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-property">nextSibling</span><br></code></pre></td></tr></table></figure><ul><li><code>nextSibling</code> 返回当前元素的下一个兄弟元素节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><h5 id="5-4-2、上一个兄弟节点"><a href="#5-4-2、上一个兄弟节点" class="headerlink" title="5.4.2、上一个兄弟节点"></a>5.4.2、上一个兄弟节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-property">previousSibling</span><br></code></pre></td></tr></table></figure><ul><li><code>previousSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><h5 id="5-4-3、下一个兄弟节点-兼容性"><a href="#5-4-3、下一个兄弟节点-兼容性" class="headerlink" title="5.4.3、下一个兄弟节点(兼容性)"></a>5.4.3、下一个兄弟节点(兼容性)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-property">nextElementSibling</span><br></code></pre></td></tr></table></figure><ul><li><code>nextElementSibling</code> 返回当前元素下一个兄弟元素节点，找不到则返回null</li><li>有兼容性问题，IE9才支持</li></ul><h5 id="5-4-4、上一个兄弟节点-兼容性"><a href="#5-4-4、上一个兄弟节点-兼容性" class="headerlink" title="5.4.4、上一个兄弟节点(兼容性)"></a>5.4.4、上一个兄弟节点(兼容性)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-property">previousElementSibling</span><br></code></pre></td></tr></table></figure><ul><li><code>previousElementSibling</code> 返回当前元素上一个兄弟元素节点，找不到则返回null</li><li>有兼容性问题，IE9才支持</li></ul><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">nextSibling</span>);<span class="hljs-comment">// #text</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">previousSibling</span>);<span class="hljs-comment">// #text</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">nextElementSibling</span>);<span class="hljs-comment">//&lt;span&gt;我是span&lt;/span&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">previousElementSibling</span>);<span class="hljs-comment">//null</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>如何解决兼容性问题 ？</strong></p><p>答：自己封装一个兼容性的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNextElementSibling</span>(<span class="hljs-params">element</span>) &#123;<br>    <span class="hljs-keyword">var</span> el = element;<br>    <span class="hljs-keyword">while</span>(el = el.<span class="hljs-property">nextSibling</span>) &#123;<br>        <span class="hljs-keyword">if</span>(el.<span class="hljs-property">nodeType</span> === <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> el;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-5、创建节点"><a href="#5-5、创建节点" class="headerlink" title="5.5、创建节点"></a>5.5、创建节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;tagName&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li><code>document.createElement()</code> 方法创建由 tagName 指定的HTML 元素</li><li>因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为<strong>动态创建元素节点</strong></li></ul><h5 id="5-5-1、添加节点"><a href="#5-5-1、添加节点" class="headerlink" title="5.5.1、添加节点"></a>5.5.1、添加节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-title function_">appendChild</span>(child)<br></code></pre></td></tr></table></figure><ul><li><code>node.appendChild()</code> 方法将一个节点添加到指定父节点的子节点列表<strong>末尾</strong>。类似于 CSS 里面的 after 伪元素。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-title function_">insertBefore</span>(child,指定元素)<br></code></pre></td></tr></table></figure><ul><li><code>node.insertBefore()</code> 方法将一个节点添加到父节点的指定子节点<strong>前面</strong>。类似于 CSS 里面的 before 伪元素。</li></ul><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 创建节点元素节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 先获取父亲ul</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        ul.<span class="hljs-title function_">appendChild</span>(li);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> lili = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;li&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        ul.<span class="hljs-title function_">insertBefore</span>(lili, ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>]);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 4. 我们想要页面添加一个新的元素分两步: 1. 创建元素 2. 添加元素</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="5-5-2、删除节点"><a href="#5-5-2、删除节点" class="headerlink" title="5.5.2、删除节点"></a>5.5.2、删除节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-title function_">removeChild</span>(child)<br></code></pre></td></tr></table></figure><ul><li><code>node.removeChild()</code>方法从 DOM 中删除一个子节点，返回删除的节点</li></ul><h5 id="5-5-3、复制节点-克隆节点"><a href="#5-5-3、复制节点-克隆节点" class="headerlink" title="5.5.3、复制节点(克隆节点)"></a>5.5.3、复制节点(克隆节点)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">node.<span class="hljs-title function_">cloneNode</span>()<br></code></pre></td></tr></table></figure><ul><li><code>node.cloneNode()</code>方法返回调用该方法的节点的一个副本。 也称为克隆节点/拷贝节点</li><li>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点</li><li>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</li></ul><p><strong>示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1111<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> lili = ul.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        ul.<span class="hljs-title function_">appendChild</span>(lili);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="5-5-4、面试题"><a href="#5-5-4、面试题" class="headerlink" title="5.5.4、面试题"></a>5.5.4、面试题</h5><p>三种动态创建元素的区别</p><ul><li>doucument.write()</li><li>element.innerHTML</li><li>document.createElement()</li></ul><p>区别：</p><ul><li><code>document.write()</code> 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘</li><li><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘</li><li><code>innerHTML</code> 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;innner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;create&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. innerHTML 创建元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> inner = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.inner&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2.1 innerHTML 用拼接字符串方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            inner.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2.2 innerHTML 用数组形式拼接</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> arr = [];</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        inner.<span class="hljs-property">innerHTML</span> = arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3.document.createElement() 创建元素</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> create = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.create&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        create.<span class="hljs-title function_">appendChild</span>(a);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><ul><li><code>createElement()</code>创建多个元素效率稍低一点点，但是结构更清晰</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">总结：不同浏览器下， innerHTML 效率要比 createElement 高<br></code></pre></td></tr></table></figure><h2 id="6、DOM核心"><a href="#6、DOM核心" class="headerlink" title="6、DOM核心"></a>6、DOM核心</h2><p>对于DOM操作，我们主要针对子元素的操作，主要有</p><ul><li>创建</li><li>增</li><li>删</li><li>改</li><li>查</li><li>属性操作</li><li>时间操作</li></ul><h4 id="6-1、创建"><a href="#6-1、创建" class="headerlink" title="6.1、创建"></a>6.1、创建</h4><ol><li>document.write</li><li>innerHTML</li><li>createElement</li></ol><h4 id="6-2、增"><a href="#6-2、增" class="headerlink" title="6.2、增"></a>6.2、增</h4><ol><li>appendChild</li><li>insertBefore</li></ol><h4 id="6-3、删"><a href="#6-3、删" class="headerlink" title="6.3、删"></a>6.3、删</h4><ol><li>removeChild</li></ol><h4 id="6-4、改"><a href="#6-4、改" class="headerlink" title="6.4、改"></a>6.4、改</h4><ul><li>主要修改dom的元素属性，dom元素的内容、属性、表单的值等</li></ul><ol><li>修改元素属性：src、href、title 等</li><li>修改普通元素内容：innerHTML、innerText</li><li>修改表单元素：value、type、disabled</li><li>修改元素样式：style、className</li></ol><h4 id="6-5、查"><a href="#6-5、查" class="headerlink" title="6.5、查"></a>6.5、查</h4><ul><li>主要获取查询dom的元素</li></ul><ol><li>DOM提供的API方法：getElementById、getElementsByTagName (古老用法，不推荐)</li><li>H5提供的新方法：querySelector、querySelectorAll (提倡)</li><li>利用节点操作获取元素：父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling) 提倡</li></ol><h4 id="6-6、属性操作"><a href="#6-6、属性操作" class="headerlink" title="6.6、属性操作"></a>6.6、属性操作</h4><ul><li>主要针对于自定义属性</li></ul><ol><li>setAttribute：设置dom的属性值</li><li>getAttribute：得到dom的属性值</li><li>removeAttribute：移除属性</li></ol><h2 id="7、事件高级"><a href="#7、事件高级" class="headerlink" title="7、事件高级"></a>7、事件高级</h2><h4 id="7-1、注册事件-绑定事件"><a href="#7-1、注册事件-绑定事件" class="headerlink" title="7.1、注册事件(绑定事件)"></a>7.1、注册事件(绑定事件)</h4><p>给元素添加事件，称为注册事件或者绑定事件。</p><p>注册事件有两种方式：传统方式和方法监听注册方式</p><table><thead><tr><th>传统注册方式</th><th>方法监听注册方式</th></tr></thead><tbody><tr><td>利用 on 开头的事件 onclick</td><td>w3c 标准推荐方式</td></tr><tr><td><code>&lt;button onclick = &quot;alert(&quot;hi&quot;)&quot;&gt;&lt;/button&gt;</code></td><td>addEventListener() 它是一个方法</td></tr><tr><td>btn.onclick = function() {}</td><td>IE9 之前的 IE 不支持此方法，可使用 attachEvent() 代替</td></tr><tr><td>特点：注册事件的唯一性</td><td>特点：同一个元素同一个事件可以注册多个监听器</td></tr><tr><td>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</td><td>按注册顺序依次执行</td></tr></tbody></table><h5 id="①addEventListener事件监听方式"><a href="#①addEventListener事件监听方式" class="headerlink" title="①addEventListener事件监听方式"></a>①addEventListener事件监听方式</h5><ul><li><code>eventTarget.addEventListener()</code>方法将指定的监听器注册到 eventTarget（目标对象）上</li><li>当该对象触发指定的事件时，就会执行事件处理函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-title function_">addEventListener</span>(type,listener[,useCapture])<br></code></pre></td></tr></table></figure><p>该方法接收三个参数：</p><ul><li><code>type</code>:事件类型字符串，比如click,mouseover,注意这里不要带on</li><li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li><li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><body>    <button>传统注册事件</button>    <button>方法监听注册事件</button>    <button>ie9 attachEvent</button><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> btns = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>    <span class="hljs-comment">// 1. 传统方式注册事件</span><br>    btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>    &#125;<br>    btns[<span class="hljs-number">0</span>].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hao a u&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 2. 事件监听注册事件 addEventListener </span><br>        <span class="hljs-comment">// (1) 里面的事件类型是字符串 所以加引号 而且不带on</span><br>        <span class="hljs-comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span><br>    btns[<span class="hljs-number">1</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">22</span>);<br>    &#125;)<br>    btns[<span class="hljs-number">1</span>].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-number">33</span>);<br>        &#125;)<br>        <span class="hljs-comment">// 3. attachEvent ie9以前的版本支持</span><br>    btns[<span class="hljs-number">2</span>].<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">11</span>);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></body><h5 id="②attachEvent事件监听方式-兼容"><a href="#②attachEvent事件监听方式-兼容" class="headerlink" title="②attachEvent事件监听方式(兼容)"></a>②attachEvent事件监听方式(兼容)</h5><ul><li><code>eventTarget.attachEvent()</code>方法将指定的监听器注册到 eventTarget（目标对象） 上</li><li>当该对象触发指定的事件时，指定的回调函数就会被执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-title function_">attachEvent</span>(eventNameWithOn,callback)<br></code></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li><code>eventNameWithOn</code>：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li><code>callback</code>： 事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h5 id="③注册事件兼容性解决方案"><a href="#③注册事件兼容性解决方案" class="headerlink" title="③注册事件兼容性解决方案"></a>③注册事件兼容性解决方案</h5><p>兼容性处理的原则：首先照顾大多数浏览器，再处理特殊浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addEventListener</span>(<span class="hljs-params">element, eventName, fn</span>) &#123;<br>     <span class="hljs-comment">// 判断当前浏览器是否支持 addEventListener 方法</span><br>     <span class="hljs-keyword">if</span> (element.<span class="hljs-property">addEventListener</span>) &#123;<br>       element.<span class="hljs-title function_">addEventListener</span>(eventName, fn);  <span class="hljs-comment">// 第三个参数 默认是false</span><br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">attachEvent</span>) &#123;<br>       element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventName, fn);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">// 相当于 element.onclick = fn;</span><br>       element[<span class="hljs-string">&#x27;on&#x27;</span> + eventName] = fn;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="7-2、删除事件-解绑事件"><a href="#7-2、删除事件-解绑事件" class="headerlink" title="7.2、删除事件(解绑事件)"></a>7.2、删除事件(解绑事件)</h4><h5 id="7-2-1、removeEventListener删除事件方式"><a href="#7-2-1、removeEventListener删除事件方式" class="headerlink" title="7.2.1、removeEventListener删除事件方式"></a>7.2.1、removeEventListener删除事件方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-title function_">removeEventListener</span>(type,listener[,useCapture]);<br></code></pre></td></tr></table></figure><p>该方法接收三个参数：</p><ul><li><code>type</code>:事件类型字符串，比如click,mouseover,注意这里不要带on</li><li><code>listener</code>：事件处理函数，事件发生时，会调用该监听函数</li><li><code>useCapture</code>：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><h5 id="7-2-2、detachEvent删除事件方式-兼容"><a href="#7-2-2、detachEvent删除事件方式-兼容" class="headerlink" title="7.2.2、detachEvent删除事件方式(兼容)"></a>7.2.2、detachEvent删除事件方式(兼容)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-title function_">detachEvent</span>(eventNameWithOn,callback);<br></code></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li><code>eventNameWithOn</code>：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li><code>callback</code>： 事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h5 id="7-2-3、传统事件删除方式"><a href="#7-2-3、传统事件删除方式" class="headerlink" title="7.2.3、传统事件删除方式"></a>7.2.3、传统事件删除方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-property">onclick</span> = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p><strong>事件删除示例</strong>：</p><body>    <div>1</div>    <div>2</div>    <div>3</div>    <script>        var divs = document.querySelectorAll('div');        divs[0].onclick = function() {            alert(11);            // 1. 传统方式删除事件            divs[0].onclick = null;        }        // 2.removeEventListener 删除事件        divs[1].addEventListener('click',fn);   //里面的fn不需要调用加小括号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">22</span>);<br>        divs[<span class="hljs-number">1</span>].<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn);<br>    &#125;<br>    <span class="hljs-comment">// 3.IE9 中的删除事件方式</span><br>    divs[<span class="hljs-number">2</span>].<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>,fn1);<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">33</span>);<br>        divs[<span class="hljs-number">2</span>].<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>,fn1);<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></body><h5 id="7-2-4、删除事件兼容性解决方案"><a href="#7-2-4、删除事件兼容性解决方案" class="headerlink" title="7.2.4、删除事件兼容性解决方案"></a>7.2.4、删除事件兼容性解决方案</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeEventListener</span>(<span class="hljs-params">element, eventName, fn</span>) &#123;<br>     <span class="hljs-comment">// 判断当前浏览器是否支持 removeEventListener 方法</span><br>     <span class="hljs-keyword">if</span> (element.<span class="hljs-property">removeEventListener</span>) &#123;<br>       element.<span class="hljs-title function_">removeEventListener</span>(eventName, fn);  <span class="hljs-comment">// 第三个参数 默认是false</span><br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">detachEvent</span>) &#123;<br>       element.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventName, fn);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>       element[<span class="hljs-string">&#x27;on&#x27;</span> + eventName] = <span class="hljs-literal">null</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="7-3、DOM事件流（冒泡）"><a href="#7-3、DOM事件流（冒泡）" class="headerlink" title="7.3、DOM事件流（冒泡）"></a>7.3、DOM事件流（冒泡）</h4><ul><li>事件流描述的是从页面中接收事件的顺序</li><li>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流</li></ul><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/063297f2336f43dfb246930ae877a9ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><ul><li>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。</li><li>事件捕获： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。</li></ul><p><strong>加深理解</strong>：</p><p>我们向水里面扔一块石头，首先它会有一个下降的过程，这个过程就可以理解为从最顶层向事件发生的最具体元素（目标点）的捕获过程；之后会产生泡泡，会在最低点（ 最具体元素）之后漂浮到水面上，这个过程相当于事件冒泡。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/51f0146f0e334813b35d9b7075382a33.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h5 id="7-3-1、捕获阶段"><a href="#7-3-1、捕获阶段" class="headerlink" title="7.3.1、捕获阶段"></a>7.3.1、捕获阶段</h5><ul><li>document -&gt; html -&gt; body -&gt; father -&gt; son</li></ul><p>两个盒子嵌套，一个父盒子一个子盒子，我们的需求是当点击父盒子时弹出 father ，当点击子盒子时弹出 son</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>son盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// dom 事件流 三个阶段</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. JS 代码中只能执行捕获或者冒泡其中的一个阶段。</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. onclick 和 attachEvent（ie） 只能得到冒泡阶段。</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -&gt; html -&gt; body -&gt; father -&gt; son</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">             <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;son&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;father&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>但是因为DOM流的影响，我们点击子盒子，会先弹出 father，之后再弹出 son</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/65d6a7c8038f414fbf03c3ac4d2ce293.gif#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>这是因为捕获阶段由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收</p><ul><li>document -&gt; html -&gt; body -&gt; father -&gt; son</li><li>先看 document 的事件，没有；再看 html 的事件，没有；再看 body 的事件，没有；再看 father 的事件，有就先执行；再看 son 的事件，再执行。</li></ul><h5 id="7-3-2、冒泡阶段"><a href="#7-3-2、冒泡阶段" class="headerlink" title="7.3.2、冒泡阶段"></a>7.3.2、冒泡阶段</h5><ul><li>son -&gt; father -&gt;body -&gt; html -&gt; document</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>son盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 4. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -&gt; father -&gt;body -&gt; html -&gt; document</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;son&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;father&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;document&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>我们点击子盒子，会弹出 son、father、document</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/9ab4190f50d14c7aa879789476a394e9.gif#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>这是因为冒泡阶段开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p><ul><li>son -&gt; father -&gt;body -&gt; html -&gt; document</li></ul><h5 id="7-3-3、小结"><a href="#7-3-3、小结" class="headerlink" title="7.3.3、小结"></a>7.3.3、小结</h5><ul><li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段</p></li><li><p>onclick 和 attachEvent只能得到冒泡阶段</p></li><li><p>addEventListener(type,listener[,useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false (不写默认就是false),表示在事件冒泡阶段调用事件处理程序</p></li><li><p>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</p></li><li><p>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</p></li></ul><h4 id="7-4、事件对象"><a href="#7-4、事件对象" class="headerlink" title="7.4、事件对象"></a>7.4、事件对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">eventTarget.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>   <span class="hljs-comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span><br>&#125; <br>eventTarget.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>   <span class="hljs-comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt  </span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>官方解释：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态</li><li>简单理解：</li><li>​    事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面</li><li>​     这个对象就是事件对象 event，它有很多属性和方法，比如“</li><li>​            谁绑定了这个事件</li><li>​            鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置</li><li>​            键盘触发事件的话，会得到键盘的相关信息，如按了哪个键</li><li>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去</li><li>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 事件对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// console.log(e);</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// console.log(window.event);</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// e = e || window.event;</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. event 就是一个事件对象 写到我们侦听函数的 小括号里面 当形参来看</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 事件对象 是 我们事件的一系列相关数据的集合 跟事件相关的 比如鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息 比如 判断用户按下了那个键</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 4. 这个事件对象我们可以自己命名 比如 event 、 evt、 e</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 5. 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="7-4-1、事件对象的兼容性方案"><a href="#7-4-1、事件对象的兼容性方案" class="headerlink" title="7.4.1、事件对象的兼容性方案"></a>7.4.1、事件对象的兼容性方案</h5><p>事件对象本身的获取存在兼容问题：</p><ol><li>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</li><li>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找</li></ol><p>解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br></code></pre></td></tr></table></figure><h5 id="7-4-2、事件对象的常见属性和方法"><a href="#7-4-2、事件对象的常见属性和方法" class="headerlink" title="7.4.2、事件对象的常见属性和方法"></a>7.4.2、事件对象的常见属性和方法</h5><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象 标准</td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象 非标准 ie6-8使用</td></tr><tr><td>e.type</td><td>返回事件的类型 比如<code>click</code> <code>mouseover</code> 不带on</td></tr><tr><td>e.cancelBubble</td><td>该属性阻止冒泡，非标准，ie6-8使用</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认行为 非标准，ie6-8使用</td></tr><tr><td>e.preventDefault()</td><td>该方法阻止默认行为 标准 比如不让链接跳转</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡 标准</td></tr></tbody></table><p>e.target 和 this 的区别：</p><ul><li>this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</li><li>e.target 是事件触发的元素。</li></ul><h4 id="7-5、事件对象阻止默认行为"><a href="#7-5、事件对象阻止默认行为" class="headerlink" title="7.5、事件对象阻止默认行为"></a>7.5、事件对象阻止默认行为</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 常见事件对象的属性和方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 返回事件类型</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseover&#x27;</span>, fn);</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseout&#x27;</span>, fn);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">type</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;a&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        a.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">//  dom 标准写法</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 3. 传统的注册方式</span></span></span><br><span class="language-javascript"><span class="language-xml">        a.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 普通浏览器 e.preventDefault();  方法</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// e.preventDefault();</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// e.returnValue;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-number">11</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="7-6、阻止事件冒泡"><a href="#7-6、阻止事件冒泡" class="headerlink" title="7.6、阻止事件冒泡"></a>7.6、阻止事件冒泡</h4><p>事件冒泡：开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处，需要我们灵活掌握。</p><ul><li>标准写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">e.<span class="hljs-title function_">stopPropagation</span>();<br></code></pre></td></tr></table></figure><ul><li>非标准写法： IE6-8 利用对象事件 cancelBubble属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">e.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span>son儿子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 常见事件对象的属性和方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 阻止冒泡  dom 推荐的标准 stopPropagation() </span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> son = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.son&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        son.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;son&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            e.<span class="hljs-title function_">stopPropagation</span>(); <span class="hljs-comment">// stop 停止  Propagation 传播</span></span></span><br><span class="language-javascript"><span class="language-xml">            e.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 非标准 cancel 取消 bubble 泡泡</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.father&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        father.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;father&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-literal">false</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;document&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="7-6-1、阻止事件冒泡的兼容性解决方案"><a href="#7-6-1、阻止事件冒泡的兼容性解决方案" class="headerlink" title="7.6.1、阻止事件冒泡的兼容性解决方案"></a>7.6.1、阻止事件冒泡的兼容性解决方案</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(e &amp;&amp; e.<span class="hljs-property">stopPropagation</span>)&#123;<br>      e.<span class="hljs-title function_">stopPropagation</span>();<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="4-4-4-e-target-与-this"><a href="#4-4-4-e-target-与-this" class="headerlink" title="4.4.4 e.target 与 this"></a>4.4.4 e.target 与 this</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">e.<span class="hljs-property">target</span> 与 <span class="hljs-variable language_">this</span> 的区别<br></code></pre></td></tr></table></figure><ul><li><code>this</code>是事件绑定的元素，这个函数的调用者(绑定这个事件的元素)</li><li><code>e.target</code>是事件触发的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>abc<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 常见事件对象的属性和方法</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. e.target 返回的是触发事件的对象（元素）  this 返回的是绑定事件的对象（元素）</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 区别 ： e.target 点击了那个元素，就返回那个元素 this 那个元素绑定了这个点击事件，那么就返回谁</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">currentTarget</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-comment">// e.target 指向我们点击的那个对象 谁触发了这个事件 我们点击的是li e.target 指向的就是li</span></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 了解兼容性</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// div.onclick = function(e) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     e = e || window.event;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     var target = e.target || e.srcElement;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//     console.log(target);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 了解 跟 this 有个非常相似的属性 currentTarget  ie678不认识</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="4-4-5-事件对象的兼容性"><a href="#4-4-5-事件对象的兼容性" class="headerlink" title="4.4.5 事件对象的兼容性"></a>4.4.5 事件对象的兼容性</h5><p>事件对象本身的获取存在兼容问题：</p><ul><li>标准浏览器中浏览器是给方法传递的参数，只需定义形参e就可以获取到</li><li>在 IE6 -&gt; 8 中，浏览器不会给方法传递参数，如果需要的话，需要到<code>window.event</code>中获取查找</li></ul><p><strong>解决方案：</strong></p><ul><li><code>e = e || window.event</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;script&gt;<br>        <span class="hljs-comment">// 事件对象</span><br>        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>        div.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>                <span class="hljs-comment">// e = e || window.event;</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br><span class="hljs-comment">// 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span><br><br>            &#125;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="7-7、事件委托"><a href="#7-7、事件委托" class="headerlink" title="7.7、事件委托"></a>7.7、事件委托</h4><ul><li>事件委托也称为事件代理，在 jQuery 里面称为事件委派</li><li>事件委托的原理<ul><li><strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</strong></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        ul.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// e.target 这个可以得到我们点击的对象</span></span></span><br><span class="language-javascript"><span class="language-xml">            e.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 点了谁，就让谁的style里面的backgroundColor颜色变为pink</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>以上案例：给 ul 注册点击事件，然后利用事件对象的 target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上， ul 有注册事件，就会触发事件监听器。</p><h4 id="7-8、常见的鼠标事件"><a href="#7-8、常见的鼠标事件" class="headerlink" title="7.8、常见的鼠标事件"></a>7.8、常见的鼠标事件</h4><table><thead><tr><th>鼠标事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h5 id="7-8-1、禁止鼠标右键与鼠标选中"><a href="#7-8-1、禁止鼠标右键与鼠标选中" class="headerlink" title="7.8.1、禁止鼠标右键与鼠标选中"></a>7.8.1、禁止鼠标右键与鼠标选中</h5><ul><li><code>contextmenu</code>主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li><li><code>selectstart</code> 禁止鼠标选中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是一段不愿意分享的文字<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. contextmenu 我们可以禁用右键菜单</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;contextmenu&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// 阻止默认行为</span></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. 禁止选中文字 selectstart</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;selectstart&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            e.<span class="hljs-title function_">preventDefault</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="7-9、常用的键盘事件"><a href="#7-9、常用的键盘事件" class="headerlink" title="7.9、常用的键盘事件"></a>7.9、常用的键盘事件</h4><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发，但是它不识别功能键，比如 ctrl shift 箭头等</td></tr></tbody></table><ul><li><strong>如果使用addEventListener 不需要加 on</strong></li><li><code>onkeypress</code> 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等</li><li>三个事件的执行顺序是： keydown – keypress — keyup</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 常用的键盘事件</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//1. keyup 按键弹起的时候触发 </span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// document.onkeyup = function() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//         console.log(&#x27;我弹起了&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我弹起了&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//3. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我按下了press&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">//2. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我按下了down&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h5 id="7-9-1、键盘对象属性"><a href="#7-9-1、键盘对象属性" class="headerlink" title="7.9.1、键盘对象属性"></a>7.9.1、键盘对象属性</h5><table><thead><tr><th>键盘事件对象 <strong>属性</strong></th><th>说明</th></tr></thead><tbody><tr><td>keyCode</td><td>返回该<strong>键</strong>值的ASCII值</td></tr></tbody></table><ul><li><code>onkeydown</code>和 <code>onkeyup</code> 不区分字母大小写，<code>onkeypress</code> 区分字母大小写。</li><li>在我们实际开发中，我们更多的使用keydown和keyup， 它能识别所有的键（包括功能键）</li><li><code>Keypress</code> 不识别功能键，但是<code>keyCode</code>属性能区分大小写，返回不同的ASCII值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 我们的keyup 和keydown事件不区分字母大小写  a 和 A 得到的都是65</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 我们的keypress 事件 区分字母大小写  a  97 和 A 得到的是65</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;up:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 我们可以利用keycode返回的ASCII码值来判断用户按下了那个键</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> === <span class="hljs-number">65</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您按下的a键&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您没有按下a键&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keypress&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;press:&#x27;</span> + e.<span class="hljs-property">keyCode</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure></script></body>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
          <category> DOM与BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM(API) </tag>
            
            <tag> Web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Java Script の BOM(API)”</title>
      <link href="/2021/12/22/Java%20Script%20BOM%20%20(API)/"/>
      <url>/2021/12/22/Java%20Script%20BOM%20%20(API)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（BOM概述、window对象的常用事件、定时器、JS执行机制、location对象、navigator对象、history对象）</p><span id="more"></span><h1 id="Java-Script-の-BOM-API"><a href="#Java-Script-の-BOM-API" class="headerlink" title="Java Script の BOM  (API)"></a>Java Script の BOM  (API)</h1><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/0f44250c831e4579aa3599072c855aeb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70" alt="思维导图" class="lazyload"></p><h2 id="1、BOM概述"><a href="#1、BOM概述" class="headerlink" title="1、BOM概述"></a>1、BOM概述</h2><ul><li>BOM = Browser Object Model 浏览器对象模型</li><li>它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</li><li>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li><li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA, DOM 的标准化组织是 W3C, BOM最初是Netscape 浏览器标准的一部分</li></ul><table><thead><tr><th>DOM</th><th>BOM</th></tr></thead><tbody><tr><td>文档对象模型</td><td>浏览器对象模型</td></tr><tr><td>DOM 就是把 文档 当作一个对象来看待</td><td>把 浏览器当作一个对象来看待</td></tr><tr><td>DOM 的顶级对象是 document</td><td>BOM 的顶级对象是 window</td></tr><tr><td>DOM 主要学习的是操作页面元素</td><td>BOM 学习的是浏览器窗口交互的一些对象</td></tr><tr><td>DOM 是 W3C 标准规范</td><td>BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</td></tr></tbody></table><h4 id="1-1、BOM的构成"><a href="#1-1、BOM的构成" class="headerlink" title="1.1、BOM的构成"></a>1.1、BOM的构成</h4><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/5c83bf307ec9486687a5f52312943ecb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><ul><li><p>BOM 比 DOM 更大。它包含 DOM。</p></li><li><p>window 对象是浏览器的顶级对象，它具有双重角色</p></li><li><p>它是 JS 访问浏览器窗口的一个接口</p></li><li><p>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法</p></li><li><p>在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt()等。</p></li><li><p>注意：window下的一个特殊属性 window.name</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义在全局作用域中的变量会变成window对象的属性</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">num</span>);<br><span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// 定义在全局作用域中的函数会变成window对象的方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">fn</span>();<br><span class="hljs-comment">// 11</span><br><br><span class="hljs-keyword">var</span> name = <span class="hljs-number">10</span>;  <span class="hljs-comment">//不要用这个name变量,window下有一个特殊属性window.name</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">num</span>);<br></code></pre></td></tr></table></figure><h2 id="2、window-对象的常见事件"><a href="#2、window-对象的常见事件" class="headerlink" title="2、window 对象的常见事件"></a>2、window 对象的常见事件</h2><h4 id="2-1、窗口加载事件"><a href="#2-1、窗口加载事件" class="headerlink" title="2.1、窗口加载事件"></a>2.1、窗口加载事件</h4><p><code>window.onload</code>是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件（包括图像，脚本文件，CSS文件等），就调用的处理函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;;<br><span class="hljs-comment">// 或者</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><p>有了window.onload就可以把JS代码写到页面元素的上方</p></li><li><p>因为onload是等页面内容全部加载完毕，再去执行处理函数</p></li><li><p>window.onload 传统注册事件方式，只能写一次</p></li><li><p>如果有多个，会以最后一个window.onload为准</p></li><li><p>如果使用addEventListener 则没有限制</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;)<br></code></pre></td></tr></table></figure><p><strong>接收两个参数：</strong></p><ul><li>DOMCountentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等</li><li>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间</li><li>交互效果就不能实现，必然影响用户的体验，此时用 <code>DOMContentLoaded</code>事件比较合适。</li></ul><h5 id="2-1-1、区别"><a href="#2-1-1、区别" class="headerlink" title="2.1.1、区别"></a>2.1.1、区别</h5><ul><li><code>load</code>等页面内容全部加载完毕，包括页面dom元素，图片，flash，css等</li><li><code>DOMContentLoaded</code> 是DOM加载完毕，不包含图片 flash css 等就可以执行，加载速度比load更快一些</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// window.onload = function() &#123;</span><br>    <span class="hljs-comment">//     var btn = document.querySelector(&#x27;button&#x27;);</span><br>    <span class="hljs-comment">//     btn.addEventListener(&#x27;click&#x27;, function() &#123;</span><br>    <span class="hljs-comment">//         alert(&#x27;点击我&#x27;);</span><br>    <span class="hljs-comment">//     &#125;)</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// window.onload = function() &#123;</span><br>    <span class="hljs-comment">//     alert(22);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;点击我&#x27;</span>);<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-number">22</span>);<br>    &#125;)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-number">33</span>);<br>        &#125;)<br>        <span class="hljs-comment">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span><br>        <span class="hljs-comment">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="2-2、调整窗口大小事件"><a href="#2-2、调整窗口大小事件" class="headerlink" title="2.2、调整窗口大小事件"></a>2.2、调整窗口大小事件</h4><p><code>window.onresize</code> 是调整窗口大小加载事件，当触发时就调用的处理函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-comment">// 或者</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;);<br></code></pre></td></tr></table></figure><ul><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>我们经常利用这个事件完成响应式布局。<code>window.innerWidth</code> 当前屏幕的宽度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;变化了&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> &lt;= <span class="hljs-number">800</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                    div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;block&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="3、定时器"><a href="#3、定时器" class="headerlink" title="3、定时器"></a>3、定时器</h2><p>window 对象给我们提供了两个定时器</p><ul><li><code>setTimeout()</code></li><li><code>setInterval()</code></li></ul><h4 id="3-1、setTimeout-定时器"><a href="#3-1、setTimeout-定时器" class="headerlink" title="3.1、setTimeout()定时器"></a>3.1、setTimeout()定时器</h4><p><code>setTimeout()</code>方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(调用函数,[延迟的毫秒数]);<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><p>这个调用函数</p><p>​    <strong>可以直接写函数</strong></p><p>​    <strong>或者写函数名</strong></p><p>​    或者采取字符串 ‘函数名()’ （不推荐）</p></li><li><p>延迟的毫秒数省略默认是0，如果写，必须是毫秒</p></li><li><p>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</p></li><li><p>setTimeout() 这个调用函数我们也称为回调函数 callback</p></li><li><p>普通函数是按照代码顺序直接调用，而这个函数，需要等待事件，事件到了才会去调用这个函数，因此称为回调函数。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. setTimeout </span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 这个window在调用的时候可以省略</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// setTimeout(function() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     console.log(&#x27;时间到了&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &#125;, 2000);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">callback</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> timer1 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">3000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> timer2 = <span class="hljs-built_in">setTimeout</span>(callback, <span class="hljs-number">5000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// setTimeout(&#x27;callback()&#x27;, 3000); // 我们不提倡这个写法</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="3-2、clearTimeout-停止定时器"><a href="#3-2、clearTimeout-停止定时器" class="headerlink" title="3.2、clearTimeout()停止定时器"></a>3.2、clearTimeout()停止定时器</h4><ul><li><code>clearTimeout()</code>方法取消了先前通过调用 <code>setTimeout()</code>建立的定时器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearTimeout</span>(timeoutID)<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>window</code>可以省略</li><li>里面的参数就是定时器的标识符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击停止定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-number">5000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-built_in">clearTimeout</span>(timer);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="3-3、setInterval-定时器"><a href="#3-3、setInterval-定时器" class="headerlink" title="3.3、setInterval()定时器"></a>3.3、setInterval()定时器</h4><ul><li><code>setInterval()</code>方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(回调函数,[间隔的毫秒数]);<br></code></pre></td></tr></table></figure><ul><li><code>window</code>可以省略</li><li>这个回调函数:<ul><li>可以直接写函数</li><li>或者写函数名</li><li>或者采取字符 ‘函数名()’</li></ul></li><li>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. setInterval </span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 语法规范：  window.setInterval(调用函数, 延时时间);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;继续输出&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. setTimeout  延时时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3. setInterval  每隔这个延时时间，就去调用这个回调函数，会调用很多次，重复调用这个函数</span></span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="3-4、clearInterval-停止定时器"><a href="#3-4、clearInterval-停止定时器" class="headerlink" title="3.4、clearInterval()停止定时器"></a>3.4、clearInterval()停止定时器</h4><ul><li><code>clearInterval ( )</code> 方法取消了先前通过调用 <code>setInterval()</code> 建立的定时器</li></ul><p><strong>注意</strong>：</p><ul><li><code>window</code>可以省略</li><li>里面的参数就是定时器的标识符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;begin&quot;</span>&gt;</span>开启定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;stop&quot;</span>&gt;</span>停止定时器<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> begin = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.begin&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> stop = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.stop&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 全局变量  null是一个空对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        begin.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ni hao ma&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;, <span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">        stop.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-built_in">clearInterval</span>(timer);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="3-5、this指向"><a href="#3-5、this指向" class="headerlink" title="3.5、this指向"></a>3.5、this指向</h4><ul><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁<br>现阶段，我们先了解一下几个this指向</li><li>全局作用域或者普通函数中this指向全局对象window(注意定时器里面的this指向window)</li><li>方法调用中谁调用this指向谁</li><li>构造函数中this指向构造函数实例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">fn</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 方法调用中谁调用this指向谁</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> o = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">sayHi</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向的是 o 这个对象</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        o.<span class="hljs-title function_">sayHi</span>();</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// btn.onclick = function() &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//     console.log(this); // this指向的是btn这个按钮对象</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this指向的是btn这个按钮对象</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 3. 构造函数中this指向构造函数的实例</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">Fun</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this 指向的是fun 实例对象</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h2 id="4、JS执行机制"><a href="#4、JS执行机制" class="headerlink" title="4、JS执行机制"></a>4、JS执行机制</h2><h4 id="4-1、JS是单线程"><a href="#4-1、JS是单线程" class="headerlink" title="4.1、JS是单线程"></a>4.1、JS是单线程</h4><ul><li>JavaScript 语言的一大特点就是<strong>单线程</strong>，也就是说，<strong>同一个时间只能做一件事</strong>。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</li><li>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</li></ul><h4 id="4-2、一个问题"><a href="#4-2、一个问题" class="headerlink" title="4.2、一个问题"></a>4.2、一个问题</h4><p>以下代码执行的结果是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>那么以下代码执行的结果又是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h4 id="4-3、同步和异步"><a href="#4-3、同步和异步" class="headerlink" title="4.3、同步和异步"></a>4.3、同步和异步</h4><ul><li>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程</li><li>于是，JS 中出现了<strong>同步和异步</strong>。</li><li><strong>同步：前一个任务结束后再执行后一个任务</strong></li><li><strong>异步：在做这件事的同时，你还可以去处理其他事情</strong></li></ul><p>同步任务：</p><ul><li>同步任务都在主线程上执行，形成一个 执行栈</li></ul><p>异步任务：</p><ul><li>JS中的异步是通过回调函数实现的</li><li>异步任务有以下三种类型<ul><li>普通事件，如<code>click</code>,<code>resize</code>等</li><li>资源加载，如<code>load</code>,<code>error</code>等</li><li>定时器，包括<code>setInterval</code>,<code>setTimeout</code>等</li></ul></li><li>异步任务相关回调函数添加到任务队列中</li></ul><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/f0cc815b48574ce2bb068501a9394a5e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"><ol><li>先执行执行栈中的同步任务</li><li>异步任务(回调函数)放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/d337ebf7ba2c40c7a768fd91f6bfbf56.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>此时再来看我们刚才的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><ul><li>执行的结果和顺序为 1、2、3</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>&#125;,<span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><ul><li>执行的结果和顺序为 1、2、3</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 3. 第三个问题</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click&#x27;</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/eaabe7880146428fb68e6e64f23db40c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>同步任务放在执行栈中执行，异步任务由异步进程处理放到任务队列中，执行栈中的任务执行完毕会去任务队列中查看是否有异步任务执行，由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）。</p><h2 id="5、location对象（解析url）"><a href="#5、location对象（解析url）" class="headerlink" title="5、location对象（解析url）"></a>5、location对象（解析url）</h2><ul><li>window 对象给我们提供了一个 <code>location</code>属性用于获取或者设置窗体的url，并且可以解析url。因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</li></ul><h4 id="5-1、url"><a href="#5-1、url" class="headerlink" title="5.1、url"></a>5.1、url</h4><p>==统一资源定位符（uniform resouce locator）==是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><p><strong>url 的一般语法格式为：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">protocol</span>:<span class="hljs-comment">//host[:port]/path/[?query]#fragment</span><br><span class="hljs-attr">http</span>:<span class="hljs-comment">//www.itcast.cn/index.html?name=andy&amp;age=18#link</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议 常用的http,ftp,maito等</td></tr><tr><td>host</td><td>主机(域名) <a href="http://www.itheima.com/">www.itheima.com</a></td></tr><tr><td>port</td><td>端口号，可选</td></tr><tr><td>path</td><td>路径 由零或多个<code>&#39;/&#39;</code>符号隔开的字符串</td></tr><tr><td>query</td><td>参数 以键值对的形式，通过<code>&amp;</code>符号分隔开来</td></tr><tr><td>fragment</td><td>片段 <code>#</code>后面内容 常见于链接 锚点</td></tr></tbody></table><h4 id="5-2、location对象属性"><a href="#5-2、location对象属性" class="headerlink" title="5.2、location对象属性"></a>5.2、location对象属性</h4><table><thead><tr><th><strong>location对象属性</strong></th><th><strong>返回值</strong></th></tr></thead><tbody><tr><td><strong>location.href</strong></td><td><strong>获取或者设置整个URL</strong></td></tr><tr><td>location.host</td><td>返回主机（域名）<a href="http://www.baidu.com/">www.baidu.com</a></td></tr><tr><td>location.port</td><td>返回端口号，如果未写返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td><strong>location.search</strong></td><td><strong>返回参数</strong></td></tr><tr><td>location.hash</td><td>返回片段 #后面内容常见于链接 锚点</td></tr></tbody></table><p><strong>重点记住： <code>href</code>和<code>search</code></strong></p><p><strong>需求：5s之后跳转页面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> timer = <span class="hljs-number">5</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">if</span> (timer == <span class="hljs-number">0</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;您将在&#x27;</span> + timer + <span class="hljs-string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">                timer--;</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;, <span class="hljs-number">1000</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="5-3、location对象方法"><a href="#5-3、location对象方法" class="headerlink" title="5.3、location对象方法"></a>5.3、location对象方法</h4><table><thead><tr><th>location对象方法</th><th>返回值</th></tr></thead><tbody><tr><td><strong>location.assign()</strong></td><td><strong>跟href一样，可以跳转页面（也称为重定向页面）</strong></td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者 f5 ，如果参数为true 强制刷新 ctrl+f5</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 记录浏览历史，所以可以实现后退功能</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 不记录浏览历史，所以不可以实现后退功能</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml">            location.<span class="hljs-title function_">reload</span>(<span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h4 id="5-4、获取URL参数"><a href="#5-4、获取URL参数" class="headerlink" title="5.4、获取URL参数"></a>5.4、获取URL参数</h4><p>我们简单写一个登录框，点击登录跳转到 index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span></span><br><span class="language-xml">        用户名： <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uname&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>接下来我们写 index.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(location.<span class="hljs-property">search</span>); <span class="hljs-comment">// ?uname=andy</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 1.先去掉？  substr(&#x27;起始的位置&#x27;，截取几个字符);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> params = location.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// uname=andy</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(params);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 2. 利用=把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> arr = params.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr); <span class="hljs-comment">// [&quot;uname&quot;, &quot;ANDY&quot;]</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 3.把数据写入div中</span></span></span><br><span class="language-javascript"><span class="language-xml">        div.<span class="hljs-property">innerHTML</span> = arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;欢迎您&#x27;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>这样我们就能获取到路径上的URL参数</p><h2 id="6、navigator对象（判断PC还是移动端）"><a href="#6、navigator对象（判断PC还是移动端）" class="headerlink" title="6、navigator对象（判断PC还是移动端）"></a>6、navigator对象（判断PC还是移动端）</h2><ul><li>navigator 对象包含有关浏览器的信息，它有很多属性</li><li>我们常用的是<code>userAgent</code>,该属性可以返回由客户机发送服务器的<code>user-agent</code>头部的值</li></ul><p><strong>下面前端代码可以判断用户是用哪个终端打开页面的，如果是用 PC 打开的，我们就跳转到 PC 端的页面，如果是用手机打开的，就跳转到手机端页面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>((navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;&quot;</span>;     <span class="hljs-comment">//手机</span><br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;&quot;</span>;     <span class="hljs-comment">//电脑</span><br> &#125;<br></code></pre></td></tr></table></figure><h2 id="7、history对象（浏览器历史前进与后退）"><a href="#7、history对象（浏览器历史前进与后退）" class="headerlink" title="7、history对象（浏览器历史前进与后退）"></a>7、history对象（浏览器历史前进与后退）</h2><ul><li>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互</li><li>该对象包含用户（在浏览器窗口中）访问过的 URL。</li></ul><table><thead><tr><th>history对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能，参数如果是 1 前进1个页面 如果是 -1 后退1个页面</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;list.html&quot;</span>&gt;</span>点击我去往列表页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>前进<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// history.forward();</span></span></span><br><span class="language-javascript"><span class="language-xml">            history.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS基础 </category>
          
          <category> DOM与BOM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> BOM(API) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“flex布局”</title>
      <link href="/2021/11/11/%E7%A7%BB%E5%8A%A8%E7%AB%AFflex%E5%B8%83%E5%B1%80/"/>
      <url>/2021/11/11/%E7%A7%BB%E5%8A%A8%E7%AB%AFflex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h4><p>　　Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p><span id="more"></span><h1 id="移动端Web开发（flex布局）"><a href="#移动端Web开发（flex布局）" class="headerlink" title="移动端Web开发（flex布局）"></a>移动端Web开发（flex布局）</h1><p>✍目录总览：移动Web开发、移动端常见布局【流式布局、flex布局（概念、容器、项目）】</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/8e8b3eac2911466bab74be296971a145.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA55Sf5ZG95piv5pyJ5YWJ55qE,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="思维导图" class="lazyload"></p><p>移动端最常用的两种布局：<strong>流式布局（百分比布局)</strong>  和 ==<strong>flex布局</strong>==</p><p><strong>流式布局（百分比布局)</strong></p><ul><li>流式布局，就是百分比布局，也称非固定像素布局。</li><li>通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。</li></ul><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="==flex布局=="></a>==<strong>flex布局</strong>==</h2><h2 id="一、Flex布局是什么？"><a href="#一、Flex布局是什么？" class="headerlink" title="一、Flex布局是什么？"></a>一、Flex布局是什么？</h2><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为Flex布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><p>行内元素也可以使用Flex布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: inline-flex;<br>&#125;<br></code></pre></td></tr></table></figure><p>Webkit内核的浏览器，必须加上-webkit前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>  <span class="hljs-attribute">display</span>: -webkit-flex; <span class="hljs-comment">/* Safari */</span><br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://www.runoob.com/wp-content/uploads/2015/07/3791e575c48b3698be6a94ae1dbff79d.png" alt="img" class="lazyload"></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h2 id="三、容器的属性（掌握）"><a href="#三、容器的属性（掌握）" class="headerlink" title="三、容器的属性（掌握）"></a>三、容器的属性（掌握）</h2><p>以下6个属性设置在容器上。</p><blockquote><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></blockquote><h3 id="3-1-flex-direction属性（重点）"><a href="#3-1-flex-direction属性（重点）" class="headerlink" title="3.1 flex-direction属性（重点）"></a>3.1 flex-direction属性（重点）</h3><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">flex-direction</span>: row | row-reverse | column | column-reverse;<br>&#125;<br></code></pre></td></tr></table></figure><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://www.runoob.com/wp-content/uploads/2015/07/0cbe5f8268121114e87d0546e53cda6e.png" alt="img" class="lazyload"></p><p>它可能有4个值。</p><p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。<br>3.2 flex-wrap属性</p><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p><p> <img data-fancybox="gallery" data-sizes="auto" data-src="https://www.runoob.com/wp-content/uploads/2015/07/903d5b7df55779c03f2687a7d4d6bcea.png" alt="img" class="lazyload"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.box&#123;<br>  flex-wrap: nowrap | wrap | wrap-reverse;<br>&#125;<br></code></pre></td></tr></table></figure><p>它可能取三个值。</p><p>（1）nowrap（默认）：不换行。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/9da1f23965756568b4c6ea7124db7b9a.png" alt="img" class="lazyload"></p><p>（2）wrap：换行，第一行在上方。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/3c6b3c8b8fe5e26bca6fb57538cf72d9.jpg" alt="img" class="lazyload"></p><p>（3）wrap-reverse：换行，第一行在下方。</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/fb4cf2bab8b6b744b64f6d7a99cd577c.jpg" alt="img" class="lazyload"></p><h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-justify-content属性（重点）"><a href="#3-4-justify-content属性（重点）" class="headerlink" title="3.4 justify-content属性（重点）"></a>3.4 justify-content属性（重点）</h3><p>justify-content属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/c55dfe8e3422458b50e985552ef13ba5.png" alt="img" class="lazyload"></p><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><blockquote><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul></blockquote><h3 id="3-5-align-items属性（重点）"><a href="#3-5-align-items属性（重点）" class="headerlink" title="3.5 align-items属性（重点）"></a>3.5 align-items属性（重点）</h3><p>align-items属性定义项目在交叉轴上如何对齐。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/2b0c39c7e7a80d5a784c8c2ca63cde17.png" alt="img" class="lazyload"></p><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><blockquote><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li><strong>center：交叉轴的中点对齐。</strong></li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul></blockquote><h3 id="3-6-align-content属性（重点）"><a href="#3-6-align-content属性（重点）" class="headerlink" title="3.6 align-content属性（重点）"></a>3.6 align-content属性（重点）</h3><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/f10918ccb8a13247c9d47715a2bd2c33.png" alt="img" class="lazyload"></p><p>该属性可能取6个值。</p><blockquote><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul></blockquote><h2 id="四、项目的属性（熟悉）"><a href="#四、项目的属性（熟悉）" class="headerlink" title="四、项目的属性（熟悉）"></a>四、项目的属性（熟悉）</h2><p>以下6个属性设置在项目上。</p><blockquote><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul></blockquote><h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.item &#123;<br>  order: &lt;integer&gt;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/59e399c72daafcfcc20ede36bf32f266.png" alt="img" class="lazyload"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.item &#123;<br>  flex-grow: &lt;number&gt;; /* default 0 */<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/f41c08bb35962ed79e7686f735d6cd78.png" alt="img" class="lazyload"></p><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.item &#123;<br>  flex-shrink: &lt;number&gt;; /* default 1 */<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/240d3e960043a729bb3ff5e34987904f.jpg" alt="img" class="lazyload"></p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.item &#123;<br>  flex-basis: &lt;length&gt; | auto; /* default auto */<br>&#125;<br></code></pre></td></tr></table></figure><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">flex</span>: none | [ &lt;<span class="hljs-string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="hljs-string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="hljs-string">&#x27;flex-basis&#x27;</span>&gt; ]<br>&#125;<br></code></pre></td></tr></table></figure><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-selector-class">.item</span> &#123;<br>  <span class="hljs-attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;<br>&#125;<br></code></pre></td></tr></table></figure><p><img data-fancybox="gallery" data-sizes="auto" data-src="http://www.runoob.com/wp-content/uploads/2015/07/55b19171b8b6b9487d717bf2ecbba6de.png" alt="img" class="lazyload"></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> 移动端常见布局 </category>
          
          <category> 网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“总结归纳：CSS基础（二）”</title>
      <link href="/2021/10/01/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%882%EF%BC%89/"/>
      <url>/2021/10/01/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>✍目录总览：（CSS三大特性、盒子模型、PS基本操作、圆角边框、盒子阴影、传统网页布局、元素的隐藏与显示）</p><span id="more"></span><h1 id="CSS基础知识（二）"><a href="#CSS基础知识（二）" class="headerlink" title="CSS基础知识（二）"></a>CSS基础知识（二）</h1><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/ace015a27ede4129a4368ae9fa5d17a9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="思维导图" class="lazyload"></p><h2 id="1-CSS三大特性"><a href="#1-CSS三大特性" class="headerlink" title="1.CSS三大特性"></a>1.CSS三大特性</h2><h4 id="1-1、层叠性"><a href="#1-1、层叠性" class="headerlink" title="1.1、层叠性"></a>1.1、层叠性</h4><ul><li>相同选择器设置相同的样式，此时一个样式就会<strong>覆盖</strong>另一个冲突的样式。</li><li>层叠性主要解决样式冲突的问题</li><li>层叠性原则：<ul><li>样式冲突，遵循的原则是<strong>就近原则</strong>***</li></ul></li></ul><h4 id="1-2、继承性盒子模型"><a href="#1-2、继承性盒子模型" class="headerlink" title="1.2、继承性盒子模型"></a>1.2、继承性盒子模型</h4><ul><li>CSS中的继承：子标签会继承父标签里面的某些样式</li><li>如<strong>文本颜色和字号</strong>等</li></ul><p><strong>行高继承</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">body &#123;<br>        font:12px/1.5   Microsoft YaHei //行高为1.5倍 字体为微软雅黑<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>1.5的意思：让里面所有的子元素的行高是当前文字大小的1.5倍</li></ul><h4 id="1-3、优先级"><a href="#1-3、优先级" class="headerlink" title="1.3、优先级"></a>1.3、优先级</h4><p>– 当同一个元素指定多个选择器，就会有优先级的产生</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">     <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:pink;</span><br><span class="language-css">     &#125;</span><br><span class="language-css">     <span class="hljs-selector-class">.text</span> &#123;</span><br><span class="language-css">     <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">     &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>你笑起来真好看<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>选择器相同，则执行<strong>层叠性</strong></li><li>选择器不同，则按<strong>权重</strong></li></ul><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器（标签选择器）</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””</td><td>1，0，0，0</td></tr><tr><td>！important重要的</td><td>无穷大</td></tr></tbody></table><ul><li><strong>类选择器权重为10</strong></li><li><strong>伪类选择器权重为10</strong></li><li><strong>ID选择器权重为100</strong></li></ul><h4 id="1-4、优先级注意点"><a href="#1-4、优先级注意点" class="headerlink" title="1.4、优先级注意点"></a>1.4、优先级注意点</h4><ul><li>等级判断是从左到右，如果某一位数值相同，则判断下一位数值</li><li><strong>继承的权重是0</strong></li><li>权重可以叠加，<strong>但是永远不会有进位</strong></li></ul><h4 id="1-5、权重的叠加"><a href="#1-5、权重的叠加" class="headerlink" title="1.5、权重的叠加"></a>1.5、权重的叠加</h4><ul><li>权重叠加：如果是复合选择器，则会有权重的叠加，需要计算权重</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">     li &#123;</span><br><span class="language-xml">        color:green;</span><br><span class="language-xml">     &#125;</span><br><span class="language-xml">/* li 的权重是 0,0,0,1  */</span><br><span class="language-xml">     ul li&#123;</span><br><span class="language-xml">        color :red;</span><br><span class="language-xml">     &#125;</span><br><span class="language-xml">/* 复合选择器权重叠加，ul li权重 0,0,0,1 + 0,0,0,1 =0,0,0,2 */</span><br><span class="language-xml">.nav li&#123;</span><br><span class="language-xml">    color:pink;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml">/*  .nav li 权重 0,0,1,0 + 0,0,0,1 = 0,0,1,1 */</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>大猪蹄子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>大肘子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>猪尾巴<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml">      </span></span><br><span class="language-xml"><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br></code></pre></td></tr></table></figure><ol><li><code>div ul li</code>———-&gt; 0,0,0,3</li><li><code>.nav ul li</code> ————–&gt;0,0,1,2</li><li><code>a:hover</code> —————-&gt;0,0,1,1 /* 伪类选择器*/</li><li><code>.nav a</code>——————–&gt;0,0,1,1</li></ol><h2 id="2-盒子模型"><a href="#2-盒子模型" class="headerlink" title="2.盒子模型"></a>2.盒子模型</h2><h5 id="页面布局要学习三大核心："><a href="#页面布局要学习三大核心：" class="headerlink" title="页面布局要学习三大核心："></a>页面布局要学习三大核心：</h5><p><strong>盒子模型</strong>     <strong>浮动</strong>    <strong>定位</strong></p><p>盒子模型的组成：</p><ul><li><code>border(边框)</code></li><li><code>content(内容)</code></li><li><code>padding(内边距)</code></li><li><code>margin(外边距)</code></li></ul><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022114816057.png" alt="image-20211022114816057" class="lazyload"><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022190104761.png" alt="image-20211022190104761" class="lazyload"><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022190126340.png" alt="image-20211022190126340" class="lazyload"></p><h4 id="2-1边框border"><a href="#2-1边框border" class="headerlink" title="2.1边框border"></a>2.1边框border</h4><ul><li>CSS 边框属性允许你指定一个元素边框的样式和颜色</li><li>边框由三部分组成：边框宽度（粗细） 边框样式 边框颜色</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">border : borde-width || border-style || border-color<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th align="left">作用</th></tr></thead><tbody><tr><td>border-width</td><td align="left">定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td align="left">边框的样式</td></tr><tr><td>border-color</td><td align="left">边框颜色</td></tr></tbody></table><h5 id="2-1-1、border-style"><a href="#2-1-1、border-style" class="headerlink" title="2.1.1、border-style"></a>2.1.1、border-style</h5><p>边框样式 border-style可以设置如下值：</p><ol><li><code> none</code>:没有边框即忽略所有边框的宽度（默认值）</li><li><code>solid</code> :边框为单实线（最为常用的）</li><li><code>dashed</code>: 边框为虚线</li><li><code>dotted</code>: 边框为点线</li></ol><p>边框简写：没有顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">border : 1px soilid red;<br></code></pre></td></tr></table></figure><p>边框分开写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/*只设定上边框，其余同理*/<br>border-top: 1px solid red;<br></code></pre></td></tr></table></figure><h5 id="2-1-2、border-collapse"><a href="#2-1-2、border-collapse" class="headerlink" title="2.1.2、border-collapse"></a>2.1.2、border-collapse</h5><ul><li>border-collapse 属性控制浏览器绘制表格边框的方式，它控制相邻单元格的边框</li><li>border-coppapse 表格的细线边框</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">border-collapse : collapse;<br></code></pre></td></tr></table></figure><ul><li>表示相邻边框合并在一起</li><li>collapse 单词是合并的意思</li></ul><h5 id="2-1-3、边框会影响盒子实际大小"><a href="#2-1-3、边框会影响盒子实际大小" class="headerlink" title="2.1.3、边框会影响盒子实际大小"></a>2.1.3、边框会影响盒子实际大小</h5><ol><li>边框会额外增加盒子的实际大小，因此我们有两种方案解决：</li><li>测量盒子大小的时候，不量边框<br>如果测量的时候包含了边框，则需要 <strong>width/height</strong> 减去边框宽度</li></ol><h4 id="2-2内边距padding"><a href="#2-2内边距padding" class="headerlink" title="2.2内边距padding"></a>2.2内边距padding</h4><p><strong>padding</strong> 属性用于设置<strong>内边距</strong>,<strong>即盒子边框与内容之间的距离</strong></p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding -top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table><ul><li>padding属性(简写属性)可以有一到四个值</li></ul><table><thead><tr><th>值的个数</th><th>代表意思</th></tr></thead><tbody><tr><td>padding : 5px;</td><td>1个值，代表<strong>上下左右</strong>都有5像素内边距</td></tr><tr><td>padding :5px 10px;</td><td>2个值，代表上下内边距是5像素，左右内边距是10像素</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3个值，代表上内边距5像素，左右内边距10像素，下内边距20像素</td></tr><tr><td>padding :5px 10px 20px 30px</td><td>4个值，上是5像素，右是10像素，下20像素，左是30像素，顺时针</td></tr></tbody></table><h5 id="2-2-1、-影响盒子大小"><a href="#2-2-1、-影响盒子大小" class="headerlink" title="2.2.1、 影响盒子大小"></a>2.2.1、 影响盒子大小</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">padding会影响盒子大小的情况<br></code></pre></td></tr></table></figure><p>当我们给盒子指定 <strong>padding</strong> 值之后，发生了2件事情：</p><ol><li>内容和边框有了距离，添加了内边距</li><li>padding影响了盒子实际大小</li></ol><ul><li><p><strong>也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子</strong></p><h6 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h6></li></ul><p>如果保证盒子跟效果图大小保持一致，则<strong>让 width/height 减去多出来的内边距大小</strong>即可</p><p>但是，有时候 padding 影响盒子是有好处的，比如我们要做导航：</p><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/abd79f7b40c8482a8140fd74b7149040.png#pic_center" alt="在这里插入图片描述" class="lazyload"></p><p>因为每个导航栏里面的字数不一样多,我们可以不用给每个盒子宽度了,直接给 padding 最合适.</p><h5 id="2-2-1、-不影响盒子大小"><a href="#2-2-1、-不影响盒子大小" class="headerlink" title="2.2.1、 不影响盒子大小"></a>2.2.1、 不影响盒子大小</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">padding不会影响盒子大小的情况<br></code></pre></td></tr></table></figure><ul><li><strong>如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子大小</strong></li></ul><h4 id="2-3、外边距margin"><a href="#2-3、外边距margin" class="headerlink" title="2.3、外边距margin"></a>2.3、外边距margin</h4><ul><li>`margin（外边距）属性用于设置外边距，即控制<strong>盒子和盒子</strong>之间的距离</li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td></tr><tr><td>margin-right</td><td>右外边距</td></tr><tr><td>margin-top</td><td>上外边距</td></tr><tr><td>margin-bottom</td><td>下外边距</td></tr></tbody></table><p>margin 简写方式代表的意义跟 padding 完全一致</p><h5 id="2-3-1、外边距典型应用"><a href="#2-3-1、外边距典型应用" class="headerlink" title="2.3.1、外边距典型应用"></a>2.3.1、外边距典型应用</h5><p>外边距可以让<strong>块级盒子水平居中</strong>，但是必须满足两个条件：</p><ol><li>盒子必须制定了宽度(width)</li><li>盒子<strong>左右的外边距</strong>都设置为 auto</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.header &#123;<br>    width: 960px;<br>    margin: 0 auto;<br>&#125;<br></code></pre></td></tr></table></figure><p>左右的外边距都设置为 auto 有三种写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">margin-left: auto; margin-right: auto;<br><br>margin: auto;<br><br>margin: 0 auto;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 <strong>text-align: center</strong> 即可。</p><h5 id="2-3-2、外边距合并"><a href="#2-3-2、外边距合并" class="headerlink" title="2.3.2、外边距合并"></a>2.3.2、外边距合并</h5><p>使用 margin 定义块级元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况：</p><ol><li>相邻块元素垂直外边距的合并</li><li>嵌套块元素垂直外边距的塌陷</li></ol><h5 id="①相邻块元素垂直外边距的合并"><a href="#①相邻块元素垂直外边距的合并" class="headerlink" title="①相邻块元素垂直外边距的合并"></a>①相邻块元素垂直外边距的合并</h5><p>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。<strong>取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</strong></p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022134346096.png" alt="image-20211022134346096" class="lazyload"><p>解决方案：</p><p><strong>尽量只给一个盒子添加 margin 值</strong>。</p><h5 id="②嵌套块元素垂直外边距的塌陷"><a href="#②嵌套块元素垂直外边距的塌陷" class="headerlink" title="②嵌套块元素垂直外边距的塌陷"></a>②嵌套块元素垂直外边距的塌陷</h5><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022134606647.png" alt="image-20211022134606647" class="lazyload"><p><strong>解决方案：</strong></p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加 overflow: hidden</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷问题。后面会进行总结。</p><h5 id="③清除内外边距"><a href="#③清除内外边距" class="headerlink" title="③清除内外边距"></a>③清除内外边距</h5><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* &#123;<br>    padding: 0;<br>    margin: 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p><strong>行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</strong></p><h2 id="PS基本操作"><a href="#PS基本操作" class="headerlink" title="PS基本操作"></a>PS基本操作</h2><p>因为网页美工大部分效果图都是利用 <strong>PS</strong>（Photoshop）来做的，所以以后我们大部分切图工作都是在 PS 里面完成。</p><ul><li><p>文件➡打开 ：可以打开我们要测量的图片</p></li><li><p><strong>Ctrl+R</strong>：可以打开标尺，或者 视图➡标尺</p></li><li><p>右击标尺，把里面的单位改为像素</p></li><li><p>==Ctrl+ 加号(+)==可以放大视图， ==Ctrl+ 减号(-)==可以缩小视图</p></li><li><p><strong>按住空格键</strong>，鼠标可以变成小手，拖动 PS 视图</p></li><li><p>用<strong>选区</strong>拖动 可以测量大小</p></li><li><p><strong>Ctrl+ D</strong> 可以取消选区，或者在<strong>旁边空白处点击一下</strong>也可以取消选区</p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022115846594.png" alt="image-20211022115846594" class="lazyload"></li></ul><h5 id="1-新知识点"><a href="#1-新知识点" class="headerlink" title="1.新知识点"></a>1.新知识点</h5><p>去掉 li 前面的小圆点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">li &#123;<br>    list-style: none;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-PS切图"><a href="#2-PS切图" class="headerlink" title="2.PS切图"></a>2.PS切图</h5><p>PS 有很多的切图方式：图层切图、切片切图、PS 插件切图等。</p><h5 id="3-图层切图"><a href="#3-图层切图" class="headerlink" title="3.图层切图"></a>3.图层切图</h5><p>最简单的切图方式：右击图层 ➡导出 PNG 切片。</p><h5 id="4-切片切图"><a href="#4-切片切图" class="headerlink" title="4.切片切图"></a>4.切片切图</h5><p>1.利用切片选中图片</p><ul><li>利用切片工具手动划出</li></ul><p>2.导出选中的图片</p><ul><li>文件菜单➡存储为 web 设备所用的格式➡选择我们要的图片格式➡存储</li></ul><h5 id="5-PS插件切图"><a href="#5-PS插件切图" class="headerlink" title="5.PS插件切图"></a>5.PS插件切图</h5><p><strong>Cutterman</strong> 是一款运行在 Photoshop 中的插件，能够自动将你需要的图层进行输出，以替代传统的手工 “导出 web 所用格式” 以及使用切片工具进行挨个切图的繁琐流程。</p><p>官网：Cutterman官网</p><h2 id="3-圆角边框"><a href="#3-圆角边框" class="headerlink" title="3.圆角边框"></a>3.圆角边框</h2><ul><li>在 CSS3 中，新增了圆角边框样式，这样我们的盒子就可以变圆角了。</li><li>border-radius 属性用于设置元素的外边框圆角。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">border-radius:length;<br></code></pre></td></tr></table></figure><ul><li><code>radius</code>半径（圆的半径） 原理:(椭）圆与边框的交集形成圆角效果</li></ul><ol><li>参数值可以是<strong>数值</strong>或<strong>百分比</strong>的形式</li><li>如果是<strong>正方形</strong>，想要设置为一个圆，把数值修改为<strong>高度或者宽度的一半</strong>即可，或者直接写为<strong>50%</strong></li><li>如果是一个矩形，设置为<strong>高度</strong>的一半就可以</li><li>该属性是一个简写属性，可以跟四个值，分别代表<strong>左上角，右上角，右下角，左下角</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">border-top-left-radius:<br>border-top-right-radius:<br>border-bottom-right-radius:<br>border-bottom-left-radius:<br></code></pre></td></tr></table></figure><h2 id="4-盒子阴影"><a href="#4-盒子阴影" class="headerlink" title="4.盒子阴影"></a>4.盒子阴影</h2><p>CSS3 中新增了盒子阴影，我们可以使用 <strong>box-shadow</strong> 属性为盒子添加阴影。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">box-shadow: h-shadow v-shadow blur spread color inset;<br></code></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离。</td></tr><tr><td>spread</td><td>可选，阴影的尺寸。</td></tr><tr><td>color</td><td>可选，阴影的颜色。</td></tr><tr><td>inset</td><td>可选，将外部阴影（outset）改为内部阴影</td></tr></tbody></table><ul><li>模糊距离：影子的虚实</li><li>阴影尺寸：影子的大小</li></ul><p><strong>注意：</strong></p><ol><li><p>默认的是外阴影（outset），但是不可以在后面写这个单词，否则导致阴影无效</p></li><li><p><strong>盒子阴影不占用空间，不会影响其他盒子排列</strong></p></li></ol><h4 id="4-1、开发中阴影常用"><a href="#4-1、开发中阴影常用" class="headerlink" title="4.1、开发中阴影常用"></a>4.1、开发中阴影常用</h4><p>原先盒子没有影子，当我们鼠标经过盒子就添加阴影效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div:hover &#123;<br>      box-shadow:10px 10px 10px -4px rgba(0,0,0,.3);               <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2、文字阴影"><a href="#4-2、文字阴影" class="headerlink" title="4.2、文字阴影"></a>4.2、文字阴影</h4><p>在 CSS3 中，我们可以使用 <strong>text-shadow</strong> 属性将阴影应用于文本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">text-shadow: h-shadow v-shadow blur color<br></code></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>color</td><td>可选，阴影的颜色。</td></tr></tbody></table><h2 id="5-传统网页布局的三种方式"><a href="#5-传统网页布局的三种方式" class="headerlink" title="5.传统网页布局的三种方式"></a>5.传统网页布局的三种方式</h2><p>网页布局的本质➡用 CSS 来摆放盒子。 把盒子摆放到相应位置</p><p>CSS 提供了三种传统布局方式：</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><h4 id="5-1、标准流（元素类型-重点）"><a href="#5-1、标准流（元素类型-重点）" class="headerlink" title="5.1、标准流（元素类型-重点）"></a>5.1、标准流（元素类型-重点）</h4><p><strong>所谓的标准流，就是标签按照规定好默认方式排列</strong></p><ol><li><p>块级元素会独占一行，从上向下顺序排列。</p><p>常用元素：div、hr、p、h1~h6、ul、ol、dl、form、table</p></li><li><p>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。<br>常用元素：span、a、i、em 等</p></li></ol><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p><p><strong>注意：</strong>实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p><h4 id="5-2、浮动"><a href="#5-2、浮动" class="headerlink" title="5.2、浮动"></a>5.2、浮动</h4><p>有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式.</p><h5 id="5-2-1、浮动的典型应用"><a href="#5-2-1、浮动的典型应用" class="headerlink" title="5.2.1、浮动的典型应用"></a>5.2.1、浮动的典型应用</h5><ul><li>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示。</strong></li><li>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</strong></li></ul><p><strong>什么是浮动</strong>？</p><ul><li><code>float</code>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器 &#123;<br>    float: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><ul><li>网页布局的第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</strong></li><li>网页布局第二准则：<strong>先设置盒子大小，之后设置盒子的位置。</strong></li></ul><h5 id="5-2-2、浮动的特性"><a href="#5-2-2、浮动的特性" class="headerlink" title="5.2.2、浮动的特性"></a>5.2.2、浮动的特性</h5><p>设置了浮动（float）的元素的最重要的特性：</p><ol><li><p>脱标：浮动元素会脱离标准流</p><ul><li><p>浮动的盒子<strong>不再保留原先的位置</strong></p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022162419029.png" alt="image-20211022162419029" class="lazyload"></li></ul></li><li><p>如果多个盒子都设置了浮动，则它们会按照属性值<strong>一行内显示并且顶端对齐排列</strong></p><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022162440303.png" alt="image-20211022162440303" class="lazyload"></p><ul><li>浮动的元素是相互贴靠在一起的（<strong>不会有缝隙</strong>），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li></ul></li><li><p>浮动元素会具有行内块元素特性</p></li></ol><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后都具有<strong>行内块元素</strong>相似的特性。</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>如果行内元素有了浮动，则不需要转换块级\行内块元素就可以直接给高度和宽度</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li></ul><h5 id="5-2-3、浮动元素经常和标准流父级搭配使用"><a href="#5-2-3、浮动元素经常和标准流父级搭配使用" class="headerlink" title="5.2.3、浮动元素经常和标准流父级搭配使用"></a>5.2.3、浮动元素经常和标准流父级搭配使用</h5><p>为了约束浮动元素位置, 我们网页布局一般采取的策略是:</p><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</strong></p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022162608506.png" alt="image-20211022162608506" class="lazyload"><h5 id="5-2-4、浮动的注意点"><a href="#5-2-4、浮动的注意点" class="headerlink" title="5.2.4、浮动的注意点"></a>5.2.4、浮动的注意点</h5><ul><li>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li><li>一个元素浮动了，理论上其余兄弟元素也要浮动<ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动</li></ul></li><li><strong>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</strong></li></ul><h5 id="5-2-5、清除浮动"><a href="#5-2-5、清除浮动" class="headerlink" title="5.2.5、清除浮动"></a>5.2.5、清除浮动</h5><ul><li>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</li></ul><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211022162733808.png" alt="image-20211022162733808" class="lazyload"><ul><li>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</li><li>理想中的状态，让子盒子撑开父亲，有多少孩子，我父盒子就有多高</li></ul><h5 id="5-2-6、清除浮动的本质"><a href="#5-2-6、清除浮动的本质" class="headerlink" title="5.2.6、清除浮动的本质"></a>5.2.6、清除浮动的本质</h5><ul><li>清除浮动的本质是<strong>清除浮动元素造成的影响</strong></li><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动之后，父级就会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。</li></ul><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器 &#123;<br>    clear: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><ul><li>我们实际工作中，几乎只用 <strong>clear:both`</strong></li><li>清除浮动的策略是：<strong>闭合浮动</strong></li><li>只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</li></ul><h5 id="5-2-7、清除浮动的方法（常用重点）"><a href="#5-2-7、清除浮动的方法（常用重点）" class="headerlink" title="5.2.7、清除浮动的方法（常用重点）"></a>5.2.7、清除浮动的方法（常用重点）</h5><ol><li><strong>额外标签法</strong>也称为隔墙法，是W3C推荐的做法</li><li>父级添加 <strong>overflow</strong> 属性</li><li>父级添加 <strong>after</strong> 伪元素</li><li>父级添加双伪元素</li></ol><h6 id="①额外标签法"><a href="#①额外标签法" class="headerlink" title="①额外标签法"></a>①额外标签法</h6><ul><li><p>额外标签法会在浮动元素末尾添加一个空的标签,例如：</p></li><li><p>例如**<div style="clear:both"></div><strong>，或者其他标签（如</strong><br>**等）</p></li><li><p>注意：<strong>要求这个新的空标签必须是块级元素</strong></p></li><li><p>优点：通俗易懂，书写方便</p></li><li><p>缺点：添加许多无意义的标签，结构化较差</p><p>实际工作可能会遇到,但是不常用</p></li></ul><h6 id="②overflow"><a href="#②overflow" class="headerlink" title="②overflow"></a>②overflow</h6><ul><li>可以给<strong>父级</strong>添加<code>overflow</code>属性，将其属性值设置为<code>hidden</code>,<code>auto</code>或<code>scroll</code></li><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><h6 id="③after伪元素法"><a href="#③after伪元素法" class="headerlink" title="③after伪元素法"></a>③after伪元素法</h6><p><strong>:after</strong> 方式是额外标签法的升级版。也是给父元素添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.clearfix:after &#123;<br>    content: &quot;&quot;;<br>    dispaly: block;<br>    height: 0;<br>    clear: both;<br>    visibility: hidden;<br>&#125;<br>.clearfix &#123;<br>      /* IE6,7专有*/<br>      *zoom : 1; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：需要照顾低版本浏览器</li><li>代表网站：百度、淘宝、网易等</li></ul><h6 id="④双伪元素"><a href="#④双伪元素" class="headerlink" title="④双伪元素"></a>④双伪元素</h6><ul><li>也是给父元素添加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.clearfix:before,.clearfix:after&#123;<br>   content:&quot;&quot;;<br>   display:table;<br>&#125;<br>.clearfix:after &#123;<br>     clear:both;<br>&#125;<br>.clearfix &#123;<br>  *zoom:1;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>优点：代码更简洁</li><li>缺点：需要照顾低版本浏览器</li><li>代表网站：小米、腾讯等</li></ul><h5 id="5-2-8、浮动总结"><a href="#5-2-8、浮动总结" class="headerlink" title="5.2.8、浮动总结"></a>5.2.8、浮动总结</h5><p><strong>为什么需要清除浮动？</strong></p><p>①：父级没高度</p><p>②：子盒子浮动了</p><p>③：影响下面布局了，我们就应该清除浮动了。</p><table><thead><tr><th>清除浮动方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法(隔墙法)</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级overflow:hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级after伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于IE6-7不支持：after，兼容性问题</td></tr></tbody></table><h4 id="5-3、定位"><a href="#5-3、定位" class="headerlink" title="5.3、定位"></a>5.3、定位</h4><h5 id="5-3-1、定位的组成"><a href="#5-3-1、定位的组成" class="headerlink" title="5.3.1、定位的组成"></a>5.3.1、定位的组成</h5><p><strong>定位 = 定位模式 +边偏移</strong></p><ul><li><strong>定位模式用于指定一个元素在文档中的定位方式</strong></li><li><strong>边偏移则决定了该元素的最终位置</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">定位模式<br></code></pre></td></tr></table></figure><ul><li>定位模式决定元素的定位方式 ，它通过 CSS 的 position 属性来设置，其值可以分为四个</li></ul><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">边偏移<br></code></pre></td></tr></table></figure><p>边偏移就是定位的盒子移动到最终位置。</p><table><thead><tr><th>边偏移属性</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>top: 80px</td><td>顶端偏移量，定义元素相对于其父元素的<strong>上边线的距离</strong></td></tr><tr><td>bottom</td><td>bottom: 80px</td><td>底部偏移量，定义元素相对于其父元素的<strong>下边线的距离</strong></td></tr><tr><td>right</td><td>right: 80px</td><td>右侧偏移量，定义元素相对于其父元素<strong>右边线的距离</strong></td></tr><tr><td>left</td><td>left: 80px</td><td>左侧偏移量，定义元素相对于其父元素<strong>左边线的距离</strong></td></tr></tbody></table><h5 id="5-3-2、静态定位static-了解"><a href="#5-3-2、静态定位static-了解" class="headerlink" title="5.3.2、静态定位static(了解)"></a>5.3.2、静态定位static(了解)</h5><ul><li>静态定位是元素的<strong>默认定位方式，无定位</strong>的意思</li><li>静态定位按照标准流特性摆放位置，它没有边偏移</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器 &#123;<br>position: static;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-3、相对定位relative"><a href="#5-3-3、相对定位relative" class="headerlink" title="5.3.3、相对定位relative"></a>5.3.3、相对定位relative</h5><ol><li>相对定位是元素在移动位置的时候，是相对于它<strong>原来的位置</strong>来说的</li><li><strong>特点：</strong><ul><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）</li><li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待。（不脱标，继续保留原来位置）</li><li>因此，相对定位并没有脱标，它最典型的应用是给绝对定位当爹的。</li></ul></li></ol><h5 id="5-3-4、绝对定位absolute"><a href="#5-3-4、绝对定位absolute" class="headerlink" title="5.3.4、绝对定位absolute"></a>5.3.4、绝对定位absolute</h5><ol><li>绝对定位是元素在移动位置的时候，是相对于它的祖先元素来说的</li><li><strong>特点：</strong><ul><li>如果没有祖先元素，或者祖先元素没定位，则以浏览器为准进行定位(Document 文档)</li><li>如果祖先元素父级有定位(相对、绝对、固定定位)，则以最近一级的有定位祖先元素为参考点移动位置</li><li>绝对定位不再占用原先的位置（脱标）</li></ul></li></ol><p>所以绝对定位是脱离标准流的</p><h6 id="①绝对定位盒子水平居中"><a href="#①绝对定位盒子水平居中" class="headerlink" title="①绝对定位盒子水平居中"></a>①绝对定位盒子水平居中</h6><ol><li>加了绝对定位的盒子不能通过<code>margin: 0 auto</code>水平居中</li><li>但是可以通过以下计算方法实现水平和垂直居中<ul><li><code>left:50%</code> ； 让盒子的左侧移动到父级元素的水平中心位置</li><li><code>margin-left: -100px</code>; 让盒子向左移动自身宽度的一半</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.box &#123;<br>    position: absolute;<br>    /* 1.left走50%，父容器宽度的一半 */<br>    left: 50%;<br>    /* 2.margin 负值往左边走 自己盒子宽度的一半 */<br>    margin-left: -xx;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-5、子绝父相（重点常用）"><a href="#5-3-5、子绝父相（重点常用）" class="headerlink" title="5.3.5、子绝父相（重点常用）"></a>5.3.5、子绝父相（重点常用）</h5><p>意思：<strong>子级使用绝对定位，父级则需要相对定位</strong></p><p>①：子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p><p>②：父盒子需要加定位限制子盒子在父盒子内显示</p><p>③：父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p><p>总结：<strong>因为父级需要占有位置，因此是相对定位，子盒子不要占有位置，则是绝对定位</strong></p><h5 id="5-3-6、固定定位fixed"><a href="#5-3-6、固定定位fixed" class="headerlink" title="5.3.6、固定定位fixed"></a>5.3.6、固定定位fixed</h5><p><strong>固定定位</strong>是元素<strong>固定于浏览器的可视区的位置</strong></p><p>主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变</p><ul><li>特点<ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位<strong>不再占有原先的位置</strong>(脱标)</li></ul></li></ul><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p><h6 id="固定定位小技巧"><a href="#固定定位小技巧" class="headerlink" title="固定定位小技巧"></a>固定定位小技巧</h6><p>固定定位小技巧： 固定在版心右侧位置</p><p>小算法：</p><ol><li>让固定定位的盒子 left: 50%. 走到浏览器可视区（也可以看做版心） 的一半位置。</li><li>让固定定位的盒子 margin-left: 版心宽度的一半距离。 多走 版心宽度的一半位置</li></ol><p>就可以让固定定位的盒子贴着版心右侧对齐了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.box &#123;<br>    position: absolute;<br>    /* 1.left走50%，父容器宽度的一半 */<br>    left: 50%;<br>    /* 2.margin 负值往左边走 自己盒子宽度的一半 */<br>    margin-left: -xx;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-7、粘性定位sticky-了解"><a href="#5-3-7、粘性定位sticky-了解" class="headerlink" title="5.3.7、粘性定位sticky(了解)"></a>5.3.7、粘性定位sticky(了解)</h5><p>粘性定位可以被认为是相对定位和固定定位的混合</p><ul><li>特点：<ul><li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li><li>粘性<strong>定位占有原先的位置</strong>（相对定位的特点）</li><li>必须添加top，left，right，bottom其中一个才有效</li></ul></li></ul><p>跟页面滚动搭配使用。 兼容性较差，IE 不支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器 &#123;<br>    position:sticky;  <br>top: 10px;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-8、定位模式总结"><a href="#5-3-8、定位模式总结" class="headerlink" title="5.3.8、定位模式总结"></a>5.3.8、定位模式总结</h5><table><thead><tr><th>定位模式</th><th>是否脱标</th><th>移动位置</th><th>是否常用</th></tr></thead><tbody><tr><td>static静态定位</td><td>否</td><td>不能使用边偏移</td><td>很少</td></tr><tr><td><strong>relative相对定位</strong></td><td><strong>否（占有位置）</strong></td><td><strong>相对于自身位置移动</strong></td><td><strong>常用</strong></td></tr><tr><td><strong>absolute绝对定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>带有定位的父级</strong></td><td><strong>常用</strong></td></tr><tr><td><strong>fixed固定定位</strong></td><td><strong>是（不占有位置）</strong></td><td><strong>浏览器可视区</strong></td><td><strong>常用</strong></td></tr><tr><td>sticky</td><td>否（占有位置）</td><td>浏览器可视区</td><td>当前阶段少</td></tr></tbody></table><ul><li><p>一定要记住相对定位，固定定位，绝对定位的两个大特点：1.是否占有位置（脱标否）2.以谁为基准点移动</p></li><li><p>重点学会子绝父相（儿子绝对定位，父亲必须相对定位）</p></li></ul><h5 id="5-3-9定位叠放次序z-index"><a href="#5-3-9定位叠放次序z-index" class="headerlink" title="5.3.9定位叠放次序z-index"></a>5.3.9定位叠放次序z-index</h5><ul><li>在使用定位布局时候，可能会出现盒子重叠的情况</li><li>此时，可以用 z-index 来控制盒子的前后次序(z轴)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">选择器 &#123;<br>    z-index: 1; <br>&#125;<br></code></pre></td></tr></table></figure><ol><li>数值可以是正整数，负整数或者0，默认是auto，数值越大，盒子越靠上</li><li>如果属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li><strong>只有定位</strong>的盒子才有 z-index 属性</li></ol><h5 id="5-3-10、定位的扩展"><a href="#5-3-10、定位的扩展" class="headerlink" title="5.3.10、定位的扩展"></a>5.3.10、定位的扩展</h5><p>1.绝对定位的盒子居中<br>加了绝对定位的盒子不能通过 <strong>margin: 0 auto</strong> 水平居中，但是可以通过以下计算方法实现水平和垂直居中</p><p>①：<strong>left: 50%;</strong> 让盒子的左侧移动到父级元素的水平中心位置</p><p>②：<strong>margin-left: -100px</strong>; 让盒子向左移动自身宽度的一半</p><p>2.定位特殊特性</p><p>绝对定位和固定定位也和浮动类似。</p><p>①：行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p><p>②：块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p><p>3.脱标的盒子不会触发外边距塌陷<br>浮动元素、绝对定位(固定定位)元素都不会触发外边距合并的问题。</p><p>4.绝对定位(固定定位)会完全压住盒子<br>①：浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）</p><p>②：但是绝对定位（固定定位） 会压住下面标准流所有的内容。</p><p>③：浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。 文字会围绕浮动元素</p><h4 id="5-4、网页布局总结"><a href="#5-4、网页布局总结" class="headerlink" title="5.4、网页布局总结"></a>5.4、网页布局总结</h4><p>通过盒子模型，清楚知道大部分html标签是一个盒子</p><p>通过CSS浮动、定位 可以让每个盒子排列成为网页</p><p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法</p><ol><li><p>标准流</p><p>可以让盒子上下排列或者左右排列，<strong>垂直的块级盒子显示就用标准流布局。</strong></p></li><li><p>浮动</p><p>可以让多个块级元素一行显示或者左右对齐盒子，<strong>多个块级盒子水平显示就用浮动布局。</strong></p></li><li><p>定位</p><p>定位最大的特点是有层叠的概念，就<strong>是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局。</strong></p></li></ol><h2 id="6-元素的隐藏与显示"><a href="#6-元素的隐藏与显示" class="headerlink" title="6.元素的隐藏与显示"></a>6.元素的隐藏与显示</h2><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！</p><p>本质：<strong>让一个元素在页面中隐藏或者显示出来</strong></p><h4 id="6-1、display显示隐藏"><a href="#6-1、display显示隐藏" class="headerlink" title="6.1、display显示隐藏"></a>6.1、display显示隐藏</h4><p>**<code>display</code>**属性用于设置一个元素应如何显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">display: none;  /*隐藏对象*/<br><br>display: block; /*除了转换为块级元素之外，同时还有显示元素的意思*/<br></code></pre></td></tr></table></figure><ul><li><strong>display隐藏元素后，不再占有原来的位置</strong></li></ul><p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p><h4 id="6-2、visibility显示隐藏"><a href="#6-2、visibility显示隐藏" class="headerlink" title="6.2、visibility显示隐藏"></a>6.2、visibility显示隐藏</h4><p>**visibility`**属性用于指定一个元素应可见还是隐藏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">visibility: visible; /*元素可视*/<br><br>visibility: hidden;  /*元素隐藏*/<br></code></pre></td></tr></table></figure><ul><li><strong>visibility 隐藏元素后，继续占有原来的位置。</strong></li><li>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden</code></li><li>如果隐藏元素不想要原来位置， 就用 <code>display：none</code> (用处更多 重点）</li></ul><h4 id="6-3、overflow溢出显示隐藏"><a href="#6-3、overflow溢出显示隐藏" class="headerlink" title="6.3、overflow溢出显示隐藏"></a>6.3、overflow溢出显示隐藏</h4><p><strong>overflow</strong> 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table><p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。<br>但是如果有定位的盒子， 请慎用 overflow:hidden 因为它会隐藏多余的部分。</p>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> 网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“CSS基础（一） 标签选择器和属性”</title>
      <link href="/2021/09/05/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/"/>
      <url>/2021/09/05/CSS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="什么是-CSS？"><a href="#什么是-CSS？" class="headerlink" title="什么是 CSS？"></a>什么是 CSS？</h4><ul><li><em>CSS</em> 指的是层叠样式表 (<em>C</em>ascading <em>S</em>tyle <em>S</em>heets)</li><li>CSS 描述了<em>如何在屏幕、纸张或其他媒体上显示 HTML 元素</em></li><li>CSS <em>节省了大量工作</em>。它可以同时控制多张网页的布局</li><li>外部样式表存储在 <em>CSS 文件</em>中</li></ul><p>✍目录总览：标签基础选择器、字体属性、文本属性、复合选择器、元素显示模式、背景   </p><span id="more"></span><h1 id="CSS基础知识（一）"><a href="#CSS基础知识（一）" class="headerlink" title="CSS基础知识（一）"></a>CSS基础知识（一）</h1><p><img data-fancybox="gallery" data-sizes="auto" data-src="https://img-blog.csdnimg.cn/53e73b851fa04cf395325296fe89ea75.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" class="lazyload"></p><h2 id="1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）"><a href="#1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）" class="headerlink" title="1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）"></a>1、标签基础选择器（标签选择器、类选择器、id选择器、通配符选择器）</h2><h3 id="1-1、标签选择器（重点）"><a href="#1-1、标签选择器（重点）" class="headerlink" title="1.1、标签选择器（重点）"></a>1.1、标签选择器（重点）</h3><ul><li>标签选择器的作用是<strong>为页面中某一类标签指定统一的CSS样式</strong></li><li>优点是能快速为页面中同类型的标签统一设置样式</li><li>缺点是不能设计差异化样式，只能选择全部的当前标签</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">标签名 &#123;<br>    属性1: 属性值1;<br>&#125;<br>ul &#123; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>规范：<ul><li>属性值前面，冒号后面，保留一个空格</li><li>标签名和大括号中间保留空格</li></ul></li></ul><h3 id="1-2、类选择器（重点）"><a href="#1-2、类选择器（重点）" class="headerlink" title="1.2、类选择器（重点）"></a>1.2、类选择器（重点）</h3><p>如果想要<strong>差异化选择不同的标签，单独选一个或者几个标签，可以使用****类选择器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.类名 &#123;<br>    属性1: 属性值1;<br>    .....<br>&#125;<br>.red &#123;<br>    color: red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结构需要用class属性来调用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;div class=&#x27;red&#x27;&gt;  变红色 &lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>类选择器在 HTML 中以 class 属性表示，在CSS中，类选择器以一个点 <code>.</code> 号表示</li><li>记忆口诀：样式<strong>点</strong>定义，结构<strong>类</strong>调用</li></ol><h4 id="1-2-1、类选择器多类名"><a href="#1-2-1、类选择器多类名" class="headerlink" title="1.2.1、类选择器多类名"></a>1.2.1、类选择器多类名</h4><p>我们可以给一个标签指定多个类名，简单理解就是一个标签有多个名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;div class=&quot;red font20&quot;&gt;林晓&lt;/div&gt;<br></code></pre></td></tr></table></figure><ul><li>在标签 class 属性中写多个类名</li><li>多个类名中间必须用空格分开</li><li>这个标签就可以分别具有这些类名的样</li></ul><p>多类名开发中使用场景：</p><ol><li>可以把一些标签元素相同的样式(公共的部分)放到一个类里面</li><li>这些标签都可以调用这个公共的类，然后再调用自己独有的类</li><li>从而节省CSS代码，统一修改也方便</li></ol><h3 id="1-3、id选择器"><a href="#1-3、id选择器" class="headerlink" title="1.3、id选择器"></a>1.3、id选择器</h3><ul><li><strong>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式</strong></li><li><strong>HTML 元素以 id属性 来设置 id 选择器，CSS中 id 选择器 以 “#” 来定义</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">   &lt;style&gt;<br>        #pink &#123;<br>            color:pink;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;body&gt;<br>    &lt;div id=&quot;pink&quot;&gt;秦大林子&lt;/div&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><strong>id 属性只能在每个 HTML 文档中出现一次。</strong></li><li><strong>记忆口诀：样式 *<em>#*</em> 定义，结构 *<em>id*</em> 调用。只能调用一次，别人切勿使用</strong></li></ul><h4 id="1-3-1、区别（id选择器与类选择器）"><a href="#1-3-1、区别（id选择器与类选择器）" class="headerlink" title="1.3.1、区别（id选择器与类选择器）"></a>1.3.1、区别（id选择器与类选择器）</h4><ul><li><strong>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</strong></li><li><strong>id 选择器好比人的身份证号码，全中国是唯一的，不得重复。</strong></li><li><strong>id 选择器和类选择器最大的不同在于使用次数上</strong></li><li><strong>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</strong></li></ul><p><strong>记忆口诀：</strong></p><ul><li>样式<strong>点</strong>定义，结构<strong>类</strong>调用</li><li>样式 **#**定义，结构 <strong>id</strong> 调用</li></ul><h3 id="1-4、通配符选择器"><a href="#1-4、通配符选择器" class="headerlink" title="1.4、通配符选择器"></a>1.4、通配符选择器</h3><ul><li>CSS 中， 通配符使用 <code>*</code> 定义，它表示选取页面中所有元素(标签)。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* &#123;<br>    属性1：属性值1;<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>一般是用于清楚元素标签的内外边距</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">* &#123;<br>    margin: 0;<br>    padding: 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5、基础选择器总结"><a href="#1-5、基础选择器总结" class="headerlink" title="1.5、基础选择器总结"></a>1.5、基础选择器总结</h3><table><thead><tr><th align="left">基础选择器</th><th>作用</th><th align="left">特点</th><th>使用情况</th><th>语法</th><th></th></tr></thead><tbody><tr><td align="left">标签选择器</td><td>可以选出所有相同的标签</td><td align="left">不能差异化选择</td><td>较多</td><td>p {color: red}</td><td></td></tr><tr><td align="left">类选择器</td><td>可以选出1个或者多个标签</td><td align="left">可以根据需求选择</td><td>非常多</td><td>.nav {color: red}</td><td></td></tr><tr><td align="left">id 选择器</td><td>一次只能选择1个标签</td><td align="left">ID 属性只能在每个 HTML 文档中出现一次</td><td>一般和 js 搭配</td><td>#nav {color: red}</td><td></td></tr><tr><td align="left">通配符选择器</td><td>选择所有的标签</td><td align="left">选择的太多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red}</td><td></td></tr></tbody></table><h2 id="2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）"><a href="#2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）" class="headerlink" title="2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）"></a>2、CSS字体属性（用于定义：字体系列、大小、粗细、文字样式）</h2><h3 id="2-1、font-family（文字字体）"><a href="#2-1、font-family（文字字体）" class="headerlink" title="2.1、font-family（文字字体）"></a>2.1、font-family（文字字体）</h3><ul><li><strong>CSS 使用</strong> <strong>font-family</strong> <strong>属性设置文本的字体系列</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123; font-family:Arial,&quot;Microsoft Yahe&quot;,&quot;微软雅黑&quot;; &#125;<br></code></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>最常见的几个字体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">body &#123;<br>    font-family: &quot;Microsoft Yahe&quot;,tahoma,arial,&quot;Hiragino Sans GB&quot;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、font-size（字体大小）"><a href="#2-2、font-size（字体大小）" class="headerlink" title="2.2、font-size（字体大小）"></a>2.2、font-size（字体大小）</h3><ul><li><strong>CSS 使用 font-size 属性设置字体大小</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p&#123;<br>    font-size: 20px;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>px (像素)大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为 16px</li></ul><h3 id="2-3、font-weight（字体粗细）"><a href="#2-3、font-weight（字体粗细）" class="headerlink" title="2.3、font-weight（字体粗细）"></a>2.3、font-weight（字体粗细）</h3><ul><li><strong>CSS 使用</strong> <strong>font-weight</strong> <strong>属性设置字体的粗细</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">font-weight:  normal | bold |  bolder  | lighter |number<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>normal</td><td>默认值(不加粗的)，相当于<strong>number=400</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>bold</td><td>定义粗体(加粗的)，相当于<strong>number=700</strong></td><td></td><td></td><td></td><td></td></tr><tr><td>bolder</td><td>定义特粗体</td><td></td><td></td><td></td><td></td></tr><tr><td>100-900</td><td>400等同于 normal，700等同于 bold，注意这个数字后面不跟单位</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>实际开发中，我们更喜欢用<strong>数字表示粗细</strong></p><h3 id="2-4、font-style（字体样式-斜体）"><a href="#2-4、font-style（字体样式-斜体）" class="headerlink" title="2.4、font-style（字体样式-斜体）"></a>2.4、font-style（字体样式-斜体）</h3><ul><li><strong>CSS 使用</strong> <strong>font-style</strong> <strong>属性设置文字样式</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p &#123;<br>  font-style: normal;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式</td></tr><tr><td>italic</td><td>浏览器会显示<strong>斜体</strong>的字体样式</td></tr></tbody></table><p>注意：<strong>平时我们很少给文字加斜体，反而要给斜体标签( em , i )改为不倾斜字体</strong></p><h3 id="2-5、字体属性复合写法（节约代码）"><a href="#2-5、字体属性复合写法（节约代码）" class="headerlink" title="2.5、字体属性复合写法（节约代码）"></a>2.5、字体属性复合写法（节约代码）</h3><p><strong>字体复合属性可以把以上文字样式综合来写，这样写更节约代码，例如：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;style&gt;<br>        /* 想要div 文字变倾斜 加粗 字号设置为16像素 并且是微软雅黑 */   <br>        div &#123;<br>            font-style: italic;<br>            font-weight: 700;<br>            font-size: 16px;<br>            font-family: &#x27;Microsoft yahe&#x27;;<br>            /* 复合属性：简写的方式  节约代码*/<br>            /* 顺序：font-style font-weight  font-size/line-height  font-family */<br>            font: italic 700 16px &#x27;Microsoft yahe&#x27;;<br>        &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li><strong>顺序：文字样式 文字粗细 文字大小 文字字体</strong></li><li>**使用font属性时，必须按照上面语法格式中的顺序书写，**不能更换顺序**，并且各个属性间*<em>以空格*<em>隔开</em></em></li><li><strong>不需要设置的属性可以省略(取默认值)，但必须保留<code>font-size</code> 和<code>font-family</code>属性，否则 font 属性将不起作用</strong></li></ul><h3 id="2-6、字体属性总结"><a href="#2-6、字体属性总结" class="headerlink" title="2.6、字体属性总结"></a>2.6、字体属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic，不倾斜是 normal，实际开发最常用 normal</td><td></td><td></td><td></td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗是 700 或者 bold ，不加粗是 normal 或者 400，记住数字不加单位</td><td></td><td></td><td></td></tr><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是 px ，一定要跟上单位</td><td></td><td></td><td></td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td><td></td><td></td><td></td></tr><tr><td>font</td><td>字体连写</td><td>①字体连写是有顺序的，不能随意换位置 ② <strong>字体和字号必须同时出现</strong></td><td></td><td></td><td></td></tr></tbody></table><h2 id="3、CSS文本属性"><a href="#3、CSS文本属性" class="headerlink" title="3、CSS文本属性"></a>3、CSS文本属性</h2><h3 id="3-1、color（颜色）"><a href="#3-1、color（颜色）" class="headerlink" title="3.1、color（颜色）"></a>3.1、color（颜色）</h3><ul><li><strong>color</strong> <strong>属性用于定义文本的颜色</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123;<br>    color: red;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>表示</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，pink等</td></tr><tr><td>十六进制</td><td>#FF0000, #FF6600，#29D794</td></tr><tr><td>RGB代码</td><td>rgb（255，0，0） 或rgb(100%，0%，0%)</td></tr></tbody></table><p><strong>实际开发中最常用的是十六进制。</strong></p><h3 id="3-2、text-align（水平对齐方式）"><a href="#3-2、text-align（水平对齐方式）" class="headerlink" title="3.2、text-align（水平对齐方式）"></a>3.2、text-align（水平对齐方式）</h3><ul><li><strong>text-align 属性用于设置文本内容的水平对齐方式</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123;<br>    text-align:center;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h3 id="3-3、text-decoration（装饰文本：下划线、删除线等等）"><a href="#3-3、text-decoration（装饰文本：下划线、删除线等等）" class="headerlink" title="3.3、text-decoration（装饰文本：下划线、删除线等等）"></a>3.3、text-decoration（装饰文本：下划线、删除线等等）</h3><ul><li><strong>text-decoration</strong> <strong>属性用于装饰文本，可以给文本添加下划线，删除线，上划线等</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123;<br>    text-decoration: underline;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线(最常用)</td></tr><tr><td>underline</td><td>下划线，链接自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线(几乎不用)</td></tr><tr><td>line-through</td><td>删除线 (不常用)</td></tr></tbody></table><p>重点记住如何添加下划线，如何删除下划线，其余了解即可。</p><h3 id="3-4、text-indent（段落缩进）"><a href="#3-4、text-indent（段落缩进）" class="headerlink" title="3.4、text-indent（段落缩进）"></a>3.4、text-indent（段落缩进）</h3><ul><li><strong>text-indent</strong> <strong>属性用于指定文本的第一行缩进，通常是将****段落的首行缩进</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123;<br>    text-indent: 10px;<br>&#125;<br>p&#123;<br>   text-indent: 2em;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过设置该水属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值</li><li>em是一个相对单位，就是当前元素(font-size)<strong>1个文字的大小</strong></li><li>如果当前元素没有设置大小，则会按照父元素的一个文字大小</li></ul><h3 id="3-5、line-height（行高）"><a href="#3-5、line-height（行高）" class="headerlink" title="3.5、line-height（行高）"></a>3.5、line-height（行高）</h3><ul><li><strong>line-height</strong> <strong>属性用于设置行间的距离(行高)，可以控制文字行与行之间的距离</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">p &#123;<br>   line-height: 26px;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://postimg.cc/zVBNvd8G"><img data-fancybox="gallery" data-sizes="auto" data-src="https://i.postimg.cc/65VpHSPn/2.png" alt="2.png" class="lazyload"></a></p><p>行间距包括<strong>上间距、文本高度、下间距</strong></p><h3 id="3-6、文本属性总结"><a href="#3-6、文本属性总结" class="headerlink" title="3.6、文本属性总结"></a><strong>3.6、文本属性总结</strong></h3><table><thead><tr><th align="left">属性</th><th align="left">表示</th><th align="left">注意点</th><th align="left"></th><th></th><th></th></tr></thead><tbody><tr><td align="left">color</td><td align="left">文本颜色</td><td align="left">通常用十六进制，而且是简写形式 #fff</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">text-align</td><td align="left">文本对齐</td><td align="left">可以设定文字水平的对齐方式</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">text-indent</td><td align="left">文本缩进</td><td align="left">段落首行缩进</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">text-decoration</td><td align="left">文本修饰</td><td align="left">记住添加下划线 underline 取消下划线 none</td><td align="left"></td><td></td><td></td></tr><tr><td align="left">line-height</td><td align="left">行高</td><td align="left">控制行与行之间的距离</td><td align="left"></td><td></td><td></td></tr></tbody></table><h2 id="4、CSS复合选择器"><a href="#4、CSS复合选择器" class="headerlink" title="4、CSS复合选择器"></a>4、CSS复合选择器</h2><p>复合选择器：是由两个或多个基础选择器，通过不同的方式组合而成的</p><p>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器</p><h3 id="4-1、后代选择器"><a href="#4-1、后代选择器" class="headerlink" title="4.1、后代选择器"></a><strong>4.1、后代选择器</strong></h3><ul><li>后代选择器又称为<strong>包含选择器，可以选择父元素里面的子元素</strong></li><li>其<strong>写法</strong>就是把外层标签写在前面，内层标签写在后面，中间用空格分隔，当标签发生嵌套时，内层标签就称为外层标签的后代</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">元素1 元素2 &#123;<br>    样式声明<br>&#125;<br></code></pre></td></tr></table></figure><p>上述语法表示**选择元素1里面的所有元素2(后代元素)**，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/*选择ul 里面的所有 li 标签元素*/<br>ul li &#123;    <br>    样式声明   <br>&#125;     <br></code></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用空格隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是<strong>元素2</strong></li></ul><h3 id="4-2、子选择器"><a href="#4-2、子选择器" class="headerlink" title="4.2、子选择器"></a><strong>4.2、子选择器</strong></h3><ul><li><strong>子元素选择器</strong>只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">元素1 &gt; 元素2&#123;<br>    样式声明<br>&#125;<br></code></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1 里面的所有直接后代(子元素)元素2</strong>，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/*选择div里面所有最近一级 P 标签元素*/ <br>div &gt; p&#123;<br>    样式声明<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用<strong>大于号</strong>隔开</li><li>元素1 是父级，元素2 是子级，<strong>最终选择的是元素2</strong></li><li>元素2必须是<strong>亲儿子</strong>，其孙子、重孙之类都不归他管</li></ul><h3 id="4-3、并集选择器"><a href="#4-3、并集选择器" class="headerlink" title="4.3、并集选择器"></a><strong>4.3、并集选择器</strong></h3><p><strong>并集选择器可以选择多组标签，同时为它们定义相同的样式。</strong></p><ul><li>并集选择器是各选择器通过<strong>英文逗号</strong>连接而成</li><li>任何形式的选择器都可以作为并集选择器的一部分</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">元素1,元素2 &#123;<br>    样式声明<br>&#125;   <br></code></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1和元素2</strong>，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/*选择  ul  和  div 标签元素 */<br>ul,div &#123;<br>    样式声明<br>&#125; <br></code></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用<strong>逗号隔开</strong></li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><h3 id="4-4、伪类选择器"><a href="#4-4、伪类选择器" class="headerlink" title="4.4、伪类选择器"></a><strong>4.4、伪类选择器</strong></h3><ul><li><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素</li><li>伪类选择器书写最大的特点是<strong>用冒号(😃</strong>表示，比如 <code>:hover</code>、<code>:first-child</code></li><li>伪类选择器很多，比如有链接伪类、结构伪类，这里先记录常用的链接伪类选择器</li></ul><h4 id="4-4-1、链接伪类选择器"><a href="#4-4-1、链接伪类选择器" class="headerlink" title="4.4.1、链接伪类选择器"></a>4.4.1、链接伪类选择器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/* a是标签选择器 */<br>a &#123;<br>    color:gray;<br>&#125;<br>/* :hover 是链接伪类选择器，鼠标经过 */<br>a :hover &#123;<br>    /*鼠标经过的时候，由原来的灰色  变成了红色*/<br>   color:red; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-4-2、-focus伪类选择器"><a href="#4-4-2、-focus伪类选择器" class="headerlink" title="4.4.2、 :focus伪类选择器"></a>4.4.2、 :focus伪类选择器</h4><ul><li><code>:focus</code>伪类选择器用于<strong>选取获得焦点的表单元素</strong></li><li>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对表单元素来说</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">input : focus &#123;<br>    background-color:yellow;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5、复合选择器总结"><a href="#4-5、复合选择器总结" class="headerlink" title="4.5、复合选择器总结"></a><strong>4.5、复合选择器总结</strong></h3><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th><th></th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是<strong>空格</strong> <code>.nav a</code></td><td></td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是<strong>大于</strong> <code>.nav&gt;p</code></td><td></td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集团声明</td><td>较多</td><td>符号是<strong>逗号</strong> <code>.nav,.header</code></td><td></td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住<code>a&#123;&#125;</code>和<code>a:hover</code> ，实际开发的写法</td><td></td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td><code>input:focus</code> 记住这个写法</td><td></td></tr></tbody></table><h2 id="5、CSS元素显示模式"><a href="#5、CSS元素显示模式" class="headerlink" title="5、CSS元素显示模式"></a>5、CSS元素显示模式</h2><h3 id="5-1、块元素"><a href="#5-1、块元素" class="headerlink" title="5.1、块元素"></a><strong>5.1、块元素</strong></h3><p>1.常见的块元素有**==h1-h6、p、div、ul、ol、li==<strong>等，其中</strong>==div==** 标签是最典型的块元素。</p><p>2.块级元素的特点：</p><p>   ①：比较霸道，自己独占一行</p><p>   ②：<strong>高度，宽度，外边距以及内边距</strong>都可以控制</p><p>   ③：宽度默认是容器（父级宽度）的100%</p><p>   ④：是一个容器及盒子，里面可以放行内或块级元素</p><p>3.注意：</p><p>   ①：文字类的元素内不能使用块级元素</p><p>   ②：**==p==<strong>标签主要用于存放文字，因此</strong></p><p><strong>里面不能放块级元素，特别是不能放</strong><div>**</div></p><p>   ③：同理，**==h1-h6==**等都是文字类块级标签，里面也不能存放其他块级元素。</p><h3 id="5-2、行内元素"><a href="#5-2、行内元素" class="headerlink" title="5.2、行内元素"></a><strong>5.2、行内元素</strong></h3><ol><li><strong>常见的行内元素有</strong><code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</li><li>其中`<span>标签是最典型的行内元素<strong>。有的地方也将行内元素称为</strong>内联元素。</span></li><li>行内元素的特点**：   **</li></ol><p>​    ①：相邻行内元素在一行上，一行可以显示多个   </p><p>​    ②：高，宽直接设置是无效的   </p><p>​    ③：默认宽度就是它本身内容的宽度   </p><p>​    ④：行内元素只能容纳文本或其他行内元素  </p><p><strong>注意：</strong></p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>**&lt;a&gt;**</code>里面可以放块级元素，但是给<code>**&lt;a&gt;**</code>转换一下块级模式最安全</li></ul><h3 id="5-3、行内块元素"><a href="#5-3、行内块元素" class="headerlink" title="5.3、行内块元素"></a><strong>5.3、行内块元素</strong></h3><p><strong>1.在行内元素中有几个特殊的标签 ——</strong> <strong>img /、nput /、td，</strong>它们同时具有块元素和行内元素的特点</p><p><strong>2.<strong>有些资料称它们为</strong>行内块</strong>元素**</p><p>3.<strong>特点</strong>：</p><p>   ①：和相邻行内元素在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)  </p><p>   ②：默认宽度就是它本身内容的宽度(行内元素特点)  </p><p>   ③：高度，行高，外边距以及内边距都可以控制(块级元素特点)</p><h3 id="5-4、元素显示模式总结"><a href="#5-4、元素显示模式总结" class="headerlink" title="5.4、元素显示模式总结"></a><strong>5.4、元素显示模式总结</strong></h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th><th></th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td><td></td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td><td></td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td><td></td></tr></tbody></table><h3 id="5-5、元素显示模式转换"><a href="#5-5、元素显示模式转换" class="headerlink" title="5.5、元素显示模式转换"></a><strong>5.5、元素显示模式转换</strong></h3><ul><li><strong>转换为块元素： <code>display:block</code></strong></li><li><strong>转换为行内元素： <code>display:inline</code></strong></li><li><strong>转换为行内块元素: <code>display:inline-block</code></strong></li></ul><h3 id="5-6、👉小技巧"><a href="#5-6、👉小技巧" class="headerlink" title="5.6、👉小技巧"></a><strong>5.6、👉小技巧</strong></h3><p><strong>CSS没有给我们提供文字垂直居中的代码，这里我们可以用一个小技巧来实现单行文字垂直居中</strong></p><p><strong>解决方案：</strong></p><ul><li><strong>让文字的行高等于盒子的高度，就可以让文字在当前盒子内垂直居中。</strong></li></ul><p><a href="https://postimg.cc/G9M0WkGw"><img data-fancybox="gallery" data-sizes="auto" data-src="https://i.postimg.cc/m24bFjrD/3.png" alt="3.png" class="lazyload"></a></p><p>简单理解：</p><ul><li>行高的上空隙和下空隙把文字挤到中间了</li><li>如果是行高小于盒子高度，文字会偏上，如果行高大于盒子高度，则文字偏下</li></ul><h2 id="6、CSS背景"><a href="#6、CSS背景" class="headerlink" title="6、CSS背景"></a>6、CSS背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。</p><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p><h3 id="6-1、background-color"><a href="#6-1、background-color" class="headerlink" title="6.1、background-color"></a><strong>6.1、background-color</strong></h3><p><strong>background-color 属性定义了元素的背景颜色</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-color: transparent;<br></code></pre></td></tr></table></figure><ul><li>一般情况下默认颜色是<strong>transparent（透明）</strong>，我们也可以手动指定背景颜色为透明色</li></ul><h3 id="6-2、background-image"><a href="#6-2、background-image" class="headerlink" title="6.2、background-image"></a>6.2、background-image</h3><ul><li>background-image <strong>属性描述了元素的背景图像</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-image : none | url(url)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认）</td></tr><tr><td>url</td><td>使用绝对或相地址指定的背景图像</td></tr></tbody></table><p>注意：<strong>背景图片后面的地址，千万不要忘记加URL，同时里面的路径不要加引号</strong>。</p><h3 id="6-3、background-repeat"><a href="#6-3、background-repeat" class="headerlink" title="6.3、background-repeat"></a><strong>6.3、background-repeat</strong></h3><ul><li><strong>background-repeat 属性定义背景图像的平铺</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-repeat: repeat| no-repeat| repeat-x| repeat-y<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像在横向上平铺</td></tr><tr><td>repeat-y</td><td>背景图像在纵向平铺</td></tr></tbody></table><h3 id="6-4、background-position"><a href="#6-4、background-position" class="headerlink" title="6.4、background-position"></a><strong>6.4、background-position</strong></h3><p><strong>background-position 属性可以改变图片在背景中的位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-position: x y;<br></code></pre></td></tr></table></figure><ul><li><strong>参数：X坐标 Y坐标</strong></li><li><strong>可以使用 方位名词 或者 精确单位</strong></li></ul><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数|由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top| center | bottom |left |center |right <strong>方位名词</strong></td></tr></tbody></table><p><strong>1.参数是方位名词</strong></p><p> ①：如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code></p><p> ②：如果只指定了一个方位名词，另一个值省略，则第二个值默认<strong>居中对齐</strong></p><p><strong>2.参数是精准单位</strong></p><p> ①：如果参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</p><p> ②：如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</p><p><strong>3.参数是混合单位</strong></p><p> ①：如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</p><h3 id="6-5、background-attachment"><a href="#6-5、background-attachment" class="headerlink" title="6.5、background-attachment"></a><strong>6.5、background-attachment</strong></h3><ul><li><strong>background-attachment 属性设置背景图像是否固定或者随着页面的其余部分滚动</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background-attachment : scroll | fixed<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="6-6、背景复合写法"><a href="#6-6、背景复合写法" class="headerlink" title="6.6、背景复合写法"></a><strong>6.6、背景复合写法</strong></h3><p><strong><code>background</code> ： 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background : transparent url(image.jpg) repeat-y fixed top;<br></code></pre></td></tr></table></figure><p><strong>这是实际开发中，我们更提倡的写法。</strong></p><h3 id="6-7、背景色半透明"><a href="#6-7、背景色半透明" class="headerlink" title="6.7、背景色半透明"></a><strong>6.7、背景色半透明</strong></h3><p><strong>CSS3为我们提供了背景颜色半透明的效果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background : rgba(0,0,0,0.3);<br></code></pre></td></tr></table></figure><ol><li><strong>最后一个参数是<code>alpha</code> 透明度 ，取值范围在0~1之间</strong></li><li><strong>我们习惯把0.3的 0省略掉，写为<code>background(0,0,0,.3)</code>;</strong></li><li><strong>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</strong></li></ol><h3 id="6-8、背景总结"><a href="#6-8、背景总结" class="headerlink" title="6.8、背景总结"></a><strong>6.8、背景总结</strong></h3><table><thead><tr><th>属性</th><th>作用</th><th>值</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td><td></td><td></td><td></td></tr><tr><td>background-image</td><td>背景图片</td><td><strong>url(图片路径)</strong></td><td></td><td></td><td></td></tr><tr><td>background-repeat</td><td>是否平铺</td><td>repeat/ no-repeat /repeat-x/repeat-y</td><td></td><td></td><td></td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x 和y坐标</td><td></td><td></td><td></td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动) /fixed(背景固定)</td><td></td><td></td><td></td></tr><tr><td>背景简写</td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td><td></td><td></td><td></td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background : rgba(0,0,0,0.3);<strong>后面必须是四个值</strong></td><td></td><td></td><td></td></tr></tbody></table><p><strong>背景图片:实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片, 优点是非常便于控制位置.</strong></p>]]></content>
      
      
      <categories>
          
          <category> CSS基础 </category>
          
          <category> 网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“总结归纳：HTML基础”</title>
      <link href="/2021/08/16/HTML%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/08/16/HTML%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="Web标准（Web标准不是某一个标准，而是一系列标准的集合。）"><a href="#Web标准（Web标准不是某一个标准，而是一系列标准的集合。）" class="headerlink" title="Web标准（Web标准不是某一个标准，而是一系列标准的集合。）"></a>Web标准（Web标准不是某一个标准，而是一系列标准的集合。）</h5><p>​    网页主要由三部分组成：结构（Structure）、表现（Presentation）和行为（Behavior）。</p><p>​    对应的标准也分三方面：</p><p>​                       1.结构化标准语言主要包括HTML, XHTML和XML,用于对网页元素进行整理和分类 。（躯壳）</p><p>​                       2.表现标准语言主要包括CSS，用于设置网页元素的外观样式。（外貌）</p><p>​                       3.行为标准主要包括对象模型JAVAScript、（如W3C DOM）、ECMAScript等，行为交互。（行为动作）</p><span id="more"></span><h1 id="HTML网页设计"><a href="#HTML网页设计" class="headerlink" title="HTML网页设计"></a>HTML网页设计</h1><h2 id="HTML概念"><a href="#HTML概念" class="headerlink" title="HTML概念"></a><strong>HTML概念</strong></h2><p>一、HTML的定义</p><p>  HTML，超文本标记语言，写给浏览器的语言，目前网络上应用最广泛的语言。HTML也在不断的更新，最新版本已经出现了HTML5。在HTML5中出现了许多新特性，也遗弃了一些旧元素。我们写好html文件后，在浏览器中打开。主流的浏览器包括IE、Firefox、Chrome、Goole等。</p><p>二、HTML标签元素</p><p>  HTML元素由开始标签和结束标签组成。如</p><p>/</p><p>,</p><h1><h1>。虽然现在我们还不知道具体标签代表的意思，但标签一定是这样的格式：有一对开始&lt;&gt;和结束&lt;/&gt;。一般标签名推荐用小写。标签具有属性，属性用来表示标签的特征。比如，我们用大小这个属性，来衡量一个苹果。所以，大小可以用来表示苹果的特征。属性时写在标签里面的，而且是开始标签内。<p></p><p>三、HTML 的基本结构</p><p> 结构由网页的头部和网页的身体组成。如下例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;这是我的博客&lt;/title&gt;         &lt;!-- 网页标题 --&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br>      这是我的身体。        &lt;!-- 文档的主体，页面内容基本放在body里面 --&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a><strong>HTML标签分类</strong></h2><p><strong>在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素****。</strong></p><p><strong>1.双标签</strong></p><p><strong>&lt;标签名&gt;</strong> <strong>内容</strong> <strong>&lt;/标签名&gt;</strong></p><p><strong>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</strong></p><p><strong>比如</strong> **<body>**<strong>我是文字</strong> <strong></strong></body></p><p><strong>2.单标签</strong></p><p><strong>&lt;标签名 /&gt;</strong></p><p><strong>单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</strong></p><p><strong>比如</strong> <strong><br></strong></p><p>**<br>**</p><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a><strong>HTML标签关系</strong></h2><p><strong>标签的相互关系就分为两种：</strong></p><p><strong>1.嵌套关系</strong></p><p><strong><head> <title> </title> </head></strong></p><p><strong>2.并列关系</strong></p><p>**<head></head></p><body></body>**<p>**<br>**</p><p>**<br>**</p><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="==HTML常用标签=="></a><strong>==HTML常用标签==</strong></h2><h3 id="一、HTML中的标题（-）"><a href="#一、HTML中的标题（-）" class="headerlink" title="一、HTML中的标题（-）"></a>一、HTML中的标题（<h1>-<h6>）</h6></h1></h3><h4 id="1-1、标题标签"><a href="#1-1、标题标签" class="headerlink" title="1.1、标题标签"></a>1.1、标题标签</h4><p>基本语法格式如下：&lt;h#&gt; 标题文本 &lt;/h#&gt;注意： h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用，或者页面中最重要标题信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;h1&gt;标题1&lt;/h1&gt;             <br> <br>&lt;h2&gt;标题2&lt;/h2&gt;<br> <br>&lt;h3&gt;标题3&lt;/h3&gt;<br> <br>&lt;h4&gt;标题4&lt;/h4&gt;<br> <br>&lt;h5&gt;标题5&lt;/h5&gt;<br> <br>&lt;h6&gt;标题6&lt;/h6&gt;<br></code></pre></td></tr></table></figure><p>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/11c9251e-eb1b-497f-90db-db093e395047.jpg)</p><h3 id><a href="#" class="headerlink" title></a></h3><p><strong>2.注释标签</strong></p><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!-- 注释语句 --&gt;   ctrl + /       或者 ctrl +shift + /<br></code></pre></td></tr></table></figure><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><h3 id="二、HTML中的文字"><a href="#二、HTML中的文字" class="headerlink" title="二、HTML中的文字"></a>二、HTML中的文字</h3><h4 id="2-1、段落标签"><a href="#2-1、段落标签" class="headerlink" title="2.1、段落标签"></a><strong>2.1、段落标签</strong></h4><p>单词缩写： paragraph 段落 [ˈpærəgræf] 无须记这个单词</p><p>在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;p&gt;  文本内容  &lt;/p&gt;<br></code></pre></td></tr></table></figure><p><strong>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</strong></p><h4 id="2-2、换行标签"><a href="#2-2、换行标签" class="headerlink" title="2.2、换行标签"></a>2.2、换行标签</h4><p>单词缩写： break 打断 ,换行</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;br /&gt;<br></code></pre></td></tr></table></figure><h4 id="2-3、div-span标签"><a href="#2-3、div-span标签" class="headerlink" title="2.3、div span标签"></a><strong>2.3、div span标签</strong></h4><p>div span 是没有语义的 是我们网页布局主要的2个盒子 css+div</p><p>div 就是 division 的缩写 分割， 分区的意思 其实有很多div 来组合网页。</p><p><strong>语法格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;div&gt; 这是头部 &lt;/div&gt;    &lt;span&gt;今日价格&lt;/span&gt;<br></code></pre></td></tr></table></figure><h4 id="2-4、文本格式标签"><a href="#2-4、文本格式标签" class="headerlink" title="2.4、文本格式标签"></a>2.4、文本格式标签</h4><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><p>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.8733203296777664.png)</p><h3 id="三、HTML中的图像"><a href="#三、HTML中的图像" class="headerlink" title="三、HTML中的图像"></a>三、HTML中的图像</h3><h4 id="3-1、图像标签img"><a href="#3-1、图像标签img" class="headerlink" title="3.1、图像标签img"></a>3.1、图像标签img</h4><p>HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img>以及和他相关的属性。其基本语法格式如下：</p><p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;img src=&quot;图像URL&quot; /&gt;<br></code></pre></td></tr></table></figure><p><em><strong>*![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.14571880950511662.png)<br>*</strong></em></p><h3 id="四、HTML中的超链接"><a href="#四、HTML中的超链接" class="headerlink" title="四、HTML中的超链接"></a>四、HTML中的超链接</h3><h4 id="4-1、链接标签"><a href="#4-1、链接标签" class="headerlink" title="4.1、链接标签"></a><strong>4.1、链接标签</strong></h4><p>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;<br></code></pre></td></tr></table></figure><ul><li>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。 Hypertext Reference的缩写。意思是超文本引用</li><li>target：用于指定链接页面的打开方式，其取值有self和blank两种，其中self为默认值，blank为在新窗口中打开方式。</li></ul><p>注意：</p><ol><li>1.外部链接 需要添加 http:// <a href="https://www.cnblogs.com/linchonghui/p/www.baidu.com">www.baidu.com</a></li><li>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </li><li>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</li><li>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</li></ol><h4 id="4-2、锚点链接定位-（寻址和地址搭配使用-快速定位相关内容）"><a href="#4-2、锚点链接定位-（寻址和地址搭配使用-快速定位相关内容）" class="headerlink" title="4.2、锚点链接定位 （寻址和地址搭配使用 快速定位相关内容）"></a><strong>4.2、锚点链接定位 （寻址和地址搭配使用 快速定位相关内容）</strong></h4><p>创建锚点链接，用户能够快速定位到目标内容。创建锚点链接分为两步：</p><p>1.使用&lt;“a href=”#id名&gt;“链接文本”创建链接文本（被点击的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;a href=&quot;#two&quot;&gt;  <br></code></pre></td></tr></table></figure><p>2.使用相应的id名标注跳转目标的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;h3 id=&quot;two&quot;&gt;第2集&lt;/h3&gt;<br></code></pre></td></tr></table></figure><h5 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h5><h6 id="img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-82b4f860-54d8-4623-8cc2-93defc05cd0e-jpg-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-6026ac6a-5c45-4329-bf7d-afd4794182c9-jpg"><a href="#img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-82b4f860-54d8-4623-8cc2-93defc05cd0e-jpg-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-6026ac6a-5c45-4329-bf7d-afd4794182c9-jpg" class="headerlink" title="![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/82b4f860-54d8-4623-8cc2-93defc05cd0e.jpg)  ![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/6026ac6a-5c45-4329-bf7d-afd4794182c9.jpg)"></a>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/82b4f860-54d8-4623-8cc2-93defc05cd0e.jpg)  ![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/6026ac6a-5c45-4329-bf7d-afd4794182c9.jpg)</h6><h6 id="最终效果：实现-点击-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-63423e41-2c1f-4604-b820-2bfff15d251d-jpg-跳转到-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-5ce92e90-40db-4998-b545-a2859293caec-jpg"><a href="#最终效果：实现-点击-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-63423e41-2c1f-4604-b820-2bfff15d251d-jpg-跳转到-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-5ce92e90-40db-4998-b545-a2859293caec-jpg" class="headerlink" title="最终效果：实现   点击 ![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/63423e41-2c1f-4604-b820-2bfff15d251d.jpg)  跳转到   ![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/5ce92e90-40db-4998-b545-a2859293caec.jpg)"></a>最终效果：实现   点击 ![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/63423e41-2c1f-4604-b820-2bfff15d251d.jpg)  跳转到   ![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/5ce92e90-40db-4998-b545-a2859293caec.jpg)</h6><h4 id="4-3、路径（相对路径和绝对路径）"><a href="#4-3、路径（相对路径和绝对路径）" class="headerlink" title="4.3、路径（相对路径和绝对路径）"></a>4.3、路径（相对路径和绝对路径）</h4><h5 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a><strong>相对路径</strong>：</h5><p><img data-fancybox="gallery" data-sizes="auto" data-src="//xxxxxx-collab.github/Users\ACER\AppData\Roaming\Typora\typora-user-images\image-20211026133906970.png" alt="image-20211026133906970" class="lazyload"></p><p><strong>相关说明：</strong></p><table><thead><tr><th align="left">./                 当前目录</th><th></th></tr></thead><tbody><tr><td align="left">../                <strong>回到上一层目录</strong></td><td></td></tr><tr><td align="left">images/       <strong>进入一层目录</strong></td><td></td></tr><tr><td align="left">../images/    <strong>回到上一层目录</strong>，然后再进入images目录</td><td></td></tr></tbody></table><h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a><strong>绝对路径</strong></h5><p>绝对路径以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif%E2%80%9D%E3%80%82">http://www.itcast.cn/images/logo.gif”。</a></p><h3 id="五、HTML中的表格"><a href="#五、HTML中的表格" class="headerlink" title="五、HTML中的表格"></a>五、HTML中的表格</h3><h4 id="5-1、表格-table"><a href="#5-1、表格-table" class="headerlink" title="5.1、表格 table"></a><strong>5.1、表格 table</strong></h4><p><strong>表格的现在还是较为常用的一种标签</strong>，但不是用来布局，常见处理、显示表格式数据。</p><p>表格的创建：在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;table&gt;<br>  &lt;tr&gt;           &lt;!--表格第一行--&gt;<br>    &lt;td&gt;单元格内的文字&lt;/td&gt;    &lt;!--表格第一行第一个空格--&gt;<br>    ...<br>  &lt;/tr&gt;<br>  &lt;tr&gt;           &lt;!--表格第二行--&gt;<br>    ...<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p>在上面的语法中包含三对HTML标签，分别为 table&lt;/table、tr&lt;/tr、td&lt;/td，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释:</p><p>1.table用于定义一个表格。</p><p>2.tr 用于定义表格中的一行，必须嵌套在 table标签中，在 table中包含几对 tr，就有几行表格。</p><p>3.td /td：用于定义表格中的单元格，必须嵌套在<tr></tr>标签中，一对 <tr> </tr>中包含几对<td></td>，就表示该行中有多少列（或多少个单元格）。</p><p><strong>注意：</strong></p><ol><li><tr></tr>中只能嵌套<td></td></li><li><td></td>标签，他就像一个容器，可以容纳所有的元素</li></ol><h4 id="5-2、表格属性"><a href="#5-2、表格属性" class="headerlink" title="5.2、表格属性"></a>5.2、表格属性</h4><p><strong>用法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;table witdth=&quot;500&quot; border=&quot;1&quot; &gt;<br>    ...<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p><strong>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.9438506086094592.png)![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.54452529910397.png)</strong></p><h4 id="5-3、表格结构（了解即可）"><a href="#5-3、表格结构（了解即可）" class="headerlink" title="5.3、表格结构（了解即可）"></a><strong>5.3、表格结构（了解即可）</strong></h4><p>在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：</p><thead></thead>：用于定义表格的头部。<p>必须位于<table></table> 标签中，一般包含网页的logo和导航等头部信息。</p><tbody></tbody>：用于定义表格的主体。<p>位于<table></table>标签中，一般包含网页中除头部和底部之外的其他内容。</p><p>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.2732266909440791.png)</p><h4 id="5-4、表格标题"><a href="#5-4、表格标题" class="headerlink" title="5.4、表格标题"></a><strong>5.4、表格标题</strong></h4><p>表格的标题： caption</p><p>用法：caption 元素定义表格标题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;table&gt;<br>   &lt;caption&gt;我是表格标题&lt;/caption&gt;<br>&lt;/table&gt;<br></code></pre></td></tr></table></figure><p><strong>caption</strong> <strong>标签必须紧随</strong> <strong>table</strong> <strong>标签之后。</strong>您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p><h4 id="5-5、合并单元格-难点"><a href="#5-5、合并单元格-难点" class="headerlink" title="5.5、合并单元格(难点)"></a><strong>5.5、合并单元格(难点)</strong></h4><p><strong>跨行合并：</strong>rowspan    <strong>跨列合并：</strong>colspan</p><p><strong>合并单元格的思想：</strong></p><p> 将多个内容合并的时候，就会有多余的东西，把它删除。 例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p><p> 公式： 删除的个数 = 合并的个数 - 1</p><p>合并的顺序 先上 先左.</p><h4 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a><strong>总结表格</strong></h4><p>表格提供了HTML 中定义表格式数据的方法。</p><p>表格中由行中的单元格组成。</p><p>表格中没有列元素，列的个数取决于行的单元格个数。</p><p>表格不要纠结于外观，那是CSS 的作用。</p><h3 id="六、HTML中的列表（无序列表、有序列表、自定义列表）"><a href="#六、HTML中的列表（无序列表、有序列表、自定义列表）" class="headerlink" title="六、HTML中的列表（无序列表、有序列表、自定义列表）"></a>六、HTML中的列表（无序列表、有序列表、自定义列表）</h3><h4 id="6-1、无序列表-ul-（重点）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-31b91f22-4971-4b65-afbe-c4fe108a6bc6-png"><a href="#6-1、无序列表-ul-（重点）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-31b91f22-4971-4b65-afbe-c4fe108a6bc6-png" class="headerlink" title="6.1、无序列表 ul （重点）![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/31b91f22-4971-4b65-afbe-c4fe108a6bc6.png)"></a><strong>6.1、无序列表 ul （重点）</strong>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/31b91f22-4971-4b65-afbe-c4fe108a6bc6.png)</h4><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。<strong>其基本语法格式如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;ul&gt;<br>  &lt;li&gt;列表项1&lt;/li&gt;<br>  &lt;li&gt;列表项2&lt;/li&gt;<br>  &lt;li&gt;列表项3&lt;/li&gt;<br>  ......<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p>先到先得，后发布先显示。</p><p><strong>注意：</strong></p><ol><li><ul></ul>中只能嵌套</li><li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。<li></li><li>与</li>之间相当于一个容器，可以容纳所有元素。<li><p>无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</p></li></ol><h4 id="6-2、有序列表-ol-（了解）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-537a3377-5bda-483c-8e21-71fe6ecc248a-png"><a href="#6-2、有序列表-ol-（了解）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-537a3377-5bda-483c-8e21-71fe6ecc248a-png" class="headerlink" title="6.2、有序列表 ol （了解）![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/537a3377-5bda-483c-8e21-71fe6ecc248a.png)"></a><strong>6.2、有序列表 ol （了解）</strong>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/537a3377-5bda-483c-8e21-71fe6ecc248a.png)</h4><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，<strong>有序列表的基本语法格式如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;ol&gt;<br>  &lt;li&gt;列表项1&lt;/li&gt;<br>  &lt;li&gt;列表项2&lt;/li&gt;<br>  &lt;li&gt;列表项3&lt;/li&gt;<br>  ......<br>&lt;/ol&gt;<br></code></pre></td></tr></table></figure><p>所有特性基本与ul 一致。 但是实际工作中， 较少用 ol</p><h4 id="6-3、自定义列表（理解）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-b6fa099d-d9cf-4286-939e-08750cd94e03-png"><a href="#6-3、自定义列表（理解）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-b6fa099d-d9cf-4286-939e-08750cd94e03-png" class="headerlink" title="6.3、自定义列表（理解）![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/b6fa099d-d9cf-4286-939e-08750cd94e03.png)"></a><strong>6.3、自定义列表（理解）</strong>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/b6fa099d-d9cf-4286-939e-08750cd94e03.png)</h4><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。<strong>其基本语法如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;dl&gt;<br>  &lt;dt&gt;名词1&lt;/dt&gt;<br>  &lt;dd&gt;名词1解释1&lt;/dd&gt;<br>  &lt;dd&gt;名词1解释2&lt;/dd&gt;<br>  ...<br>  &lt;dt&gt;名词2&lt;/dt&gt;<br>  &lt;dd&gt;名词2解释1&lt;/dd&gt;<br>  &lt;dd&gt;名词2解释2&lt;/dd&gt;<br>  ...<br>&lt;/dl&gt;<br></code></pre></td></tr></table></figure><h3 id="七、HTML中的表单"><a href="#七、HTML中的表单" class="headerlink" title="七、HTML中的表单"></a>七、HTML中的表单</h3><h4 id="7-1、表单标签"><a href="#7-1、表单标签" class="headerlink" title="7.1、表单标签"></a><strong>7.1、表单标签</strong></h4><p><strong>目的是为了收集用户信息。</strong></p><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p><img data-fancybox="gallery" data-sizes="auto" data-src="file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.853223006075271.png" alt="img" class="lazyload"><p><strong>表单控件：</strong>包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p><strong>提示信息：</strong>一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p><strong>表单域：</strong>他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a><strong>表单域</strong></h4><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。<strong>创建表单的基本语法格式如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单名称&quot;&gt;<br>  各种表单控件<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><p>Action在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</p><p>method用于设置表单数据的提交方式，其取值为get或post。</p><p>name用于指定表单的名称，以区分同一个页面中的多个表单。</p><p>注意： 每个表单都应该有自己表单域。</p><h4 id="7-2、input-控件-重点"><a href="#7-2、input-控件-重点" class="headerlink" title="7.2、input 控件(重点)"></a><strong>7.2、input 控件(重点)</strong></h4><p><strong>在上面的语法中，input /标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，input /标签还可以定义很多其他的属性，其常用属性如下表所示。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;form&gt;<br>  用户名：&lt;input type=&quot;text&quot; value=&quot;请输入用户名&quot; maxlength=&quot;8&quot;&gt; &lt;br&gt;       &lt;!--框内提示“请输入用户名” 最多输入8位--&gt;<br>  密码：&lt;input type=&quot;password&quot;&gt; &lt;br&gt;            &lt;!--类型为密码输入框 可以隐藏输入内容--&gt;<br>  性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; checked=&quot;checked&quot;&gt;男    &lt;input type=&quot;radio&quot; name=&quot;sex&quot;&gt;女 &lt;br&gt;    &lt;!--性别默认（checked控件）为男 只能单选（name控件）--&gt;<br>  爱好：&lt;input type=&quot;checkbox&quot;&gt;看书 &lt;input type=&quot;checkbox&quot;&gt;听歌 &lt;input type=&quot;checkbox&quot;&gt;健身 &lt;br&gt;         &lt;!--爱好为多选框--&gt;<br>  个人介绍：&lt;textarea&gt;个人简介&lt;/textarea&gt; &lt;br&gt;      &lt;!--多行文本框--&gt;<br>  &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;       &lt;!--按钮 通过value属性更改按钮内文字--&gt; <br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/0.834206246864057.png)![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/1dbeb5e8-f1ba-42a7-ab30-a88e4186eaf1.png)</p><h4 id="7-3、label标签-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-8e4e7726-65e1-44a8-a828-04855f9ec285-jpg-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-e1972fcf-7ae2-4bf4-bccf-ab49b1c5694a-png"><a href="#7-3、label标签-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-8e4e7726-65e1-44a8-a828-04855f9ec285-jpg-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-e1972fcf-7ae2-4bf4-bccf-ab49b1c5694a-png" class="headerlink" title="7.3、label标签![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/8e4e7726-65e1-44a8-a828-04855f9ec285.jpg)![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/e1972fcf-7ae2-4bf4-bccf-ab49b1c5694a.png)"></a><strong>7.3、label标签</strong>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/8e4e7726-65e1-44a8-a828-04855f9ec285.jpg)![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/e1972fcf-7ae2-4bf4-bccf-ab49b1c5694a.png)</h4><p><strong>label</strong> <strong>标签为</strong> <strong>input</strong> <strong>元素定义标注（标签）。</strong></p><p><strong>作用：</strong> <strong>用于绑定一个表单元素</strong><strong>, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点，用来增加用户体贴</strong></p><p><strong>相关语法（搭配使用）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;man&quot;&gt; <br>&lt;label for=&quot;man&quot;&gt;男&lt;&gt;label&gt;         &lt;!--扩大点击的范围--&gt;<br></code></pre></td></tr></table></figure><p><strong><label> for=”male”&gt;Male</label></strong></p><p><strong><input type="radio" name="sex" id="male" value="male"></strong></p><h4 id="7-4、select标签-下拉表单）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-a6cca191-41fc-4c22-8a67-0ba4558d7006-jpg"><a href="#7-4、select标签-下拉表单）-img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-a6cca191-41fc-4c22-8a67-0ba4558d7006-jpg" class="headerlink" title="7.4、select标签(下拉表单）![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/a6cca191-41fc-4c22-8a67-0ba4558d7006.jpg)"></a><strong>7.4、select标签(下拉表单）</strong>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/a6cca191-41fc-4c22-8a67-0ba4558d7006.jpg)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;select&gt;<br>  &lt;option&gt;选项1&lt;/option&gt;<br>  &lt;option&gt;选项2&lt;/option&gt;<br>  &lt;option selected=&quot;selected&quot;&gt;选项3&lt;/option&gt;    &lt;!-- 该选项为默认选中项 --&gt;<br>  ...<br>&lt;/select&gt;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>1、select&lt;/select中至少应包含一对option&gt;&lt;/option。</strong></p><p><strong>2、在option 中定义selected =” selected “时，当前项即为默认选中项</strong></p><h4 id="7-5、textarea标签-文本域"><a href="#7-5、textarea标签-文本域" class="headerlink" title="7.5、textarea标签(文本域)"></a><strong>7.5、textarea标签(文本域)</strong></h4><h4 id="img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-da30a2c3-f98a-4d68-8ade-3934a5c2e65e-jpg"><a href="#img-file-C-Users-ACER-Documents-My-Knowledge-temp-5ea6619a-ef3c-4093-ae34-7c6639320b7a-128-index-files-da30a2c3-f98a-4d68-8ade-3934a5c2e65e-jpg" class="headerlink" title="![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/da30a2c3-f98a-4d68-8ade-3934a5c2e65e.jpg)"></a>![img](file:///C:/Users/ACER/Documents/My Knowledge/temp/5ea6619a-ef3c-4093-ae34-7c6639320b7a/128/index_files/da30a2c3-f98a-4d68-8ade-3934a5c2e65e.jpg)</h4><p><strong>如果需要输入大量的文本信息，就需要用到textarea/textarea标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;textarea cols=&quot;每行中的字符数&quot; rows=&quot;显示的行数&quot;&gt;文本内容<br>&lt;/textarea&gt;<br></code></pre></td></tr></table></figure></h1></h1>]]></content>
      
      
      <categories>
          
          <category> HTML基础 </category>
          
          <category> 网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“我的第一篇Hexo博客”</title>
      <link href="/2021/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E2%80%9CHexo%E2%80%9D/"/>
      <url>/2021/07/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E2%80%9CHexo%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​      JavaScript是一门充满活力、简单易用的语言，又是一门具有许多复杂微妙技术的语言。</p><span id="more"></span><p>前端的内容分为基础和实践两块:<br>基础部分包括了HTML（语言、元素）、CSS（语言、功能）、JavaScript（运行时、文法、语义）、浏览器和API（实现原理、API），<br>实践部分包含了性能、工具链、持续集成、搭建系统、架构与基础库。<br>1.HTML和CSS基础<br>2.H5和CSS3（其实没啥东西，和第一部分一起学）<br>3.JS基础（BOM和DOM），JS的ES5以及ES6版本规范，新语法（重点Promise）<br>node.js<br>4.原生 ajax<br>5.ES module 和 CommonJS（这两个就等于学了Node部分），顺便Node再看下fs模块，另外模块也不怎么用<br>5.Vue2.0<br>6.TypeScript<br>7.Vue3.0<br>8.uni-app<br>9.react</p><p>【10】JavaScript高级（含ES6）<br>【11】前后端交互 Node+Gulp<br>【12】前后端交互 MongoDB+Express<br>【13】项目实战：博客项目<br>【14】前后端交互 Ajax<br>【15】前后端交互Git和GitHub<br>【16】项目实战：阿里百秀项目<br>【17】Vue基础<br>【18】前端工程化：ES6模块化和webpack打包<br>【19】前端工程化：Vue-cli3和Element-UI<br>【20】Vue实战项目：电商管理系统（Element-UI）<br>【21】Vue.js项目实战开发 Vuex</p><p>html-css-js-vue-node-nginx-服务器-小程序<br>前端架构主要分为四层：路由，状态机，公共方法，http 请求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
